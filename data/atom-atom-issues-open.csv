Title,Body
Uncaught TypeError: Cannot destructure property `itemHeight` of 'undefined' or 'null'.,"[Enter steps to reproduce:]

1. ...
2. ...

**Atom**: 1.40.1 x64
**Electron**: 3.1.10
**OS**: Microsoft Windows 10 Home
**Thrown From**: Atom Core


### Stack Trace

Uncaught TypeError: Cannot destructure property `itemHeight` of 'undefined' or 'null'.

```
At C:\Users\Josh\AppData\Local\atom\app-1.40.1\resources\app\static\<embedded>:14

TypeError: Cannot destructure property `itemHeight` of 'undefined' or 'null'.
    at SuggestionListElement.scrollSelectedItemIntoView (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:14:1490932)
    at SuggestionListElement.renderSelectedItem (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:14:1490717)
    at ViewRegistry.performDocumentUpdate (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:11:325676)
```

### Commands

```
  2x -1:56.1.0 run:file (input.hidden-input)
 25x -1:21.9.0 core:move-up (input.hidden-input)
     -1:20.6.0 core:move-right (input.hidden-input)
     -1:20.6.0 core:move-down (input.hidden-input)
     -1:20 core:move-up (input.hidden-input)
  2x -1:01.7.0 core:backspace (input.hidden-input)
```

### Non-Core Packages

```
atom-runner 2.7.1 
busy-signal 2.0.1 
intentions 1.1.5 
linter 2.3.1 
linter-flake8 2.4.0 
linter-ui-default 1.8.0 
teletype 0.13.4 
```

"
Uncaught RangeError: Invalid count value,"[Enter steps to reproduce:]

1. ...
2. ...

**Atom**: 1.40.1 x64
**Electron**: 3.1.10
**OS**: Mac OS X 10.13.6
**Thrown From**: Atom Core


### Stack Trace

Uncaught RangeError: Invalid count value

```
At /Applications/Atom.app/Contents/Resources/app/static/<embedded>:14

RangeError: Invalid count value
    at String.repeat (<anonymous>)
    at ScreenLineBuilder.emitIndentWhitespace (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:14:1199795)
    at ScreenLineBuilder.buildScreenLines (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:14:1194618)
    at DisplayLayer.getScreenLines (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:14:95252)
    at TextEditorComponent.queryScreenLinesToRender (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:79712)
    at TextEditorComponent.updateSyncBeforeMeasuringContent (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:70365)
    at TextEditorComponent.updateSync (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:67993)
    at visible.suppressUpdates.updatedSynchronously.updateScheduled.i.getScheduler.updateDocument (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:67021)
    at ViewRegistry.performDocumentUpdate (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:325676)
```

### Commands

```
```

### Non-Core Packages

```
atom-beautify 0.32.2 
atom-html-preview 0.2.5 
atom-live-server 2.2.0 
atom-runner 2.7.1 
atom-xcode 0.1.3 
browser-plus 0.0.98 
emmet 2.4.3 
markdown-preview-plus 2.5.5 
markdown-writer 2.7.3 
pigments 0.40.2 
pretty-json 2.0.1 
```

"
Split pane does not close after last tab is closed,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description
After closing the last tab in a pane, the empty pane remains around. It used to close automatically. I have to right-click and ""close pane"" (or cmd-W) to clear it.

### Steps to Reproduce

1. open any file 
2. right click on its tab and select ""split right""
3. a new instance of the editor opens in a new pane to the right
4. Close the tab in the new right pane
5. The empty right pane remains even though there are no files to show

**Expected behavior:**
I expected the extra pane to automatically close when its last tab is closed.

**Actual behavior:**
The empty pane hangs around taking up space

**Reproduces how often:**
100%

### Versions
Atom    : 1.34.0
Electron: 2.0.16
Chrome  : 61.0.3163.100
Node    : 8.9.3
MacOS: Mojave 10.14.6
"
Uncaught Error: Cannot call function 'emit' on missing remote object 165Error: Cannot call funct...,"[Enter steps to reproduce:]

1. ... on surface pro, windows 10 touch screen and hold over misspelled word. 

**Atom**: 1.40.1 x64
**Electron**: 3.1.10
**OS**: Microsoft Windows 10 Pro
**Thrown From**: Atom Core


### Stack Trace

Uncaught Error: Cannot call function 'emit' on missing remote object 165
Error: Cannot call function 'emit' on missing remote object 165
    at throwRPCError (C:\Users\gothe\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\rpc-server.js:145:17)
    at EventEmitter.<anonymous> (C:\Users\gothe\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (C:\Users\gothe\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\api\web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)


```
At C:\Users\gothe\AppData\Local\atom\app-1.40.1\resources\electron.asar\renderer\api\remote.js:219

Error: Cannot call function 'emit' on missing remote object 165
Error: Cannot call function 'emit' on missing remote object 165
    at throwRPCError (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/rpc-server.js:145:17)
    at EventEmitter.<anonymous> (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/api/web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)

    at metaToException (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:271:17)
    at Object.exception (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:219:30)
    at metaToValue (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:223:28)
    at Object.remoteMemberFunction (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:123:16)
    at ContextMenuManager.showForEvent (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:11:400736)
    at WindowEventHandler.handleDocumentContextmenu (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:11:286906)
```

### Commands

```
 23x -1:19.6.0 core:move-down (input.hidden-input)
  3x -1:13.8.0 core:move-up (input.hidden-input)
 28x -1:13.1.0 core:move-down (input.hidden-input)
  7x -1:04.4.0 core:move-up (input.hidden-input)
     -1:02.8.0 core:move-down (input.hidden-input)
     -1:02.6.0 core:move-left (input.hidden-input)
     -0:54.7.0 editor:newline (input.hidden-input)
  2x -0:33.6.0 core:backspace (input.hidden-input)
 28x -0:24.6.0 core:move-down (input.hidden-input)
  4x -0:17.6.0 core:move-up (input.hidden-input)
     -0:16.5.0 editor:move-to-end-of-word (input.hidden-input)
  2x -0:16 core:move-left (input.hidden-input)
     -0:15.4.0 core:backspace (input.hidden-input)
     -0:14.6.0 core:move-down (input.hidden-input)
     -0:13.9.0 core:move-up (input.hidden-input)
     -0:13.2.0 core:backspace (input.hidden-input)
```

### Non-Core Packages

```
atom-notes 1.20.0 
markdown-preview-plus 3.10.0 
minimap 4.29.9 
notifications-plus 0.69.15 
wordcount 3.1.0 
```

"
Uncaught Error: Cannot call function 'getPosition' on missing remote object 246Error: Cannot cal...,"[Enter steps to reproduce:]

1. ...
2. ...

**Atom**: 1.40.1 x64
**Electron**: 3.1.10
**OS**: Ubuntu 18.04.3
**Thrown From**: Atom Core


### Stack Trace

Uncaught Error: Cannot call function 'getPosition' on missing remote object 246
Error: Cannot call function 'getPosition' on missing remote object 246
    at throwRPCError (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/rpc-server.js:145:17)
    at EventEmitter.<anonymous> (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/api/web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)


```
At /snap/atom/238/usr/share/atom/resources/electron.asar/renderer/api/remote.js:219

Error: Cannot call function 'getPosition' on missing remote object 246
Error: Cannot call function 'getPosition' on missing remote object 246
    at throwRPCError (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/rpc-server.js:145:17)
    at EventEmitter.<anonymous> (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (/snap/atom/238/usr/share/atom/resources/electron.asar/browser/api/web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)

    at metaToException (/snap/atom/238/usr/share/atom/resources/electron.asar/renderer/api/remote.js:271:17)
    at Object.exception (/snap/atom/238/usr/share/atom/resources/electron.asar/renderer/api/remote.js:219:30)
    at metaToValue (/snap/atom/238/usr/share/atom/resources/electron.asar/renderer/api/remote.js:223:28)
    at Object.remoteMemberFunction (/snap/atom/238/usr/share/atom/resources/electron.asar/renderer/api/remote.js:123:16)
    at AtomEnvironment.getWindowDimensions (/snap/atom/238/usr/share/atom/resources/app/static/<embedded>:1:705395)
    at AtomEnvironment.storeWindowDimensions (/snap/atom/238/usr/share/atom/resources/app/static/<embedded>:1:705810)
    at WindowEventHandler.handleWindowBlur (/snap/atom/238/usr/share/atom/resources/app/static/<embedded>:11:285354)
```

### Commands

```
  2x -5:54.6.0 core:move-down (input.hidden-input)
  7x -5:54 core:move-left (input.hidden-input)
     -5:50.6.0 core:move-down (input.hidden-input)
  7x -5:50.4.0 core:move-left (input.hidden-input)
     -5:46.8.0 core:save (input.hidden-input)
 20x -5:14.6.0 core:backspace (input.hidden-input)
     -4:56.3.0 core:save (input.hidden-input)
  2x -4:06.0 core:move-left (input.hidden-input)
     -3:53.3.0 atom-beautify:beautify-editor (input.hidden-input)
  4x -3:52.7.0 core:save (input.hidden-input)
     -2:13.9.0 core:move-left (input.hidden-input)
     -2:12.7.0 core:backspace (input.hidden-input)
     -2:11 core:save (input.hidden-input)
     -1:50.5.0 core:undo (input.hidden-input)
  3x -1:49.1.0 core:copy (input.hidden-input)
     -0:29 core:save (input.hidden-input)
```

### Non-Core Packages

```
activate-power-mode 2.7.0 
ask-stack 2.2.0 
atom-beautify 0.33.4 
atom-jinja2 0.6.0 
autocomplete-python 1.16.0 
browser-plus 0.0.98 
color-picker 2.3.0 
emmet 2.4.3 
file-icons 2.1.35 
git-plus 8.7.1 
kite 0.171.0 
minimap 4.29.9 
platformio-ide-terminal 2.9.4 
pp 0.0.1 
preview-plus 1.2.7 
script 3.18.1 
todo 0.6.0 
```

"
Automatically rename untitled tabs,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

---

Keep in mind that Atom is highly customizable in a number of ways and we strongly prefer that you consider these options before filing this issue:

* https://flight-manual.atom.io/using-atom/sections/basic-customization/: tweak Atom's configuration, styles, and keybindings.
* https://flight-manual.atom.io/using-atom/sections/atom-packages/: install a community package.
* https://flight-manual.atom.io/hacking-atom/: use the Atom API in your init script, to create a package, or to enhance an existing package.

If you're convinced that none of these options are appropriate for the feature you want, please explain why that's the case by completely filling out the issue template below.

Also note that the Atom team has finite resources so it's unlikely that we'll work on feature requests. If we're interested in a particular feature however, we'll follow up and ask you to submit an RFC to talk about it in more detail.

-->

## Summary

<!-- One paragraph explanation of the feature. -->

Hi, i was Sublime's user, and now i'm using Atom as my main editor. I would like to suggest a feature like Sublime's, the editor will automatically rename untitled (unsaved) tabs.

## Motivation

<!-- Why are we doing this? What use cases does it support? What is the expected outcome? -->

This feature actually helps people who like writing down notes a lot, easier to organize and find their notes in their editor based on beginning words to be set as tab title like below.

![095](https://user-images.githubusercontent.com/25204246/65382456-f7141280-dd2f-11e9-9e74-9d31ff98caf7.png)


## Describe alternatives you've considered

<!-- A clear and concise description of the alternative solutions you've considered. Be sure to explain why Atom's existing customizability isn't suitable for this feature. -->

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
"
Uncaught Error: Cannot call function 'getPosition' on missing remote object 241Error: Cannot cal...,"[Enter steps to reproduce:]

1. ...
2. ...

**Atom**: 1.40.1 x64
**Electron**: 3.1.10
**OS**: Microsoft Windows 10 Pro
**Thrown From**: Atom Core


### Stack Trace

Uncaught Error: Cannot call function 'getPosition' on missing remote object 241
Error: Cannot call function 'getPosition' on missing remote object 241
    at throwRPCError (C:\Users\mohd. Shoaib\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\rpc-server.js:145:17)
    at EventEmitter.<anonymous> (C:\Users\mohd. Shoaib\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (C:\Users\mohd. Shoaib\AppData\Local\atom\app-1.40.1\resources\electron.asar\browser\api\web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)


```
At C:\Users\mohd. Shoaib\AppData\Local\atom\app-1.40.1\resources\electron.asar\renderer\api\remote.js:219

Error: Cannot call function 'getPosition' on missing remote object 241
Error: Cannot call function 'getPosition' on missing remote object 241
    at throwRPCError (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/rpc-server.js:145:17)
    at EventEmitter.<anonymous> (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/rpc-server.js:367:7)
    at EventEmitter.emit (events.js:182:13)
    at WebContents.<anonymous> (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/browser/api/web-contents.js:294:13)
    at WebContents.emit (events.js:182:13)

    at metaToException (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:271:17)
    at Object.exception (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:219:30)
    at metaToValue (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:223:28)
    at Object.remoteMemberFunction (~/AppData/Local/atom/app-1.40.1/resources/electron.asar/renderer/api/remote.js:123:16)
    at AtomEnvironment.getWindowDimensions (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:1:731570)
    at AtomEnvironment.storeWindowDimensions (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:1:731985)
    at WindowEventHandler.handleWindowBlur (~/AppData/Local/atom/app-1.40.1/resources/app/static/<embedded>:11:285354)
```

### Commands

```
  4x -3:27.4.0 core:move-left (input.hidden-input)
  4x -3:25.2.0 core:backspace (input.hidden-input)
  3x -3:08.3.0 core:move-right (input.hidden-input)
  2x -3:07.6.0 core:backspace (input.hidden-input)
     -3:07.2.0 core:delete (input.hidden-input)
  2x -2:46 core:move-left (input.hidden-input)
  2x -2:44.6.0 core:move-right (input.hidden-input)
     -2:43.8.0 core:move-down (input.hidden-input)
 20x -2:43.4.0 core:move-right (input.hidden-input)
  2x -2:39.6.0 core:move-left (input.hidden-input)
     -2:39.2.0 core:move-up (input.hidden-input)
  2x -2:39.1.0 core:move-left (input.hidden-input)
     -2:29.9.0 find-and-replace:select-next (input.hidden-input)
     -2:28 core:save (input.hidden-input)
  2x -1:29.9.0 editor:newline (input.hidden-input)
     -0:33.1.0 core:paste (input.hidden-input)
```

### Non-Core Packages

```
atom-live-server 2.3.0 
city-lights-ui 1.5.3 
emmet 2.4.3 
file-icons 2.1.31 
pigments 0.40.2 
script 3.18.1 
```

"
Scroll past end option won't go out,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

I turned on the option to Scroll past the end of my files and now it won't go off.
I even reinstalled atom from scratch and the issue was still there.

### Versions

Atom    : 1.40.1
Electron: 3.1.10
Chrome  : 66.0.3359.181
Node    : 10.2.0

Windows 10"
Undo/redo leaks memory,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

<!-- Description of the issue -->

When using the editor over longer periods of time (like over the duration of a few days), doing various undoable actions, I'll sometimes build up upwards of 1GB of memory used, almost always related to undo/redo. This occurs even when all I'm doing is dealing with Markdown files. I have no community package that affects autocomplete or anything related besides syntax highlighting in Markdown files.

Killing ""Atom Helper"" to kill the window process and then restarting that process fixes the memory leak.

<details>
<summary>Here's a list of packages I have enabled:</summary>

- atom-beautify@0.33.4
- auto-detect-indentation@1.3.0
- autocomplete-paths@2.12.2
- autocomplete-racer@0.1.3
- build-cargo@2.0.0
- busy-signal@2.0.1
- color-picker@2.3.0
- docblockr@0.13.7
- editorconfig@2.5.0
- file-icons@2.1.35
- git-plus@8.7.1
- intentions@1.1.5
- language-babel@2.85.0
- language-batch@0.4.0
- language-elixir@0.22.1
- language-erlang@3.2.0
- language-haskell@1.19.1
- language-kotlin@0.5.0
- language-livescript@0.0.3
- language-lua@0.9.11
- language-ocaml@1.9.5
- language-pegjs@0.5.0
- language-pug@0.0.22
- language-rust@0.4.12
- language-scala@1.1.10
- language-stylus@0.2.0
- language-vue@0.25.0
- language-webassembly@1.0.1
- language-x86-64-assembly@2.2.11
- linter@2.3.1
- linter-eslint@8.5.5
- linter-shellcheck@1.6.0
- linter-tslint@1.10.28
- linter-ui-default@1.8.0
- minimap@4.29.9
- minimap-cursorline@0.2.0
- minimap-git-diff@4.3.1
- minimap-linter@2.2.1
- project-manager@3.3.7
- sort-lines@0.19.0
- sync-settings@0.8.6

As you can see, none of these should affect Markdown. I've already disabled most of the worst offenders.
</details>

In a prior version (1.36 IIRC), I've verified this in safe mode, and the symptom has persisted ever since.

### Steps to Reproduce

1. Open a file, even a text file
2. Make thousands of edits to it, optionally saving.
3. Close the file.

It takes long enough it's not a quick repro. It's also why I haven't repro'd it in safe mode recently - I *really* don't feel like spending well over a day in safe mode just waiting on it to build up.

**Expected behavior:**

<!-- What you expect to happen -->
Memory usage to remain reasonable.

**Actual behavior:**

<!-- What actually happens -->
Memory usage grows up to 500MB-1GB range, and doesn't release on close.

**Reproduces how often:**

<!-- What percentage of the time does it reproduce? -->
100% of the time for me. I literally have been keeping Activity Monitor up just to periodically kill it to reclaim the memory leaked.

### Versions

<!-- You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running. -->

```
$ atom --version
Atom    : 1.40.1
Electron: 3.1.10
Chrome  : 66.0.3359.181
Node    : 10.2.0

$ apm --version
apm  2.4.3
npm  6.2.0
node 10.2.1 x64
atom 1.40.1
python 2.7.10
git 2.17.2
```

I've reproduced this in safe mode around 1.36, although I haven't tried since.

My OS is macOS High Sierra 10.13.6, 64-bit.

### Additional Information

<!-- Any additional information, configuration or data that might be necessary to reproduce the issue. -->

Recently, I've been suffering OS crashes and performance issues, likely due to something Chromium-related, but I've not had the time to debug that. This has turned my OOM crashes of Atom to OOM kernel panics, but the basic symptom is the same. I know it's likely separate since opening a new second window freezes my machine 50% of the time, 90% if I have a second browser window open. Also, startup time has become absolutely atrocious now, in the 2-3 minute range for just the limited set of plugins I've listed above. But I do feel this has *some* limited relevance to this bug, hence why I listed it."
Unable to install packages with a postinstall script with apm,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * ~~Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>~~ (not applicable)
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/> (`apm install --check` -> `Checking for native build tools ✓`)
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * ~~Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>~~ (not applicable)

### Description

Installing a package like `hydrogen` or `ink` (which both have a postinstall script) with `apm` fails with
```
➜  ~ grep -E ""(warn|error)"" /home/coroa/.atom/.apm/_logs/2019-09-03T08_20_10_064Z-debug.log
2173 warn enoent ENOENT: no such file or directory, open '/tmp/apm-install-dir-11983-23670-1efcohp.qn82/package.json'
2175 warn apm-install-dir-11983-23670-1efcohp.qn82 No description
2176 warn apm-install-dir-11983-23670-1efcohp.qn82 No repository field.
2177 warn apm-install-dir-11983-23670-1efcohp.qn82 No README data
2178 warn apm-install-dir-11983-23670-1efcohp.qn82 No license field.
2186 error code ELIFECYCLE
2187 error errno 134
2188 error ink@0.10.12 postinstall: `node scripts/postinstall.js`
2188 error Exit status 134
2189 error Failed at the ink@0.10.12 postinstall script.
2189 error This is probably not a problem with npm. There is likely additional logging output above.
```

Attached you find the logfile for the run by `apm-beta install ink` after removing `~/.atom` to start from a clean slate: 
[2019-09-03T08_20_10_064Z-debug.log](https://github.com/atom/atom/files/3568558/2019-09-03T08_20_10_064Z-debug.log)

I am at a loss on how to proceed? Any pointers on how to debug this further?

### Versions

Same behaviour on latest stable (1.41.0) and beta (1.14.0-beta1) Debian packages (running on a Debian sid).

```shell
➜  ~ apm-beta --version
apm  2.4.3
npm  6.2.0
node 10.2.1 x64
atom 1.41.0-beta1
python 2.7.16+
git 2.23.0
```
"
Atom 1.40.1 starts infinite copies of itself (fork bomb!),"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

When I restarted atom today (I think it was just upgraded?) It started to create infinite copies of itself stacked on top of each other to the point my computer was unusable. I'd restart my computer and atom would do the same thing. Finally I was able to ssh into my own computer and remove the atom package so it couldn't start and from there I was able to experiment a bit. I tried starting it with `--clear-window-state` and with `--safe`, but I saw the same fork-bomb behavior.

Finally, I moved my `~/.atom` dir to `~/.atom-backup` and then atom was able to start successfully. I copied the `packages` dir back to the new `~/.atom` and started fresh. I still have a copy of that backup dir in case it would be helpful to reproduce the bug.



### Steps to Reproduce

1. Upgrade to atom 1.40.1
2. (re)Start atom
3. Be ready to `killall atom` a few times!

**Expected behavior:**

Atom should not fork-bomb

**Actual behavior:**

Atom fork-bombs

**Reproduces how often:**

100%

### Versions

<!-- You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running. -->
```
$ atom --version
Atom    : 1.40.1
Electron: 3.1.10
Chrome  : 66.0.3359.181
Node    : 10.2.0
$ apm --version
apm  2.4.3
npm  6.2.0
node 10.2.1 x64
atom 1.40.1
python 2.7.12
git 2.7.4
$ lsb_release -a
LSB Version:	core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-noarch:printing-9.20160110ubuntu0.2-amd64:printing-9.20160110ubuntu0.2-noarch:security-9.20160110ubuntu0.2-amd64:security-9.20160110ubuntu0.2-noarch
Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.5 LTS
Release:	16.04
Codename:	xenial
```

### Additional Information

<!-- Any additional information, configuration or data that might be necessary to reproduce the issue. -->
"
Atom eats up nearly all the RAM before releasing it some minutes later,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

I noticed that, in some cases (see ""Steps to reproduce""), Atom uses a lot of RAM and makes other processes nearly crashing. After a couple minutes, RAM is being freed and everything goes back to normal.

### Steps to Reproduce

1. Open editor
2. Add more than one file at a time (practical example: an Atom package I'm working on allowing to restore a saved tabs session, 10 files loaded)
OR

2. Add a file greater than 10MB (practical example: the performance profile I took out of the problem) 

**Expected behavior:**

Atom loads the file in not more than 2 minutes, with a normal use of the RAM equivalent to the loaded file(s) size, or at least a little more

**Actual behavior:**

Atom takes a lot of time to load (more than 5 minutes), fills progressively the RAM almost entirely, causing all the other processes to nearly crash and the whole system to hang during this time, then releases it all of a sudden and stabilize.

**Reproduces how often:**

Happens everytime the steps to reproduce are applied.

### Versions

Atom    : 1.40.1
Electron: 3.1.10
Chrome  : 66.0.3359.181
Node    : 10.2.0
OS: Windows 7 Family Edition Premium (64 bits)
Relevant specs: 8GB RAM __DDR3 (from memory)__, Intel Pentium G2020 CPU

### Additional Information

Syntactical coloration might be the reason of the lack of performance, but I don't think it's what trigger the sudden filling of RAM.
I can eventually provide a profiling of what happens in the first case.
"
Error when installing Godot code support,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

I can not install the package lang-gdscript.

**Error message:**
```
> tree-sitter-gdscript@0.2.3 install /tmp/apm-install-dir-119725-15300-wyjp48.qkzu/node_modules/lang-gdscript/node_modules/tree-sitter-gdscript
> prebuild-install || node-gyp rebuild


prebuild-install WARN install No prebuilt binaries found (target=3.1.10 runtime=electron arch=x64 libc= platform=linux)
Aborted (core dumped)
Aborted (core dumped)
gyp: Call to 'node -e ""require('nan')""' returned exit status 134 while in binding.gyp. while trying to load binding.gyp
gyp ERR! configure error 
gyp ERR! stack Error: `gyp` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onCpExit (/usr/share/atom/resources/app/apm/node_modules/npm/node_modules/node-gyp/lib/configure.js:345:16)
gyp ERR! stack     at ChildProcess.emit (events.js:182:13)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:237:12)
gyp ERR! System Linux 5.0.0-25-generic
gyp ERR! command ""/usr/share/atom/resources/app/apm/bin/node"" ""/usr/share/atom/resources/app/apm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /tmp/apm-install-dir-119725-15300-wyjp48.qkzu/node_modules/lang-gdscript/node_modules/tree-sitter-gdscript
gyp ERR! node -v v10.2.1
gyp ERR! node-gyp -v v3.7.0
gyp ERR! not ok 
Aborted (core dumped)
npm WARN enoent ENOENT: no such file or directory, open '/tmp/apm-install-dir-119725-15300-wyjp48.qkzu/package.json'
npm WARN apm-install-dir-119725-15300-wyjp48.qkzu No description
npm WARN apm-install-dir-119725-15300-wyjp48.qkzu No repository field.
npm WARN apm-install-dir-119725-15300-wyjp48.qkzu No README data
npm WARN apm-install-dir-119725-15300-wyjp48.qkzu No license field.

npm ERR! code ELIFECYCLE
npm ERR! errno 134
npm ERR! tree-sitter-gdscript@0.2.3 install: `prebuild-install || node-gyp rebuild`
npm ERR! Exit status 134
npm ERR! 
npm ERR! Failed at the tree-sitter-gdscript@0.2.3 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/<user>/.atom/.apm/_logs/2019-08-25T16_39_35_655Z-debug.log
```

### Steps to Reproduce:
- Clicked install in lang-gdscript extension.

**Expected behavior:**
Sucessful install.
<!-- What you expect to happen -->

**Actual behavior:**
Error (not installing).
"
Issue Using Keyboard Macros,"I use iCUE software to create keyboard macros related to working to LaTeX in atom and have had an issue with a macro (using the prnt screen key) that produces the following:

_\begin{itemize}
    \item
\end{itemize}_

The macro works fine in every programming, however in atom the output of the macro changes at random. Here is a gif that shows the issue when I press the macro key (you can see it works the first two times but not the next two):

![Atom Issue (0)](https://user-images.githubusercontent.com/40768692/62695678-25f15600-ba1a-11e9-905d-579e618717c1.gif)

"
Atom transpile option ignores node_modules,"### Description

It seems atom transpiles dependencies of the packages (code in `node_modules`) even if they are not used. However, atom transpile option explicitly [ignores `node_modules`](https://github.com/atom/atom/blob/1d9a4cafcf6cc288d675512db8fd984e13aab869/src/package-transpilation-registry.js#L99-L100).

In my case I have a dependency containing typescript code which is not properly transpiled due to a broken built-in typescript transpiler and I can't use `atom-ts-transpiler` either since it's not applied to `node_modules`, so I end up with 

```
Error: ENOENT, node_modules/typescript/bin/lib.d.ts not found in /Applications/Atom.app/Contents/Resources/app.asar
    at notFoundError (ELECTRON_ASAR.js:108:19)
    at Object.fs.readFileSync (ELECTRON_ASAR.js:571:9)
    at TypeScriptSimple.createService (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/typescript-simple/index.js:56:61)
    at TypeScriptSimple.compile (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/typescript-simple/index.js:45:37)
    at Object.e.compile (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:577328)
    at Object.compile (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:573106)
    at compileFileAtPath (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:148526)
    at Object.value [as .ts] (/Applications/Atom.app/Contents/Resources/app/static/<embedded>:11:150924)
    at Module.load (internal/modules/cjs/loader.js:620:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:559:12)
    at Function.Module._load (internal/modules/cjs/loader.js:551:3)
    at Module.require (file:///Applications/Atom.app/Contents/Resources/app.asar/static/index.js:71:46)
. . .
```
 

### Steps to Reproduce

1. Setup a package with `atomTranspilers` option set to `atom-ts-transpiler`
2. Have a dependency containing a `.ts` file
3. Try to load the package in atom

**Expected behavior:**

- Respect `atomTranspilers` glob pattern and use it to transpile even the code in `node_modules`;
- Don't transpile the code in `node_modules` at all;

**Actual behavior:**

Transpilation error due to a broken built-in typescript transpiler.

**Reproduces how often:**

100%

### Versions

```
Atom    : 1.39.1
Electron: 3.1.10
Chrome  : 66.0.3359.181
Node    : 10.2.0
```"
Horizontal scroll margin,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

<!-- Description of the issue -->
I've been hacking the Atom Core in Dev Mode to find out why setting the `horizontalScrollMargin` to 1 does not prevent this from happening:

![horizontal](https://user-images.githubusercontent.com/17730345/61051241-e1f23d80-a3e8-11e9-8e2b-e0a41da476ed.gif)

I don't want any horizontal scroll in this case.

The `horizontalScrollMargin` can be found here:

https://github.com/atom/atom/blob/8378b5116af606a97c59663226da430af6206414/src/text-editor.js#L176

It does not help setting this to 1.

I found that the `autoscrollHorizontally` function takes the `gutterContainerWidth` into account when setting the right side autoscroll:

https://github.com/atom/atom/blob/8378b5116af606a97c59663226da430af6206414/src/text-editor-component.js#L2080

So when calculating the `desiredScrollRight`, both the gutter width and horizontal scroll margin is taken into account. This means that the default `horizontalScrollMargin: 6` and the `gutterWidthContainer` (which seems to be 9 in my case) adds up to a horizontal scroll margin of 15.

If I remove the `gutterContainerWidth` from the above line, the `horizontalScrollMargin` works as expected.

Could someone explain why the `gutterContainerWidth` is taken into account when calculating the right side horizontal scroll margin?

### Steps to Reproduce

1. Set `horizontalScrollMargin: 1`
2. Add same code as in gif
3. Go right with cursor until it scrolls horizontally (too soon)

**Expected behavior:**

<!-- What you expect to happen -->
I expect the `horizontalScrollMargin` to work as `verticalScrollMargin` (which works as expected). 

If I set the `horizontalScrollMargin` to 1, I don't want any horizontal scroll until the right margin is < 1. 
**Actual behavior:**

<!-- What actually happens -->
It scrolls horizontally (right) too soon, because the `gutterContainerWidth` is taken into account when calculating the right side horizontal scroll margin.

**Reproduces how often:**
100%
<!-- What percentage of the time does it reproduce? -->

### Versions
apm  2.1.7
npm  6.2.0
node 8.9.3 x64
atom 1.38.2
python 2.7.16
git 2.15.0
<!-- You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running. -->

### Additional Information

<!-- Any additional information, configuration or data that might be necessary to reproduce the issue. -->
"
Vietnamese language display error with some specific chars.,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

A few Vietnamese chars have display issues although the font has support Vietnamese.

### Steps to Reproduce

1. Open `atom`
2. New file
3. Type or paste: `ế, ề, ể, ồ, ể, ề, ở, ...` and type `è é, ẽ, ư, ô, ê, ừ, ứ, ...` to compare.

<img width=""504"" alt=""Screen Shot 2019-07-07 at 7 23 39 AM"" src=""https://user-images.githubusercontent.com/12815768/60762357-2f3c7b00-a088-11e9-8ce6-089d3cea1685.png"">


**Expected behavior:**

Show normally

**Actual behavior:**

Text displayed as font errors.

**Reproduces how often:**

Always.

### Versions

```
Atom    : 1.38.2
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3
```

### Additional Information

Nothing.
"
Is there some reason the MSI was removed between May'19 and Jul'19? We use it!,"## Summary

I last obtained a version of AtomSetup-x64.msi around May 24, 2019, based on the timestamp of the installer in my S3 bucket used for product installs. I recently went to update this and noticed the MSI no longer seems to exist. I searched older release assets and it seems to have been removed for every one I looked at going back months. We prefer this format - is there some reason this has been removed? Do you have a workaround for non-interactive installs?

## Motivation

We create infrastructure in AWS using CloudFormation. When creating instances, we use the AWS-native cfn-init program within CloudFormation templates to configure instances, including Windows. We want to pre-install Atom on our Windows Bastion hosts, as CloudAdmins need to first get to a bastion before they can reach internal resources in our Production environment as we must conform to FedRAMP standards. The cfn-init method has a package installer that can install an MSI, which we're using to do this. If you're taking away the MSI, which is installed non-interactively, not sure how we can install the EXE as a replacement. First, it does not have the same native package format support, and next, I think the EXE may require interactive feedback.
"
Settings -> Install page fails to open,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

Install does not work when on fresh install under WSL/Ubuntu/VcXsrv/LXDE

### Steps to Reproduce

1. Install Atom under WSL/Ubuntu/VcXsrv/LXDE environment

<!-- What you expect to happen -->

Can navigate to Install page of settings


<!-- What actually happens -->

Cannot navigate to install page of settings, error thrown

<!-- What percentage of the time does it reproduce? -->
100% of the time

### Versions

**Atom**: 1.26.1 x64
**Electron**: 1.7.11
**OS**: Ubuntu 18.04.2
**Thrown From**: Atom Core

### Additional Information


Error: 

Given:
1.Run WSL (Windows Serving Linux) with Ubuntu using VcXsrv (portable version)
3. Run LXDE
4. Fresh Install of Atom
5. Go to Settings
6. Click Install
Expected:
Package install page appears
Actual:
Error flashes, and install page is not navigated to.


### Stack Trace

Uncaught TypeError: undefined is not a function

```
At /opt/atom/resources/app/node_modules/settings-view/lib/install-panel.js:385

TypeError: undefined is not a function
    at InstallPanel.addPackageViews (/opt/atom/resources/app/node_modules/settings-view/lib/install-panel.js:385:30)
    at /opt/atom/resources/app/node_modules/settings-view/lib/install-panel.js:456:26
    at /opt/atom/resources/app/node_modules/settings-view/lib/atom-io-client.js:68:26
    at AtomIoClient.module.exports.AtomIoClient.fetchFromCache (/opt/atom/resources/app/node_modules/settings-view/lib/atom-io-client.js:159:22)
    at AtomIoClient.module.exports.AtomIoClient.featuredPackages (/opt/atom/resources/app/node_modules/settings-view/lib/atom-io-client.js:65:25)
    at InstallPanel.loadFeaturedPackages (/opt/atom/resources/app/node_modules/settings-view/lib/install-panel.js:450:27)
    at new InstallPanel (/opt/atom/resources/app/node_modules/settings-view/lib/install-panel.js:124:16)
    at /opt/atom/resources/app/node_modules/settings-view/lib/settings-view.js:247:22
    at SettingsView.getOrCreatePanel (/opt/atom/resources/app/node_modules/settings-view/lib/settings-view.js:371:25)
    at SettingsView.showPanel (/opt/atom/resources/app/node_modules/settings-view/lib/settings-view.js:429:30)
    at HTMLDivElement.clickHandler (/opt/atom/resources/app/node_modules/settings-view/lib/settings-view.js:190:24)
```

### Commands
Click +INSTALL in the settings menu

### Non-Core Packages

None


"
Create issue button not working: ERR_INSECURE_RESPONSE,"### Prerequisites

* [X ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

""Create issue on atom/atom"" button does not work

### Steps to Reproduce

1. Produce an error, e.g. (atom/tree-view#1282):
  1a. create a file with a comma in its name
  1b. drag it in the tree view to a different folder
2. In the dialog that opens, click ""Create issue on atom/atom"" 

No browser window is opened. Console (ctrl+shift+i) shows two new errors:
```
POST https://is.gd/create.php?format=simple net::ERR_INSECURE_RESPONSE
```
and
```
Uncaught (in promise) TypeError: Error processing argument at index 0, conversion failure from null
    at C:\Users\sternlab\AppData\Local\atom\app-1.38.2\resources\app\static\<embedded>:11:905732
    at <anonymous>
```

**Reproduces how often:**

Always

### Versions

Atom    : 1.38.2
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3
Windows 10
"
Fail to generate an Atom build in Ubuntu 19.04 64bit,"I have created a new fork of the repository for Atom 1.40.0-dev. Following these [instructions](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-linux) for generating an Atom build, I have run “script/bootstrap” in order to install all required dependencies.

When trying to generate the Atom build using a Linux 19.04 64bit enabled computer by executing the “script/build”, I am getting an error message in the terminal when the building process stops. The error message is the following:

```
Node:	v10.16.0
Npm:	v6.2.0
Installing script dependencies
Installing apm
apm  2.3.1
npm  6.2.0
node 10.2.1 x64
atom unknown
python 2.7.16
git 2.20.1
Installing modules ✓
Wrote Dependencies Fingerprint: /home/dev-xr/gitprojects/atom/node_modules/.dependencies-fingerprint cbfce05d767b0c926487b711109ed54461b24ed0
Cleaning /home/dev-xr/gitprojects/atom/out
Copying assets to /home/dev-xr/gitprojects/atom/out/app
Transpiling packages with custom transpiler configurations in /home/dev-xr/gitprojects/atom/out/app
 transpiling for package github
Installing modules ✗
> superstring@2.3.6 install /home/dev-xr/gitprojects/atom/node_modules/github/node_modules/superstring
> node-gyp rebuild


Aborted (core dumped)
gyp: Call to 'node -e ""require('nan')""' returned exit status 134 while in binding.gyp. while trying to load binding.gyp
gyp ERR! configure error
gyp ERR! stack Error: `gyp` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onCpExit (/home/dev-xr/gitprojects/atom/apm/node_modules/atom-package-manager/node_modules/npm/node_modules/node-gyp/lib/configure.js:345:16)
gyp ERR! stack     at ChildProcess.emit (events.js:182:13)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:237:12)
gyp ERR! System Linux 5.0.0-17-generic
gyp ERR! command ""/home/dev-xr/gitprojects/atom/apm/node_modules/atom-package-manager/bin/node"" ""/home/dev-xr/gitprojects/atom/apm/node_modules/atom-package-manager/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /home/dev-xr/gitprojects/atom/node_modules/github/node_modules/superstring
gyp ERR! node -v v10.2.1
gyp ERR! node-gyp -v v3.7.0
gyp ERR! not ok
Aborted (core dumped)
npm ERR! code ELIFECYCLE
npm ERR! errno 134
npm ERR! superstring@2.3.6 install: `node-gyp rebuild`
npm ERR! Exit status 134
npm ERR!
npm ERR! Failed at the superstring@2.3.6 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/dev-xr/.atom/.apm/_logs/2019-06-18T20_30_29_748Z-debug.log
child_process.js:650
    throw err;
    ^

Error: Command failed: /home/dev-xr/gitprojects/atom/apm/node_modules/atom-package-manager/bin/apm install
  at checkExecSyncError (child_process.js:629:11)
  at Object.execFileSync (child_process.js:647:13)
  at module.exports (/home/dev-xr/gitprojects/atom/script/lib/run-apm-install.js:14:16)
  at module.exports (/home/dev-xr/gitprojects/atom/script/lib/transpile-packages-with-custom-transpiler-paths.js:44:7)
  at Object.<anonymous> (/home/dev-xr/gitprojects/atom/script/build:74:3)
  at Module._compile (internal/modules/cjs/loader.js:776:30)
  at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
  at Module.load (internal/modules/cjs/loader.js:653:32)
  at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
  at Function.Module._load (internal/modules/cjs/loader.js:585:3)
  at Function.Module.runMain (internal/modules/cjs/loader.js:829:12)
  at startup (internal/bootstrap/node.js:283:19)
  at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)
```
I have been doing research about this issue and found this issue [#15203](https://github.com/atom/atom/issues/15203), where a very similar problem is described.

The issue got comments suggesting that the clang-3.3 package should be installed in order to fix the issue, nevertheless, because of the Ubuntu version I am using didn’t allow me to install that clang version so I had to install the clang-8.0 package. The clang package version (8.0)  was updated in the .travis.yml file in the local Atom project.

The build generation process was run again with the above-mentioned changes applied, but the error persists.

Alternatively, before running the building process I manually, and separately, installed the nodejs *superstring* package, which is described in the previously shared error message I got. For this, I executed `npm install superstring@2.3.6`. I did this in order to define if the dependency installed separately works when running the building process. But the results were also unsuccessful.

Would anyone have experienced a problem similar to this and has suggestions on how to solve it?
"
TextMate Grammar scope specifications with multiple scopes is incorrectly handled,"### Prerequisites

* [ ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If a TextMate grammar scope specifier (`name` or `contentName`) specifies multiple scopes, they are not correctly handled, and thus highlighting fails.

![image](https://user-images.githubusercontent.com/26179051/58852662-09712000-865d-11e9-9920-6fba209631ad.png)

The above image shows a region which should have 6 scopes, but three of them are specified on a single specification, and so they appear as a single scope.

In addition to highlighting failing, automated tests using `atom-grammar-test` also fail.

The scope specifier in the grammar file is just the list of scopes separated with spaces.

I know VSCode-TextMate explicitly accepts this, as I have seen the code that makes sure to break up the specification list at the spaces, and so my grammar file works correctly in VS Code.  I am certain I saw this in another textmate grammar file, and given enough time I will find it.

(VS Code, same grammar file)
![image](https://user-images.githubusercontent.com/26179051/58853078-9c5e8a00-865e-11e9-986d-f7bfd8d050e5.png)

I'll get a link posted to the grammar file in question, if its needed.  These specific changes are not yet posted online.

(snippet of one repository item)
```CSON
	interpolation:
		begin: ""(\\$)(\\()""
		beginCaptures:
			""1"":
				name: ""keyword.other.substatement.powershell punctuation.definition.substatement.powershell punctuation.section.embedded.substatement.begin.powershell""
			""2"":
				name: ""punctuation.section.group.begin.powershell punctuation.section.embedded.substatement.begin.powershell""
		contentName: ""interpolated.complex.source.powershell""
		end: ""\\)""
		endCaptures:
			""0"":
				name: ""punctuation.section.group.end.powershell punctuation.section.embedded.substatement.end.powershell""
		name: ""meta.embedded.substatement.powershell""
		patterns: [
			{
				include: ""$self""
			}
		]
```

The purpose of these multiple scopes to that there are alternate ideas as to how the content should be scoped and themed, and this is the best to support them all.  The last scope in the specification would have the highest priority if the theme has a selection for it.

### Versions

Atom    : 1.37.0
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3

Windows 10 1903 18908
"
We should reuse the electron-link cache between builds on Azure DevOps,"When building Atom, we [generate a v8 startup snapshot](https://github.com/atom/atom/blob/1edf94a24032a8a0e555c3db7aa7de01e5b00633/script/lib/generate-startup-snapshot.js) by transforming every source file in the code base and concatenating them all into one giant `startup.js` script. I don't have exact timings, but this takes a decent percentage of the 10 minutes we spend on the `Build Atom` step of every build on every platform.

The `electron-link` tool includes a caching facility, which skips transformation of any file that hasn't changed. If we could take advantage of that on Azure Pipelines, we'd save a significant chunk of time on every build.

@jasonrudolph co-authored this issue.

cc @daviwil "
Atom environment accessible from the main process,"Turns out that the main process has access to the `atom` global variable and there are some usages of it across the codebase (which are unreliable since the environment available in the main process has the state of the snapshot).

List of identified usages:

* `path-watcher.js`
  * https://github.com/atom/atom/blob/master/src/path-watcher.js#L185
  * https://github.com/atom/atom/blob/master/src/path-watcher.js#L223
  * https://github.com/atom/atom/blob/master/src/path-watcher.js#L232
  * https://github.com/atom/atom/blob/master/src/path-watcher.js#L547-L548
* `atom-application.js`
  * https://github.com/atom/atom/blob/master/src/main-process/atom-application.js#L33
  * https://github.com/atom/atom/blob/master/src/main-process/atom-application.js#L37

As [discussed in Slack](https://github.slack.com/archives/G2LCNPXBP/p1557406371287600), we should remove all usages of the `atom` global object from the main renderer, and then remove that global object from it in order to avoid relying on it in the future.

To find all potential usage, we can add a big warning every time the `atom` object is accessed by creating some kind of interceptor at the startup of the main process:

```js
const originalAtom = global.atom

Object.defineProperty(global, 'atom', {
  get() {
    console.error('Warning! Using the global atom variable from the main process')
    console.trace()
    return originalAtom
  }```"
Opening file causes system to lock for ~10 seconds on Ubuntu 19.04,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following: [snip]

### Description

After upgrading from Ubuntu 18.10 to 19.04, certain simple operations in Atom cause the system to lock/hang for up to 10 seconds.

### Steps to Reproduce

1. Open `atom-beta --safe`.
2. Open a small text file (Ctrl+O).

**Expected behavior:** The file opens more or less instantly and is available for editing. This was the behaviour under Ubuntu 18.10.

**Actual behavior:**
- Keyboard input locks and the screen (including other visible windows) freezes for about 10 seconds. 
- The mouse cursor is movable if under the default Ubuntu `gdm3` session; or also locks if under the Ubuntu Wayland session.
- `gnome-shell` CPU usage (from `top` or `htop`) spikes to 100% and settles back to a low value after the screen unfreezes.
- The lock is usually long enough that Ubuntu/Gnome/apport offers to kill Atom after the screen unfreezes.

**Reproduces how often:** 100%

### Versions

```
$ atom-beta --version
Atom    : 1.37.0-beta1
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3
$ apm-beta --version
apm  2.1.7
npm  6.2.0
node 8.9.3 x64
atom 1.37.0-beta1
python 2.7.16
git 2.20.1
$ lsb_release -rd
Description:    Ubuntu 19.04
Release:        19.04
$ apt-cache policy atom-beta | head -n11
atom-beta:
  Installed: 1.37.0-beta1
  Candidate: 1.37.0-beta1
  Version table:
 *** 1.37.0-beta1 500
        500 https://packagecloud.io/AtomEditor/atom/any any/main amd64 Packages
        100 /var/lib/dpkg/status
     1.37.0-beta0 500
        500 https://packagecloud.io/AtomEditor/atom/any any/main amd64 Packages
     1.36.0-beta2 500
        500 https://packagecloud.io/AtomEditor/atom/any any/main amd64 Packages
```

### Additional Information

- See [this Ubuntu bug](https://bugs.launchpad.net/ubuntu/+source/gnome-shell/+bug/1826219) for further description.
- Saving a file causes a similar lock, though much shorter (~1 second).
- Google Chrome seems to cause similar locks (though much shorter in duration: ≤1 second, and not as repeatable), which maybe points to something underlying Electron/Chromium?"
Support Semantic Highlighting on Tree-Sitter Grammars,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

---

Keep in mind that Atom is highly customizable in a number of ways and we strongly prefer that you consider these options before filing this issue:

* https://flight-manual.atom.io/using-atom/sections/basic-customization/: tweak Atom's configuration, styles, and keybindings.
* https://flight-manual.atom.io/using-atom/sections/atom-packages/: install a community package.
* https://flight-manual.atom.io/hacking-atom/: use the Atom API in your init script, to create a package, or to enhance an existing package.

If you're convinced that none of these options are appropriate for the feature you want, please explain why that's the case by completely filling out the issue template below.

Also note that the Atom team has finite resources so it's unlikely that we'll work on feature requests. If we're interested in a particular feature however, we'll follow up and ask you to submit an RFC to talk about it in more detail.

-->

## Summary

Please make token text available to Tree-Sitter grammars when requesting scope information, and possibly create a way to return different scopes for each lexical token.

## Motivation

The current implementation of [semanticolor](https://atom.io/packages/semanticolor) doesn't work with Tree-Sitter grammars. I'd like to be able to take advantage of Tree-Sitter, but this requires the grammar to be aware of the text a scope is being requested for, and to be able to return separate scopes for each lexical token in a scope.

## Describe alternatives you've considered

By changing `tree-sitter-language-mode.js` line 1060 from this:

```
return this.languageLayer.languageMode.grammar.idForScope(scopeName)
```

to this:

```
return this.languageLayer.languageMode.grammar.idForScope(scopeName, this.treeCursor.nodeText)
```

I was able to produce somewhat reasonable results, but this doesn't give me a way to assign different scopes to each lexical token, so the results aren't perfect:

![example](https://raw.githubusercontent.com/digitallyserviced/semanticolor/master/tree-sitter.png)"
Do Atom can link to custom mixin details ?,"## Summary

Mixin details link to.

## Motivation

In purpose to switch from netbeans.

## Describe alternatives you've considered

As Netbeans does, do Atom can link to custom mixin details on click on it ? If yes, how to that (ctl + click don't) ?

Thanks"
"""Fetching outdated packages and themes failed"" console error when starting Atom","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

![图片](https://user-images.githubusercontent.com/8848263/55445846-cc9e9380-55ef-11e9-88f6-6f8b9bb143cb.png)


### Steps to Reproduce

> Open atom and it appears

**Expected behavior:** [What you expect to happen]

> Don't complain

**Actual behavior:** [What actually happens]

> The console reported an error

**Reproduces how often:** [What percentage of the time does it reproduce?]

> 100% 
> - Even though I used `atom --safe`

### Versions

![图片](https://user-images.githubusercontent.com/8848263/55445929-3028c100-55f0-11e9-84c5-eec06f64688a.png)

### Additional Information

```shell
├── atom-beautify@0.33.4
├── atom-ide-datatip@0.9.4
├── atom-ide-definitions@0.2.0
├── atom-ide-markdown-service@1.1.1
├── atom-ide-signature-help@0.4.5
├── atom-material-syntax@1.0.8
├── atom-ternjs@0.19.1
├── autoprefixer@3.7.1
├── busy-signal@2.0.1
├── color-picker@2.3.0
├── docblockr@0.13.7
├── emmet@2.4.3
├── ex-mode@0.18.0
├── file-header@1.13.9
├── file-icons@2.1.31
├── git-time-machine@2.1.0
├── highlight-selected@0.16.0
├── ide-php@0.7.18
├── intentions@1.1.5
├── language-apache@1.8.0
├── language-ini@1.20.0
├── language-nginx@0.8.0
├── linter@2.3.0
├── linter-jshint@3.1.15
├── linter-ui-default@1.7.1
├── markdown-preview-enhanced@0.15.10 (disabled)
├── merge-conflicts@1.4.5
├── minimap@4.29.9
├── minimap-bookmarks@0.4.2
├── minimap-cursorline@0.2.0
├── minimap-git-diff@4.3.1
├── minimap-linter@2.2.1
├── minimap-quick-highlight@1.0.1
├── minimap-selection@4.5.0
├── minimap-split-diff@0.3.7
├── open-in-browser@0.5.2
├── pigments@0.40.2
├── platformio-ide-terminal@2.9.1
├── project-manager@3.3.6
├── quick-highlight@0.13.0
├── relative-numbers@0.9.0
├── remote-ftp@2.2.2
├── split-diff@1.6.0
├── sync-settings@0.8.6
├── todo-show@2.3.2
├── tree-view-git-status@1.5.2
└── vim-mode-plus@1.36.0
```"
Invisible window when Atom starts on Elementary OS,"### Description

I've taken invisible window when Atom starts, this behavior occurs when the Atom has closed in maximized window mode.

### Steps to Reproduce

1. Open Atom normally
2. Put in maximized window mode
3. Close the Atom
4. Re-open the Atom

**Expected behavior:**
Expected the Atom's window displayed.

**Actual behavior:**
Atom's window don't displays.

To get the window back, I click on top-left of desktop (bellow ""Application menu"") and drag to some direction to unmaximize the window.

### Versions
**Atom version**
```
Atom    : 1.35.1
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3
```

**OS version**
```
Distributor ID:	elementary
Description:	elementary OS 5.0 Juno
Release:	5.0
Codename:	juno
Linux 4.15.0-46-generic #49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```

### Additional Information
**My partial solucion**
To prevent maximized window during Atom loading, I put this snippet of code in `init.coffee`  file:
```coffeescript
if atom.applicationDelegate.isWindowMaximized()
    atom.applicationDelegate.unmaximizeWindow();
```
Sorry for my bad english.
"
#! in package.json breaks package install: npm ERR! path /usr/share/atom/resources/app/apm/node_modules/npm/node_modules/sntp/package.json,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description



### Steps to Reproduce

1. Start Atom
2. Select Edit > Preferences > + Install
3. Search for a package, e.g. _ansible_
4. Click desired blue [Install] button on matching package, e.g. _language-ansible_

**Expected behavior:** [What you expect to happen]

Package installs.

**Actual behavior:** [What actually happens]

Pink error box reports, `Installing “language-ansible@0.2.2” failed.Show output…`
Clicking `Show output…` reveals

    npm ERR! path /usr/share/atom/resources/app/apm/node_modules/npm/node_modules/sntp/package.json
    npm ERR! Error parsing /usr/share/atom/resources/app/apm/node_modules/npm/node_modules/sntp/package.json: Unexpected token # in JSON at position 0

    npm ERR! A complete log of this run can be found in:
    npm ERR!     /home/cainesaj/.atom/.apm/_logs/2019-03-18T16_34_52_243Z-debug.log

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%.

### Versions

    $ cat /etc/redhat-release ; atom --version ; atom --safe
    Fedora release 29 (Twenty Nine)
    Atom    : 1.34.0
    Electron: 2.0.16
    Chrome  : 61.0.3163.100
    Node    : 8.9.3

and

    $ cat /etc/lsb-release ; atom --version ; atom --safe
    DISTRIB_ID=Ubuntu
    DISTRIB_RELEASE=18.04
    DISTRIB_CODENAME=bionic
    DISTRIB_DESCRIPTION=""Ubuntu 18.04.2 LTS""
    Atom    : 1.35.1
    Electron: 2.0.18
    Chrome  : 61.0.3163.100
    Node    : 8.9.3


### Additional Information

Removing the first line, `#!/usr/bin/node`, from `/usr/share/atom/resources/app/apm/node_modules/npm/node_modules/sntp/package.json` results in the package installing as expected.

Note that this file is part of the installed atom package and that having a #! on the first line of any interpreted script is always appropriate (though `#!/usr/bin/env node` would be more portable).

    $ rpm -qf /usr/share/atom/resources/app/apm/node_modules/npm/node_modules/sntp/package.json
    atom-1.34.0-2.fc29.x86_64
"
Provide Option to Enable 'darkTheme' Option of BrowserWindow,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Description

This has come up multiple times, but all issues regarding this problem I could find have been locked because of low activity, so I’m opening a new one.
On Linux many GTK themes provide a dark variant of the theme for windows with predominantly dark contents. Electron allows windows to request this dark variant through the ""darkTheme"" option of the BrowserWindow class, but Atom provides no way to set that option for a user.
This is an issue because if title bars are generally light, they stick out like a sore thumb if the user chooses to use a dark UI / syntax theme and are very distracting. In such cases it would be ideal for the user to be able to set an option to have Atom use the dark theme variant.

### Steps to Reproduce

1. Open Atom on a Linux system with a light gtk theme with a dark variant
2. See the light title bar of Atom and be distracted by it
3. Look for an option to set Atom to use the dark theme variant and not find it

**Expected behavior:** Finding an option to have Atom use the dark theme variant, set it and restart Atom, now without a distracting light titlebar.
**Actual behavior:** There's no such option.

**Reproduces how often:** Every time.

### Versions

Atom: 1.34.0
APM: 2.1.3

### Additional Information

Perhaps this could be implemented similiarly to how the custom title bar styles on macOS are handled, i.e. during the initialisation of a BrowserWindow, check the configuration whether the option for 'darkTheme' is set and if it is, set it to `true` in the BrowserWindow options. 

Thank you all for your hard work and for considering this issue."
bootstrap error on centos 6.6: a lot errors and warnings for ../src/parser.c,"Tried to build atom v1.34.0 on centOS v6.6. All the prerequisites have been installed, but when running ""./script/bootstra"", I got a lot of errors and warnings (see below, only very few error and warning lines are copied here). I believe it is a very small issue that caused a lot errors.

Alex.

Stdout:
Node:   v6.11.4
Npm:    v3.10.10
Installing script dependencies
Installing apm
apm  2.1.3
npm  6.2.0
node 8.9.3 x64
atom unknown
python 2.7.11
git 2.18.0
Installing modules ✗

Stderr:
....
gyp verb build/config.gypi writing out config file: /mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c/build/config.gypi
gyp verb config.gypi checking for gypi file: /mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c/config.gypi
gyp verb common.gypi checking for gypi file: /mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c/common.gypi
gyp verb gyp gyp format was not specified; forcing ""make""
gyp info spawn /mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/bin/python-interceptor.sh
gyp info spawn args [ '/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/node_modules/node-gyp/gyp/gyp_main.py',
gyp info spawn args   'binding.gyp',
gyp info spawn args   '-f',
gyp info spawn args   'make',
gyp info spawn args   '-I',
gyp info spawn args   '/mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c/build/config.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/node_modules/node-gyp/addon.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/home/shengxin/.atom/.node-gyp/.node-gyp/iojs-2.0.16/common.gypi',
gyp info spawn args   '-Dlibrary=shared_library',
gyp info spawn args   '-Dvisibility=default',
gyp info spawn args   '-Dnode_root_dir=/home/shengxin/.atom/.node-gyp/.node-gyp/iojs-2.0.16',
gyp info spawn args   '-Dnode_gyp_dir=/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/node_modules/node-gyp',
gyp info spawn args   '-Dnode_lib_file=iojs.lib',
gyp info spawn args   '-Dmodule_root_dir=/mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c',
gyp info spawn args   '--depth=.',
gyp info spawn args   '--no-parallel',
gyp info spawn args   '--generator-output',
gyp info spawn args   'build',
gyp info spawn args   '-Goutput_dir=.' ]
gyp verb command build []
gyp verb build type Release
gyp verb architecture x64
gyp verb node dev dir /home/shengxin/.atom/.node-gyp/.node-gyp/iojs-2.0.16
gyp verb `which` succeeded for `make` /usr/bin/make
gyp info spawn make
gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]
In file included from ../src/parser.c:1:
../src/tree_sitter/parser.h:52: warning: declaration does not declare anything
../src/tree_sitter/parser.h:58: warning: declaration does not declare anything
../src/tree_sitter/parser.h:73: warning: declaration does not declare anything
../src/parser.c:4: warning: expected [error|warning|ignored] after ‘#pragma GCC diagnostic’
../src/parser.c:58245: error: unknown field ‘count’ specified in initializer
../src/parser.c:58245: warning: missing braces around initializer
../src/parser.c:58245: warning: (near initialization for ‘ts_parse_actions[0].action’)

...

make: *** [Release/obj.target/tree_sitter_c_binding/src/parser.o] Error 1
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:126:13)
gyp ERR! stack     at ChildProcess.emit (events.js:214:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)
gyp ERR! System Linux 2.6.32-504.el6.x86_64
gyp ERR! command ""/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/bin/node"" ""/mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/node_modules/.bin/node-gyp"" ""rebuild""
gyp ERR! cwd /mnt/share/rh/source/small_packages/temp/atom-1.34.0/node_modules/tree-sitter-c
gyp ERR! node -v v8.9.3
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok 
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! tree-sitter-c@0.13.10 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the tree-sitter-c@0.13.10 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/shengxin/.atom/.apm/_logs/2019-03-01T00_06_14_997Z-debug.log[39m
child_process.js:495
    throw err;
    ^

Error: Command failed: /mnt/share/rh/source/small_packages/temp/atom-1.34.0/apm/node_modules/atom-package-manager/bin/apm --loglevel=error install
    at checkExecSyncError (child_process.js:472:13)
    at Object.execFileSync (child_process.js:492:13)
    at module.exports (/mnt/share/rh/source/small_packages/temp/atom-1.34.0/script/lib/run-apm-install.js:14:16)
    at Object.<anonymous> (/mnt/share/rh/source/small_packages/temp/atom-1.34.0/script/bootstrap:44:1)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
"
clean install of atom on osx fails to open a new window,"A clean install of atom on osx fails to open a new window.

**step 1 - remove your configs:**

```
rm -rf ~/.atom
rm -rf /usr/local/bin/atom
rm -rf /usr/local/bin/apm
rm -rf /Applications/Atom.app
rm -rf ~/Library/Preferences/com.github.atom.plist
rm -rf ~/Library/Application Support/com.github.atom.ShipIt
rm -rf ~/Library/Application Support/Atom
rm -rf ~/Library/Saved Application State/com.github.atom.savedState
rm -rf ~/Library/Caches/com.github.atom
rm -rf ~/Library/Caches/Atom
```

**step 2 - download a fresh copy of atom**

**step 3 - start atom**

either via the CLI or by clicking the app

actual:

the atom icon shows up
![image](https://user-images.githubusercontent.com/265409/53205561-e493f800-35eb-11e9-8273-ee35ac2c227e.png)

expected:

a new atom window to open

expected 2:

a way to debug why atom fails to start

"
"EBUSY: resource busy or locked, unlink","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [ x] Put an X between the brackets on this line if you have done all of the following:
    *x Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    *x Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * xChecked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    *x Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * xChecked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
EBUSY: resource busy or locked
[Description of the issue]
I am not able to install any package for some reason. It looks like a file is locked but even if i delete the temp directory i can't fix it. I tried safe mode and it doesn't work either 

VM22 <embedded>:14 Installing package sort-lines failed Error: Installing “sort-lines@0.18.0” failed.
    at C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\static\<embedded>:11:899339
    at r (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\static\<embedded>:11:893791)
    at o (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\static\<embedded>:14:1032547)
    at ChildProcess.n.process.on.e (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\static\<embedded>:14:1032753)
    at emitTwo (events.js:126:13)
    at ChildProcess.emit (events.js:214:7)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12) C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\apm\node_modules\temp\node_modules\rimraf\rimraf.js:218
      throw er
      ^

Error: EBUSY: resource busy or locked, unlink 'C:\Users\jherna3\AppData\Local\Temp\8\apm-install-dir-119119-19568-ng8g0e.ck9qp'
    at Object.fs.unlinkSync (fs.js:1061:18)
    at rimrafSync (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\apm\node_modules\temp\node_modules\rimraf\rimraf.js:211:13)
    at cleanupDirsSync (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\apm\node_modules\temp\lib\temp.js:143:5)
    at process.cleanupSync (C:\Users\jherna3\AppData\Local\atom\app-1.34.0\resources\app\apm\node_modules\temp\lib\temp.js:196:19)
    at emitOne (events.js:121:20)
    at process.emit (events.js:211:7)

(anonymous) @ VM22 <embedded>:14
m @ VM22 <embedded>:11
(anonymous) @ VM22 <embedded>:11
r @ VM22 <embedded>:11
o @ VM22 <embedded>:14
n.process.on.e @ VM22 <embedded>:14
emitTwo @ events.js:126
emit @ events.js:214
ChildProcess._handle.onexit @ internal/child_process.js:198

### Steps to Reproduce

1. [First Step]
if happen during regular use, i notice while trying to install a package today 
however, it is not limited to a single package. IT happen to me once and i was to solve by deleting and reinstalling everything. but i can't be doing this on a daily basis. 

2. [Second Step]
3. [and so on...]

**Expected behavior:** [What you expect to happen]
i should be able to update or remove packages 

**Actual behavior:** [What actually happens]
i can't install packages anymore 

**Reproduces how often:** [What percentage of the time does it reproduce?]

### Versions
C:\Users\jherna3>atom --version

Atom    : 1.34.0
Electron: 2.0.16
Chrome  : 61.0.3163.100
Node    : 8.9.3

C:\Users\jherna3>atom --clear-window-state

C:\Users\jherna3>atom --clear-window-state

C:\Users\jherna3>apm links
C:\Users\jherna3\.atom\dev\packages (0)
└── (no links)
C:\Users\jherna3\.atom\packages (0)
└── (no links)

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
"
"Virtual memory leak, while executing make","Atom allocates huge amounts of memory without freeing it while a make process is running in a project directory of atom. Memory allocation stops when make exits and starts over when make is called. This happens for me on **linux** in **safe mode**.

### Steps to Reproduce

I'm checking out the linux repo and compile it with a default config. Other projects with some make load are working as well!

1. `git clone https://github.com/torvalds/linux.git `
2. `cd linux`
3. `make clean distclean`
4. `yes """" | make oldconfig`
5. `atom --safe ./`
6. `make`

**Expected behavior:**
Atom should not allocate huge amounts of memory.

**Actual behavior:**
While make is running atom allocates around 150 MB per second. After make is finished atom uses around 50 GB virtual memory on my system. 

**Reproduces how often:**
100% of the time.

### Versions

Atom    : 1.34.0
Electron: 2.0.16
Chrome  : 61.0.3163.100
Node    : 8.9.3

at least from 1.32.0 this issue was present.

### Additional Information

Linux Mint Tara 19 (Ubuntu 18.04) @ 4.19.4-041904-generic
Dell XPS 15 9570 @ 32 GB RAM
"
macos: opening multiple files from the command line could be improved,"I'm using Atom on macos,

Sometimes I want to open multiple files from the command line.
This needs improvement, it does not yet work as expected.

Three ways to open multiple files (on macos):
- atom file file ...
- open -a Atom file file ...
- for f in file file ...;do;open -a Atom $f;done


To make that short:
Atom on macos should respond to the Finder 'open' event.

The 'atom' script should be rewritten,
to send the Finder 'open' event when given one or multiple file names.

It should not start a new full blown instance of Electron,
just to find out that Atom is already running.

--

added bonus, caveat:

opening files at a specific line should still work,
aka: open file:line is a bonus

---
and a new feature:
opening files at a regexp would be nice

I suggest:
open file:/foo

which should open the file
with the cursor positioned
on the first match of foo



 












"
Bitmap fonts break GTK menus,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
When the global gtk font is set to a bitmap font (with `lxappearance`), GTK dialogs render all characters as squares. This only happens in Atom (even chromium works fine). If I set the font to something like Roboto, start Atom, then change it back, the Atom dialogs will display fine.

### Steps to Reproduce

1. Use a bitmap font for gtk applications ([zevv-peep](http://zevv.nl/play/code/zevv-peep/) in my case)
2. Start Atom, open the ""Open File"" dialog
3. all text is rendered as squares

**Expected behavior:** 
All text gets displayed in the bitmap font

**Actual behavior:**
it's just squares
![image](https://user-images.githubusercontent.com/23422690/51682447-bec50480-1fe7-11e9-917e-cf0b0dd99447.png)


**Reproduces how often:**
always

### Versions
```
atom --version

Atom    : 1.34.0
Electron: 2.0.16
Chrome  : 61.0.3163.100
Node    : 8.9.3

apm --version

apm  2.1.3
npm  6.2.0
node 8.9.3 x64
atom 1.34.0
python 2.7.15+
git 2.20.1
```
Running on Debian Sid

### Additional Information

Font used is http://zevv.nl/play/code/zevv-peep/"
Incorrectly Saving a file in a FUSE folder (cryptomator vault),"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I want to save a new file to a [cryptomator](https://cryptomator.org/) vault folder. But often the file content is changed automatically after saving it. I found one example that I can reproduce every time, shared below.

### Steps to Reproduce

1. Create and unlock a [cryptomator](https://cryptomator.org/) FUSE vault folder.
2. Open Atom editor and create test.txt inside the cryptomator FUSE vault folder.
3. Enter the following contents in the file:
```
1
2
3
4
```
4. Save the file.
5. Delete the line 2 and 3 so that you see the following content:
```
1
4
```
6. Save the file.
7. The content has automatically changed to and saved into the file:
```
1
4
3
4
```

**Expected behavior:** [What you expect to happen]
After the second save (step 6), the file content should have remained as described in step 5.

**Actual behavior:** [What actually happens]
The content changed as described in step 7.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%. Tested it 5 times. On two different machines.

### Versions

atom 1.34.0
apm  2.1.3
npm  6.2.0
node 8.9.3 x64
atom 1.34.0
python 2.7.15rc1
git 2.17.1

OS: Ubuntu 18.04
Cryptomator 1.4.1

### Additional Information
Cannot reproduce the issue with other editors like gedit and sublimetext.

Screenshot:
![atom-cryptomator-vault-save](https://user-images.githubusercontent.com/14300004/51538172-83d89a80-1e48-11e9-8d1e-4dc6fc33c860.gif)
"
Subpixel anti-aliasing stops working if CSS is used to add smooth scrolling,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I wanted to add smooth scrolling to text editors because Atom seems to not have this option and isn't smooth by default, it only is in the settings editor. But doing so breaks subpixel anti-aliasing, which makes font a bit blurry compared to other text editors.

### Steps to Reproduce

1. Put this in your stylesheet, based on a comment on another issue https://github.com/atom/atom/issues/10276#issuecomment-323538272:
```less
atom-text-editor.editor > div > .scroll-view > div,
atom-text-editor.editor > div > .gutter-container > div {
    transition: -webkit-transform .09s ease;
}
```
2. Open Atom in safe mode
3. Open any file big enough to be scrolled (it can be plain text)
4. Take a screenshot and zoom it: see subpixel anti-aliasing works
5. Scroll through about half the visible height, and go back to the top. Take another screenshot: notice there is no subpixel anti-aliasing anymore.

It comes back if the file is reopened, but the same steps make it break everytime.

**Expected behavior:**

I expected subpixel antialiasing to just work.
There is another issue with this way of adding smooth scrolling (text lags behind when scrolling), but I did not expect this to affect subpixel antialiasing at all. Those features sound fairly unrelated, but I'm not an expert.

**Actual behavior:**

Subpixel antialiasing stops working.

**Reproduces how often:**

99% (everytime a text editor gets scrolled by more than about a few lines)

### Versions

Atom: 1.33.1 x64
Electron: 2.0.16
Chrome: 61.0.3163.100
Node: v8.9.3
OS: Windows 7 64 bits
"
TextMate grammar API to get ranges of matching scopes in selection,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

---

Keep in mind that Atom is highly customizable in a number of ways and we strongly prefer that you consider these options before filing this issue:

* https://flight-manual.atom.io/using-atom/sections/basic-customization/: tweak Atom's configuration, styles, and keybindings.
* https://flight-manual.atom.io/using-atom/sections/atom-packages/: install a community package.
* https://flight-manual.atom.io/hacking-atom/: use the Atom API in your init script, to create a package, or to enhance an existing package.

If you're convinced that none of these options are appropriate for the feature you want, please explain why that's the case by completely filling out the issue template below.

Also note that the Atom team has finite resources so it's unlikely that we'll work on feature requests. If we're interested in a particular feature however, we'll follow up and ask you to submit an RFC to talk about it in more detail.

-->

## Summary

Add a grammar API call to get an array of ranges of all scopes that match the given scope in the given selection.

The scope is not a selector; instead, it supports selector like syntax for a single scope. So `a.*.c` works like normal, but not things like negation (basically whatever relies on knowing more than the scope for a given tag).

E.g., where `|` is the selection end, and we look for `string` in
```js
let foo = |""bar""
let baz = [""quux"", ""wib|ble""]
```
it would return an array of the ranges of all three strings.

## Motivation

~~Overengineering~~ a TextMate solution to https://github.com/atom/toggle-quotes/issues/36. To toggle quotes for all strings in the selection, it wants to get the ranges of all strings in that selection. This feature request is an attempt to provide the functionality, as well as possibly being generally useful.

## Describe alternatives you've considered

Supporting true scope selectors is technically possible, but probably slows it down a lot. My current implementation balances scope tags, and only inspects tags one at a time and caches the result.

Alternatively, that issue could be resolved by doing a similar thing to this request in the `toggle-quotes` package itself, but not have it as part of any API.

## Additional context

I've got a probably working version ready for TextMate, so this issue is more to see if it's good to add as part of the API.

A similar feature would probably be good for Tree-sitter too, but I haven't got that yet.


The method could also be extended to take multiple selections (e.g., all selections in the TextEditor) and take multiple scopes, even blacklisted and whitelisted scopes (so it's more like a selector)."
Add Mac Services support to File/Folder context menus,"## Summary

While #10213 has the highly useful goal of providing text-based Mac Services, I'd also like to see file/folder-based Mac Services to be available upon context menu clicks of tab and Project Tree files and folders.

## Motivation

I'd like to be able to right-click a tab to have the repository of that file be opened in SourceTree (version control app) or use other services (including Automator-created ones) based on a clicked file/folder without leaving Atom.

## Describe alternatives you've considered

A package could be designed for a one-off solution, but without integrating with Mac's cross-application Services system, one would be forced to design solutions which can't leverage this Mac-standard means of inter-app communication.

## Additional context

I want to do the equivalent to this within Atom file context menus:
![screen shot 2018-11-23 at 8 45 27 am](https://user-images.githubusercontent.com/20234/48925224-42854680-eefc-11e8-992b-f96b2a6b195c.png)
"
Writing tests for Tree-sitter grammars,"## Summary

Requesting API methods to easily parse text and access the scopes it's given when using a Tree-sitter grammar. I.e., a `tokenizeLine` equivalent.

## Motivation

The TS grammar has a large set of tests already, but we are currently not testing how the tree is translated into scopes by Atom. While the tree is generally more useful, the scopes are important for syntax highlighting and backwards compatibility with existing scope based packages.

## Describe alternatives you've considered

I tried accessing it in a test as follows (for `language-javascript`), but it's ugly and the scope is just reported as `source.js` for everything
```cson
# spec/tree-sitter-javascript-spec.js
fs = require 'fs'
path = require 'path'
{ Range } = require 'atom'
TextEditor = null
buildTextEditor = (params) ->
  if atom.workspace.buildTextEditor?
    atom.workspace.buildTextEditor(params)
  else
    TextEditor ?= require('atom').TextEditor
    new TextEditor(params)

describe ""JavaScript grammar"", ->
  grammar = atom.grammars.grammarForScopeName(""source.js"")
  languageMode = atom.grammars.languageModeForGrammarAndBuffer(grammar, buildTextEditor({}).buffer)


  beforeEach ->
    atom.config.set('core.useTreeSitterParsers', true)

    waitsForPromise ->
      atom.packages.activatePackage(""language-javascript"")

    runs ->
      grammar = atom.grammars.grammarForScopeName(""source.js"")
      languageMode = atom.grammars.languageModeForGrammarAndBuffer(grammar, buildTextEditor({}).buffer)

  it ""parses the grammar"", ->
    expect(grammar).toBeTruthy()
    expect(grammar.scopeName).toBe ""source.js""

  describe ""assignment"", ->

    it ""tokenizes"", ->
      languageMode.buffer.buffer.setText(""let foo = 5;"")
      tree = languageMode.parse(grammar.languageModule, null, new Range([0,0], [Infinity, Infinity]))

      expect(tree.rootNode.type).toBe ""program"" # no point to this; just confirming it's as expected

      expect(languageMode.scopeDescriptorForPosition({row: 0, column: 1}).scopes).toEqual [""source.js"", ""storage.type""]
```

## Additional context

/cc @maxbrunsfeld. I did try to get it working before resorting to this issue."
Wrap anonymous nodes in quotes in the log cursor syntax tree scope command,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

It's confusing to know if a node is anonymous or not when logging the cursor syntax tree scope. Anonymous nodes are selected with a different syntax in the grammar files so it's useful to know.

Also some nodes like `>` are not escaped in the notification so it starts a markdown quote.

![image](https://user-images.githubusercontent.com/1058982/48225677-c5a38a00-e39d-11e8-868d-4229f3ef3a09.png)

### Steps to Reproduce

1. Open an untitled tab in Atom
2. Change the language mode to `c++`
3. Enter the following contents
```c++
template <class myType>
myType GetMax (myType a, myType b) {
 return (a>b?a:b);
}
```
4. Place the cursor in front of a `>` character for example on the first line.
5. Run `editor:log-cursor-syntax-tree-scope`

**Expected behavior:** The last line in the notification to be `"">""` instead of a markdown quote.

**Actual behavior:** 

![image](https://user-images.githubusercontent.com/1058982/48225677-c5a38a00-e39d-11e8-868d-4229f3ef3a09.png)

**Reproduces how often:** 100%

### Versions

https://github.com/atom/atom/pull/18411/commits/32d632ba9e8c35bae83f516c09ab2dcd6f67e11d

### Additional Information

No"
Alt+LMB (Left Mouse Button) double click for subword selection,"## Summary

Alt+LMB (Left Mouse Button) double click for subword selection.

## Motivation

You can select words via `ctrl-left` and `ctrl-right`, also subwords via `alt-`. And you can select words via mouse by double click, but you can't select subwords via mouse.

## Describe alternatives you've considered

I saw #2306, but it's about single click, as I understood.

Anyway, it can be configurable (I don't need for suggested selection there).

For now I don't see something (`lmb`, `mouse`, `click`) with mouse in Keybindings Settings.

## Additional context

It's very handy for snake_cased syntax, like Ruby, without `_` in Non Word Characters. I think for camelCased it's also handy.
"
git-diff displays falsely gutter for non-utf8 encoded files,"Atom falsely reports rows as being modified if the file is non-utf8 and contains extended latin characters (eg. å, ä, ö).

![image](https://user-images.githubusercontent.com/1257591/46802095-0ee3c800-cd65-11e8-976a-1e88387d5c8b.png)
"
Deserializing serialized Pane state makes the state object no longer serializable into JSON,"I have a solution, just making an issue in order to attach to pull request.

### Steps to Reproduce

1. Serialize atom workspace. Store a reference to it.
2. (optional, but illustrates the source of the bug) JSON.stringify the state
3. Deserialize it
4. Later, try to JSON.stringify the serialized state.

**Expected behavior:** [What you expect to happen]
The strings from step 2 and step 4 match.

**Actual behavior:** [What actually happens]
JSON.stringify fails due to circular reference in view registry

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions

1.32.0-beta
"
python syntax highlighter bug in base16-tomorrow-dark-theme,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
base16-tomorrow-dark-theme does not highlight `in` / `not in` python keyword/operator.

### Steps to Reproduce

### Versions
`atom --version`
Atom    : 1.25.1
Electron: 1.7.11
Chrome  : 58.0.3029.110
Node    : 7.9.0

`apm --version`
apm  1.19.0
npm  3.10.10
node 6.9.5 x64
atom 1.25.1
python 3.5.2
git 2.7.4

Running Ubuntu 14.04
"
Atom file explorer cannot see files.,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When trying to access /usr/include/GL/glew.h using Atom's file explorer the glew.h file does not show up in the /usr/include/GL file (while all others do ). Knowing the glew.h does exist on my computer as I can open it through Emacs, File and many other programs. Moreover as this file cannot be seen by Atom's file explorer the packages trying to compile my program fail as they don't see my file.

### Steps to Reproduce

1. Install libglew-dev through the command line using apt-get.
2. Launch atom.
3. Hit ctrl+o and go to the /usr/include/GL/ folder
Optional :
4. You can and drag and drop the file as a new empty buffer called glew.h is created.

**Expected behavior:** I expected to see my glew.h file through the explorer

**Actual behavior:** The file does not show up. While it shows up in every other possible program

**Reproduces how often:** Every time I try to access this file

### Versions

The atom command does not exist on my laptop but I use the 1.30.0 version.

This bug occurred using an HP omen computer running Linux Mint 19.

### Additional Information

![file_opener_bug](https://user-images.githubusercontent.com/37777252/46580781-daea6900-ca2b-11e8-9879-2f7418bef3f2.png)

"
sRGB no longer working in Mojave,"### Prerequisites

* [ X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Color profile is no longer making any difference when set to sRGB, both the display color profile and the override setting in Atom produce the same colors. This happens in safe mode also

### Steps to Reproduce

1. Use the standard color profile on mac
2. Open Atom and set the color profile to sRGB
3. You will notice no change between the two

**Expected behavior:** 
Previously on High Sierra switching to sRGB would make the colors more vibrant compared with the default system profile. After upgrading to Mojave the colors seem dull and there is no visible change between the two settings

**Actual behavior:**
There is no change between settings

**Reproduces how often:**
100%

### Versions
macOS 10.14 (18A391)
Atom    : 1.31.1
Electron: 2.0.7
Chrome  : 61.0.3163.100
Node    : 8.9.3
apm  2.1.1
npm  6.2.0
node 8.9.3 x64
atom 1.31.1
python 2.7.10
git 2.17.1

### Additional Information

![atom](https://user-images.githubusercontent.com/2401925/46351457-4eb4fc00-c64f-11e8-8be1-75a3dbb19c84.png)
"
Mojave dark mode,"## Summary

Dark mode support for Atom on macOS Mojave.

## Motivation

Many themes in Atom have both a light and dark variant. It would be nice if Atom could take advantage of the system-wide dark mode in macOS Mojave and switch between the light and dark variants of the user-selected theme according to the system setting in System Preferences > General > Appearance.

## Describe alternatives you've considered

Atom should at least change the theme of the title bar, if changing the whole theme is too much.
"
Display issues using Mojave through Parallels VM,"

### Prerequisites

* [instructions for starting in safe mode do not work. No such command ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Running macOS Mojave 10.14 through Parallels VM. (both Parallels 13 and 14)

### Steps to Reproduce

1. Download and install free trial of Parallels 14. 
2. Download Mojave from App store
3. Create new Parallels VM using Mojave install file
4. Download and install Atom
5. Open Atom

**Expected behavior:** Expected to be able to view welcome screen, open and view preferences, create and edit new documents

**Actual behavior:** Completely blank screen. Some of the contents of the welcome screen will appear as you move the mouse across the app window. But those areas disappear as soon as the mouse moves out of range.

**Reproduces how often:** 100% of the time. I have never been able to get it to display correctly.

### Version is current one available from the site: https://atom.io/ and the version number cannot be displayed due to this issue.

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. (as mentioned previously, this does not work. command not found)

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
"
Atom SIGBUS crash on CentOS,"### Prerequisites

* [ X ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I'm encountering ongoing crashes of Atom in my CentOS 7.5.1804 environment.  Atom will run for some time, then bring up the ""close/reload/keep it open"" dialog box. Happens fairly frequently, maybe every 5-10 minutes.

Continues to happen in safe mode, after blowing away the .atom directory, after uninstalling and reinstalling atom. Has happened across a number of Atom versions, current version in use being 1.29.0.

Here's the message in the system logs:
   localhost abrt-hook-ccpp: Process 3116 (atom) of user 501 killed by SIGBUS - dumping core

On the surface, this has some similarities to https://github.com/atom/atom/issues/10271, an issue that seems to be dormat and unresolved. In my case, this happens when files on a VMware Fusion shared folder are open.

### Steps to Reproduce


**Expected behavior:** 

Atom should not randomly crash.

**Actual behavior:** 

As described above, randomly crashes.

**Reproduces how often:** 

Every 5-10 minutes.

### Versions

CentOS 7.5.1804 
Atom 1.29.0.

### Additional Information

Happening in a VMware Fusion VM.
"
"Atom doesn't open Preferences, About, Files, and more","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

For some reason, there are severeal things I cannot open in Atom anymore: Atom->About, Aom->Preferences, opening files, drag/drop files and probably more. I've tried anything: upgrading to 1.29, removing .atom and ~/Library and more, cheching leftover processes, running --safe, running as root, running as a new user. Nothing help: when I try to open the mentioned item, nothing happens, even running Atom from the command line doesn't show any message.

### Steps to Reproduce

1. Open Atom
2. Open one of the items mentioned

**Expected behavior:** Atom opens the item as usually

**Actual behavior:** Anything whatsoever

**Reproduces how often:** always

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.

```
Atom    : 1.29.0
Electron: 2.0.5
Chrome  : 61.0.3163.100
Node    : 8.9.3
```

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.

macOS 10.13.6
"
Cannot See Atom Window with macOS 10.13.6  ,"### Prerequisites

* [ X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Atom will startup but fail to load any windows when trying to use the program. This issue occurs both in safe mode and normal. I have downgraded to 1.27.2 where atom works fine again. Potentially a problem with the latest electron upgrade or the fact that I am using macOS 10.13.6 as the issue was noticed around the time the OS was updated. 

### Steps to Reproduce

1. Open atom 
2. Applications boots but no windows are visible. I have tried opening files and using the command line to reset the view but to no prevail
3. Behaviour is repeated in safe mode
4. I have tried all three versions of 1.28 without any success

**Expected behavior:** [What you expect to happen]
Can see the editing screen

**Actual behavior:** [What actually happens]
App boots but no screen loads, repeated in safe mode. Unable to use software

**Reproduces how often:** [What percentage of the time does it reproduce?]
All the time, the application now unusable. 

### Versions
- 1.28.0
- 1.28.1
- 1.28.2

This is the second time I have posted this as the issue was closed with no success. Please let me know what other information I can provide to help replicate the bug. "
Atom UI Seems to be blurry over all for some reason??,"Ok so this seems to happen randomly, but more recently its been consistent.
The Atom UI gets blurry, as you can see in the image. The code is shown crisp in the top part, but blurry in the bottom part. I tried changing the theme, but no difference (Default light and dark themes).

It gets clearer when I hover mouse over an element of the UI or a part of the code, and get blurrier and blurrier as I pull the mouse away from that element or part of code. 

I've check the windows display settings and the DPI is set to 100% only. 
 
![screenshot 78](https://user-images.githubusercontent.com/40825956/42272047-8f2dcc92-7fa2-11e8-989a-b0be5cd12cc0.png)


Running on Latest windows 10, 1080p 60hz screen. 
Asus ROG g751jy

UPDATE : 

Version ----
Atom    : 1.28.0
Electron: 2.0.3
Chrome  : 61.0.3163.100
Node    : 8.9.3

Debugging -----
Safe Mode : Tried , getting the same result with UI elements, but code if fine. Then again as i said this issue seems to be pretty random.
Other debugging suggestions such as clearing saved state etc. didn't seem relevant to this issue.
There are no incompatible packages. And all packages are up to date


Disabling GPU seems to have done the trick, but I think its best to check it for a few days, as agagin, it a pretty random issue. Though it seems that This would be a permanent solution :)  
Thank you for directing me to the GPU debugging suggestion.

PS : Any specific reason that this is happening on my GPU? Its a pretty powerful card GTX 980M (4GB). At least for running atom it is. Can it be caused because of certain change in GPU settings?? because this is happening only since a few days. Previously, since the past year or so that I have been using Atom io, atom never had this issue on this machine. Any ideas?

Also, am I loosing anything by disabling GPU?

Thanks,
Bhavil Jain

 
"
cannot search for packages inside atom editor GUI inside virtual box behind corporate proxy,"I am unable to search for packages inside the atom editor GUI. Although `apm `via command line is running fine. I am able to install packages via `apm install` command. 
But with GUI it throws some error:
`getaddrinfo EAI_AGAIN atom.io:443`
The atom version I am using is
Atom    : 1.28.0
Electron: 2.0.3
Chrome  : 61.0.3163.100
Node    : 8.9.3 
I am working behind a proxy network and proxy settings are taken care off in the `~.apmrc `file.
One more thing that I am able to install featured packages via GUI but not search the new ones
I am working on 64-bit ubuntu 16.04 inside a virtual box with the host is Windows 10
Also, the atom is working fine with another Linux 32-bit machine in the same host inside a virtual box.

"
getVisibleRowRange() does not respect folded lines,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

`getVisibleRowRange()` returns only all unfolded lines. When I fold something, the range gets messed up and no longer works reliably until I unfold everything.

### Steps to Reproduce

1. Open up the Atom developer console
2. Access the `getVisibleRowRange()` of the active editor
3. Fold and unfold lines and watch the range not changing.

**Expected behavior:** When I fold something, it should increase the range and match the start and end of the editor line count.

**Actual behavior:** It shows the start and end line count until I fold something, but then stays the same count, while it should increase to match the beginning and ending of the editor lines count.

**Reproduces how often:** 100% of the time. It's probably intended (for earlier versions without code folding), but it should be changed now.

### Versions

Atom 1.27.2 x64
Windows 10 x64

### Additional Information

I also tried accessing
```
element.getFirstVisibleScreenRow()
element.getLastVisibleScreenRow()
```
but those commands above will show exactly the same wrong result as `getVisibleRowRange()`.

On top, my suggestion would be to maybe leave those function as they are (for backwards compatibility with packages) and add new ones which get all the visible lines (including the folded ones) and show the range reliably.

I was bugfixing a [package](https://github.com/camel-chased/editor-background) which has this exact issue mentioned above and I haven't found any functions to access all visible lines. Since those functions doesn't respect the folding, when something folds, the package missmatches lines and stuff get weird.

See [this](https://github.com/camel-chased/editor-background/blob/35f4d38cb57bf91dc89bb720dc4f72df7460c562/lib/editor-background.coffee#L781) for reference."
Data loss when editing symlinked project,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
Atom fails to use proper filepath when a project is opened in a symlinked project and a file is opened using ""Find File""

### Steps to Reproduce
1.
 ```
$ mkdir project
$ ln -s project linktoproject
$ cd linktoproject
$ echo hello > hi.txt
$ atom .
```

2. Click `hi.txt` on project sidebar. Make some edits without saving
3. `c-p` for find file and open `hi.txt`. Make changes and save
4. go back to first tab and save

**Expected behavior:**
I should have two views of the same file, with edits propagating to both. `c-p` should open `linktoproject/hi.txt`

**Actual behavior:**
Atom opens `linktoproject/hi.txt` on click but opens `project/hi.txt` from find file. Atom thinks these are two different files. After saving both files, there is no indication that one of the files now has unsaved information that will be forever lost if closed.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.
Atom    : 1.23.3
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0

apm  1.18.12
npm  3.10.10
node 6.9.5 x64
atom 1.23.3
python 3.6.2
git 2.7.4

Ubuntu 16.04 4.4.0-119-generic

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
"
text fields not showing typed characters,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

text fields not showing typed characters
a snap shot of these fields and all of those has value but they are invisible even in setting view 
![screen shot 2018-04-06 at 10 48 31 am](https://user-images.githubusercontent.com/8351624/38436302-1ec35b16-3989-11e8-90c4-c7c68d100f3c.png)
. 

![screen shot 2018-04-05 at 9 28 32 am](https://user-images.githubusercontent.com/8351624/38378999-36665348-38b4-11e8-95d5-5b05a51439d2.png)
![screen shot 2018-04-05 at 9 33 31 am](https://user-images.githubusercontent.com/8351624/38379064-6e82b316-38b4-11e8-8b97-607baee0fd54.png)

![screen shot 2018-04-05 at 9 30 31 am](https://user-images.githubusercontent.com/8351624/38379008-3e692b88-38b4-11e8-901c-6f00d0e32e41.png)



### Steps to Reproduce

1. oppening atom
2. try to find something by pushing Ctrl + f
3. start typing 

**Expected behavior: to show characters 

**Actual behavior: fields seems has value but they are invisible

**Reproduces how often: always

### Versions

Atom    : 1.25.1
Electron: 1.7.11
Chrome  : 58.0.3029.110
Node    : 7.9.0

### Additional Information

I have virtual mac on my machine and i'm not sure if it's related to that one or not. I had older version of atom and was working properly after updating to last version happened to me.  
"
"awful anti-aliasing and hinting, and no sub-pixel rendering; on linux","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Atom does an inexcusably terrible job of anti-aliasing and hinting, and doesn't use sub-pixel rendering.

![atom-garbage-font-rendering](https://user-images.githubusercontent.com/620722/37737758-22751a5c-2d2b-11e8-9ac5-b10b0dd0d99a.png)

The issue is present at any font size, but a small font size, as the screenshot above, makes the problem obvious.

No other application on this system does this, including other Electrons applications, like Slack and Discord.

### Steps to Reproduce

1. Have an up to date install of Arch Linux.
2. Install Atom.
3. Open any file containing text.
4. Reduce the font size to make the effect more noticable.

**Expected behavior:** Decent anti-aliasing, hinting, and sub-pixel rendering.

**Actual behavior:** Garbage.

**Reproduces how often:** Always.

### Versions

atom --version
```
Atom    : 1.24.0
Electron: 1.8.4
Chrome  : 59.0.3071.115
Node    : 8.2.1
```

apm --version
```
apm  1.19.0
npm  5.7.1
node 9.9.0 x64
atom 1.24.0
python 2.7.14
git  2.16.2
```

uname -a
```
Linux PowerMAP 4.15.4-1-ARCH #1 SMP PREEMPT Sat Feb 17 16:01:38 UTC 2018 x86_64 GNU/Linux
```

### Additional Information

I don't know which additional Linux package version might be relevant. If you need more information, I'd be happy to provide it."
Linux only: editor crashes with rm -r node_modules,"
I have the editor open, no tabs from node_modules showing.

If I sudo rm -r node_modules/

The editor crashes.   Also I have to do sudo, so not sure if atom has these files open when it shouldn't?  Windows and other systems didn't need sudo to remove node_modules.

I'm on Debian now."
Atom crashes when installing module via NPM,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

On Linux Mint 18.3, Atom crashes when installing/uninstalling a module via NPM while sitting on the app's root directory.

### Steps to Reproduce

1. Opened Bash terminal at app root directory
2. Typed `atom .` to open Atom
3. Typed `cd client && npm i -S react-slick` 
4. Atom will crash while the module is being downloaded/installed 

**Expected behavior:** Not to crash.

**Actual behavior:** It will either succeed or crash.

**Reproduces how often:** Crashes about 50% of the time.

### Versions

Linux Mint 18.3 4.13.0-26-generic x86_64

- **Atom**: 1.23.3
- **apm**: 1.18.12
- **Electron**: 1.6.15
- **Chrome**: 56.0.2924.87
- **git**: 2.7.4
- **Node**: 8.9.3
- **npm**: 5.6.0
- **python**: 2.7.12

### Additional Information

Video:
https://www.youtube.com/watch?v=GGF_xElWxbw

Checked and made sure node_modules wasn't being tracked:
![gitcached](https://user-images.githubusercontent.com/22607722/35186997-18088104-fdd2-11e7-8604-8a0d223dbfb1.png)

Extra steps:

- Renamed ~./atom to ~./atom_backup (still crashes)
- Started app with atom --safe (still crashes)
- Cleared atom window state (still crashes)

Happens randomly, as you can see here (I installed, uninstalled, reinstalled, then it crashed)
![crashpersist](https://user-images.githubusercontent.com/22607722/35186990-0f416aea-fdd2-11e7-8735-c42b94d12a4e.png)
"
[GPG key] Debian 9 gives error,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Following directions on [Installing Atom on Debian](https://flight-manual.atom.io/getting-started/sections/installing-atom/#debian-and-ubuntu-debapt) gives error.

### Steps to Reproduce

1. 
```console
curl -L https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0
100  3941  100  3941    0     0   1446      0  0:00:02  0:00:02 --:--:--  4157
gpg: [don't know]: invalid packet (ctb=2d)
gpg: keydb_get_keyblock failed: Value not found
gpg: [don't know]: invalid packet (ctb=2d)
gpg: /tmp/apt-key-gpghome.J0QFGgZhHE/pubring.gpg: copy to '/tmp/apt-key-gpghome.J0QFGgZhHE/pubring.gpg.tmp' failed: Invalid packet
gpg: error writing keyring '/tmp/apt-key-gpghome.J0QFGgZhHE/pubring.gpg': Invalid packet
gpg: [don't know]: invalid packet (ctb=2d)
gpg: error reading '-': Invalid packet
gpg: import from '-' failed: Invalid packet
```
2. 
```console
http -d https://packagecloud.io/AtomEditor/atom/gpgkey 
HTTP/1.1 200 OK
Accept-Ranges: bytes
Cache-Control: max-age=31536000
Content-Disposition: attachment; filename=""AtomEditor-atom-4C6E74D6C0A35108.pub.gpg""
Content-Length: 3941
Content-Type: text/plain
Date: Sat, 20 Jan 2018 06:57:09 GMT
ETag: ""8e4172cc039b35f7764b4bdb1e909a13""
Last-Modified: Fri, 15 Dec 2017 19:31:58 GMT
Server: AmazonS3
x-amz-id-2: 4xFOGrDHF14bE9ZxEBNElY5+MZVSgiL1JrOklxihF3q62ysHV2QLWp1DBc2Vfl4JsF7YCHWqB1k=
x-amz-request-id: 0EEADE65F92A6029

Downloading 3.85 kB to ""AtomEditor-atom-4C6E74D6C0A35108.pub.gpg""
Done. 3.85 kB in 0.00067s (5.63 MB/s)
```
2.1
```console
sudo apt-key add AtomEditor-atom-4C6E74D6C0A35108.pub.gpg

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

[sudo] password for root: 
gpg: [don't know]: invalid packet (ctb=2d)
gpg: keydb_get_keyblock failed: Value not found
gpg: [don't know]: invalid packet (ctb=2d)
gpg: /tmp/apt-key-gpghome.1ucakhx5KC/pubring.gpg: copy to '/tmp/apt-key-gpghome.1ucakhx5KC/pubring.gpg.tmp' failed: Invalid packet
gpg: error writing keyring '/tmp/apt-key-gpghome.1ucakhx5KC/pubring.gpg': Invalid packet
gpg: [don't know]: invalid packet (ctb=2d)
gpg: error reading 'AtomEditor-atom-4C6E74D6C0A35108.pub.gpg': Invalid packet
gpg: import from 'AtomEditor-atom-4C6E74D6C0A35108.pub.gpg' failed: Invalid packet
```

**Expected behavior:** That it would import the key(s) retrieved

**Actual behavior:** See console output in the steps above

**Reproduces how often:** 100%

### Versions
  - Debian 9.3
  - APT 1.4.8
  - Curl 7.52.0
  - httpie 0.9.8
### Additional Information
"
Feature requests: add primitives for multi-window-aware packages,"I'm trying to write a package that needs to:

1. Be able to manipulate config and settings on a per-window basis
2. Be able to constrain which packages are loaded on a per-window basis
3. Be able to intercept and rewire config changes done by packages
4. Be able to intercept and realign packages with their proper serialization

And for that:

- I need a way to identify a window.
- I need a way to know when a single window is created/closed.
- I need a way to know when a single window receives focus.
- I need a way to restrict the packages loaded for a window.
    - This could be either whitelist (easier) or blacklist (not hard to compute from [this](https://atom.io/docs/api/v1.23.1/PackageManager#instance-getAvailablePackagePaths))
- I need a way to read and alter config settings (across packages) per-window.
- I need a way to control the serialized state used when creating a window.
    - I do *not* need a way to inspect it or otherwise modify its integrity.
    - I do *not* need to handle state separately from its package (and I wouldn't want to).

What I'm wanting to do is more or less an expanded, fuller version of [this](https://github.com/atom/atom/issues/5168), but I'm wanting to do it in userland where I have better flexibility.

Also, if any of these exist already, I'd like to know, so I can go ahead and strike them out.

------

Here's an incomplete high-level API proposal for all but serialized state control and ""on window startup"":

- `atom.window` - A self-reference to this window instance (not the DOM global).
- `atom.onDidOpenWindow(callback: (window) => any)` - Called with a new `AtomWindow` instance to control the other window.
- `AtomWindow::onDidClose(callback: () => any)` - Called when the window is closed.
- `AtomWindow::onDidReceiveFocus(callback: () => any)` - Called when the window receives focus.
- `AtomWindow::send(scope, message, ...args)` - Send an IPC message with a given scope.
- `AtomWindow::onDidReceiveMessage(scope, message, callback: (...args) => any)` - Receive a message with a given scope.
- `PackageManager::enablePackageForWindow(name)` - Does what it says.
- `PackageManager::disablePackageForWindow(name)` - Does what it says.
- `PackageManager::isPackageDisabledForWindow(name)` - Checks what it says.
- `Config::setForWindow(key, value)` - Set config for window
- `Config::getForWindow(key, value)` - Get config for window
- `Config::unsetForWindow(key, value)` - Unset config for window
- `Config::observeAll(options, callback: (value) => any)` - Observe all key changes.
    - I can detect nesting easily enough.

I can use IPC to control config settings and package disabling across windows using the above methods."
"Error ""unable to verify the first certificate""","![image](https://user-images.githubusercontent.com/29014463/33909381-7dee83a4-dfb1-11e7-89ce-5bce6a0328cf.png)

```
Request for package information failed: unable to verify the first certificate (UNABLE_TO_VERIFY_LEAF_SIGNATURE)
```"
Atom not opening files,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * [ ] Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * [x] Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * [x] Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * [x] Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * [x] Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If I open Atom via the GUI I can't open any files or preferences .etc.
Although if I open a file via terminal, atom works as intended even in safe mode.

I have tried running the command `atom --clear-window-state`

**Expected behavior:** Open a file

**Actual behavior:** Atom stays in the same state that it opened in.

**Reproduces how often:** 100%

### Versions
Atom: 1.22.1
Electron: 1.6.15
Chrome: 56.0.2924.87
Node: 7.4.0
OSX: 10.13.1
"
Tree View crashes Atom when opening file on remounted disk volume,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages


### Description

The editor crashes when using ""tree view"" to open a file in a ""project folder"" that is located on a **re**mounted drive.

Please note that it is not necessary to actually access the volume (by e.g. opening a file). It seems that the volume disappearing/reappearing is enough for the editor to crash.

Also note that this behavior is **not** present when using File -> Open on the volume. Hence I believe it is related to the ""tree view"".

Crash logs from _Scenario 2_ has been attached.


[e0003a1c-b264-414b-849c-96d6ce864538.txt](https://github.com/atom/atom/files/1138162/e0003a1c-b264-414b-849c-96d6ce864538.txt)
[operation_log.txt](https://github.com/atom/atom/files/1138163/operation_log.txt)
[e0003a1c-b264-414b-849c-96d6ce864538.zip](https://github.com/atom/atom/files/1138171/e0003a1c-b264-414b-849c-96d6ce864538.zip)


### Steps to Reproduce

Note that this crash is reproducible in both _safe_ and _regular_ mode.

#### Scenario 1:

1. Make sure the volume is **not** already a ""project folder"" in Atom.
2. Mount the volume in DiskCryptor.
3. Start Atom.
3. Add a ""project folder"" pointing to the mounted volume.
4. Unmount the volume in DiskCryptor.
5. Remount the volume in DiskCryptor.
6. Open any file from the mounted volume.

#### Scenario 2:

1. Make sure the volume **is** already a ""project folder"" in Atom.
2. Mount the volume in DiskCryptor.
3. Start Atom.
4. Unmount the volume in DiskCryptor.
5. Remount the volume in DiskCryptor.
6. Open any file from the mounted volume.

#### Scenario 3:

This is my daily usage scenario.
The volume has been automatically unmounted the the end of the day.
At the beginning of each work day, I wake the computer from sleep mode.

1. Make sure the volume **is** already a ""project folder"" in Atom.
2. Mount the volume in DiskCryptor.
3. Start Atom.
4. Unmount the volume in DiskCryptor.
5. Put the computer to sleep (and go home for the day).
6. Wake up the computer.
7. Remount the volume in DiskCryptor.
8. Open any file from the mounted volume.

#### Expected behavior:

The editor should not crash when opening a file on a volume that was first mounted, then unmounted and finally remounted.

#### Actual behavior:

The editor crashes when trying to open any file on a **re**mounted volume.
This is regardless of whether any file (on any volume) was opened or not.

#### Reproduces how often:

Every time the scenario is repeated.


### Versions

`atom --version`
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0

This is the current version I'm using, but this problem has been present much, much longer than this. Perhaps for years? I'm not certain.

`apm --version`
apm  1.18.1
npm  3.10.10
node 6.9.5 ia32
python 3.6.1
git 2.10.2.windows.1
visual studio 2015

Windows 10 Enterprise


### Additional Information

This happens on Windows 10 using [DiskCryptor](https://diskcryptor.net/wiki/Main_Page) to simulate an unplugged volume. Presumably, it is related to a volume being remounted, but it **could** also be related to network shares, as described in [ticket 14760](https://github.com/atom/atom/issues/14760).

**Prerequisite**
Use e.g. DiskCryptor to create a new volume.
Place a text file in that volume (in order to have content that can be opened by Atom).
"
Docker/Kubernetes support,"Often a developer could use the editor on the host and mounting source volumes inside a docker container to compile, debug and run code there.
Instead of mounting a portable atom volume inside the container to run the editor in docker could be possible to run plugins command (build, make etc..) inside a container (cause generally they suppose run tools locally)? 
I don't really know if could be introduced some global feature in Atom for this.
I thought this cause I'm supposing that there could be some sensible informations in the .atom directory that could not be the best practice to have that exposed in every container mounting a ""atom volume""."
Atom opens without any panes.,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages



### Description

Opening atom after updating to 1.18 results in a window without any panes or the dir tree. It is not a new window, it was opened with `atom .` with `pwd` set to a project dir.

### Steps to Reproduce

- update to 1.18.0
- `atom .` in project dir

**Expected behavior:** 

- i'd expect a usable code editor with panes.

**Actual behavior:** 

- no panes or dir tree

**Reproduces how often:**

100%

### Versions

Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 2.7.10
git 2.13.1

OSX 10.11.6

### Additional Information

"
Feature Request: Integrated Shell/Terminal Access,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
Windows 10 now has a bash terminal running on an Ubuntu underpinning. I want to access this terminal using Atom. There are some packages which report to do this on Mac and/or Linux, but nothing that I've found for Windows. I think Atom should have shell functionality built in like Sublime Text or Microsoft Visual Studio Code. The later even allows you to choose which shell to use based on which shells are installed, including windows power shell, CMD, or bash.

### Steps to Reproduce
1. Open Atom
2. Write Code
3. Go to commit
4. Nowhere to commit
5. Have to open separate terminal window
6. Be sad

**Expected behavior:** [What you expect to happen]
1. Press some sort of key combo (whether ctrl+` or ctrl+Shift+P and type Terminal)
2. get access to terminal in window or pane
3. Terminal automatically changes directory to current directory of file that you're working on

**Actual behavior:** [What actually happens]
1. Nothing (currently)
2. Have to open terminal app seperately an change directory manually

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions
1.17

### Additional Information
Please consult Microsoft's Visual Studio Code editor for how to implement an integrated terminal well
"
Unable to installing atom-amd64.deb on Ubuntu 17.04,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Unable to install atom on ubuntu 17.04
### Steps to Reproduce

1. Download .deb package from atom.io on Ubuntu 17.04(a clean install is best for repro)
2. Double click to open the deb package on Ubuntu Software Store  
3. Click install

**Expected behavior:** [What you expect to happen]
Atom installs


**Actual behavior:** [What actually happens]
Nothing happens


**Reproduces how often:** [What percentage of the time does it reproduce?]
100%


**MORE INFO:**
If you attempt to install on terminal via `sudo dpkg -i atom-amd64.deb `
you get the following errors:
```
dpkg: dependency problems prevent configuration of atom:
 atom depends on git; however:
  Package git is not installed.
 atom depends on gconf2; however:
  Package gconf2 is not installed.
 atom depends on gconf-service; however:
  Package gconf-service is not installed.
```
If you try to start Atom after failed to install, you get
```
/usr/share/atom/atom: error while loading shared libraries: libgconf-2.so.4: cannot open shared object file: No such file or directory
```
If you run ` sudo apt --fix-broken install` this fixes the issue and atom starts working.

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.
Atom    : 1.16.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

OS: Ubuntu 17.04
**uname -a:**
```
Linux ubuntu 4.10.0-19-generic #21-Ubuntu SMP Thu Apr 6 17:04:57 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
```

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
"
Add an option to disable smooth scrolling,"I was using Atom 1.8.8 previously which did not include smooth scrolling. Today I updated to 1.10 which has smooth scrolling enabled by default, but I cannot figure out how to turn it off. There do not seem to any plugins or tutorials on how to disable it either. In Chrome, the user can open chrome://flags and manually disable it, but I could not figure out how. [This post](https://discuss.atom.io/t/how-to-access-chrome-flags-in-electron/16470/6) gives me a few hints, but not much else unfortunately.
"
"""Restart and Install"" does not restart Atom after update on Windows","### Prerequisites
- [ ] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

When Squirrel notifies about new Atom release, after clicking ""Restart and Install"" button on about view, Atom exits, update completes with some errors logged to SquirrelSetup.log but Atom is not restarted.
This has been happening during every update since I installed Atom 1.8.0 or one version before that.

Here is the whole [SquirrelSetup.log](https://github.com/atom/atom/files/426153/SquirrelSetup.log.txt) containing every line since update to 1.8.0 on 2016-07-03.

Possible cause:

```
System.IO.IOException: The process cannot access the file 'C:\Users\User\AppData\Local\SquirrelTemp\tempe\lib\net45\atom.exe' because it is being used by another process.
```

Might be caused by security software locking the file druring scanning.
### Steps to Reproduce
1. Open about view when a new release is available
2. Wait for download to finish
3. Click ""Restart and Install"" button

**Expected behavior:**
Atom restarting after Squirrel completes updating to latest release

**Actual behavior:**
Atom is not restarting after updates have been applied
### Versions

Atom    : 1.9.7
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
Squirrel: 1.2.4.0

OS: Windows 10 Pro, version 1607, build 14393.51
"
