Title,Body,Label
[WSL] atom.sh assumes default root automount,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [ ] Put an X between the brackets on this line if you have done all of the following:
    * n/a Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * n/a Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * X Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * X Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * n/a Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If I mount C: at /c, running `atom` in WSL won't load Atom:

```
$ findmnt --source C:
TARGET SOURCE FSTYPE OPTIONS
/c     C:     drvfs  rw,noatime,uid=1000,gid=1000,umask=22,fmask=11,metadata,case=off
$ atom
The system cannot find the path specified.
```

`atom.sh` sets $root; It doesn't use it when setting $ATOMCMD, though:

https://github.com/atom/atom/blob/c5ebfbddd096a24bb99b832432a5dfcd67da4714/resources/win/atom.sh#L8-L15

To me this seems like https://github.com/atom/atom/issues/17794, but it's happening with Ubuntu 18.04 on WSL with Windows 10 (1809) and Atom 1.36.1.

### Steps to Reproduce

1. On Windows 10 (1809): Enable WSL, install Atom, install Ubuntu.
2. In Ubuntu on WSL, configure `/etc/wsl.conf` to mount root at /:
    ```
    [automount]
    root = /
    ```
3. Exit Ubuntu, run Ubuntu again, and run `atom`:
    ```
    atom
    ```

**Expected behavior:** Atom should open.
**Actual behavior:**

```
$ atom
The system cannot find the path specified.
```

**Reproduces how often:** 100%

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.

Windows 10 (1809), Ubuntu 18.04:
```
$ systeminfo.exe | grep -E '^OS (Name|Version)'
OS Name:                   Microsoft Windows 10 Pro
OS Version:                10.0.17763 N/A Build 17763
$ grep ^VERSION= /etc/os-release
VERSION=""18.04.2 LTS (Bionic Beaver)""
$ uname -r -o
4.4.0-17763-Microsoft GNU/Linux
```

Atom 1.36.1:
```
C:\Users\Solvaholic>atom --version

Atom    : 1.36.1
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3

C:\Users\Solvaholic>apm --version
apm  2.1.3
npm  6.2.0
node 8.9.3 x64
atom 1.36.1
python 3.7.1
git 2.21.0.windows.1
visual studio
```

### Additional Information

This issue is just about _opening_ Atom using the built-in methods. With a fresh install of the Ubuntu app (no custom aliases or functions) and current default Windows / WSL (appends Windows %Path% to Linux $PATH), running `atom` in Linux will run `%LOCALAPPDATA%\atom\bin\atom` in your Windows user's home directory. That script calls your current Atom version's `atom.sh`:

```
$ cat $(which atom)
#!/bin/sh
""$(dirname ""$0"")/../app-1.36.1/resources/cli/atom.sh"" ""$@""
```

Other issues related to running Atom from Linux/WSL, like path availability or translation, are outside the scope of this issue.",bug
Recognize grammar abbreviations in Grammar selector,"_From @MoritzKn on January 4, 2018 23:24_

### Prerequisites
* [ ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

It would be great if the ordering would be influenced by abbreviations. 

### Steps to Reproduce

1. <kbd>ctrl</kbd><kbd>shift</kbd>+<kbd>L</kbd>
2. enter `js`

**Expected behavior:**
E.g. if I enter `js` I would expect Java Script to be the first result since it's an exact abbreviation. I would expect this for other abbreviations too.

**Actual behavior:**
I get the following grammars:
1. `JSON`
2. `JSDoc`
3. `JSON (Twig)`
4. `Java Properties`
5. `Javascript (Twig)`
6. `JUnit Test Report`
7. `JavaScript`

I could understand if it were on the 4th place since the 1st to 3rd places match on the beginning.
However I would prefer if abbreviations would be rated just a little less then a full match.

**Reproduces how often:**
100%

### Versions
`$ atom --version`
```
Atom    : 1.23.1
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0
```

`$  apm --version`
```
apm  1.18.11
npm  3.10.10
node 6.9.5 x64
atom 1.23.1
python 3.6.4
git 2.15.1
```

 `$ uname -a`  (OS)
```
Linux arch-pc 4.14.10-1-ARCH #1 SMP PREEMPT Fri Dec 29 20:17:35 UTC 2017 x86_64 GNU/Linux
```
  

_Copied from original issue: atom/grammar-selector#53_",enhancement
Uncaught TypeError: Cannot read property 'length' of undefined,"*@priyankvex commented on Jan 24, 2015, 7:48 AM UTC:*

[Enter steps to reproduce below:]

1.  ...
2.  ...

**Atom Version**: 0.175.0
**System**: linux 3.13.0-44-generic
**Thrown From**: [go-to-line](https://github.com/atom/go-to-line) package, v0.30.0

### Stack Trace

Uncaught TypeError: Cannot read property 'length' of undefined

```
At /usr/share/atom/resources/app/node_modules/text-buffer/lib/text-buffer.js:391

TypeError: Cannot read property 'length' of undefined
  at TextBuffer.module.exports.TextBuffer.lineLengthForRow (/usr/share/atom/resources/app/node_modules/text-buffer/lib/text-buffer.js:391:29)
  at TextBuffer.module.exports.TextBuffer.clipPosition (/usr/share/atom/resources/app/node_modules/text-buffer/lib/text-buffer.js:943:53)
  at DisplayBuffer.module.exports.DisplayBuffer.screenPositionForBufferPosition (/usr/share/atom/resources/app/src/display-buffer.js:1009:27)
  at DisplayBuffer.module.exports.DisplayBuffer.scrollToBufferPosition (/usr/share/atom/resources/app/src/display-buffer.js:661:47)
  at TextEditor.module.exports.TextEditor.scrollToBufferPosition (/usr/share/atom/resources/app/src/text-editor.js:2670:33)
  at GoToLineView.module.exports.GoToLineView.confirm (/usr/share/atom/resources/app/node_modules/go-to-line/lib/go-to-line-view.js:116:14)
  at atom-text-editor.<anonymous> (/usr/share/atom/resources/app/node_modules/go-to-line/lib/go-to-line-view.js:55:24)
  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app/src/command-registry.js:243:29)
  at /usr/share/atom/resources/app/src/command-registry.js:3:61
  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/share/atom/resources/app/node_modules/atom-keymap/lib/keymap-manager.js:558:16)
  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app/node_modules/atom-keymap/lib/keymap-manager.js:396:22)
  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/usr/share/atom/resources/app/src/window-event-handler.js:170:20)

```

### Commands

```
     -30:09.2 core:cancel (atom-text-editor.editor.mini)
     -30:05.4 application:new-file (atom-pane.pane.active.with-minimap)
     -30:03.5 go-to-line:toggle (atom-text-editor.editor.is-focused)
     -30:03.5 core:paste (atom-text-editor.editor.mini)
     -30:00.0 core:confirm (atom-text-editor.editor.mini)

```

### Config

```json
{
  ""core"": {}
}
```

### Installed Packages

```coffee
# User
minimap, v3.5.6

# Dev
No dev packages
```

/cc @atom/core

*This issue was moved by [daviwil](https://github.com/daviwil) from [atom/go-to-line#19](https://github.com/atom/go-to-line/issues/19).*",bug
Customize presence/absence/ignored of final EOL,"*@mcandre commented on Feb 25, 2018, 3:01 AM UTC:*

Proper LF text files feature a final EOL terminator at the end, and even CRLF files benefit from a final EOL terminator. For example, C/C++ `*.h` headers and `*.js` client code may break when a final EOL is absent, due to the way that these files are concatenated. Some formats such as (GNU) Makefile's require a final EOL terminator.

To help the user safeguard against these kinds of surprises, it would be helpful if line-ending-selector offered an additional setting to manage this. Aside from the choice of line sequence (LF, CRLF, CR, etc.), the user should be able to select, a default and per-file setting of:

*   EOL Present
*   EOL Absent
*   EOL Ignored

This way, sensitive text files are sure to feature the right end of file terminator.

*This issue was moved by [jasonrudolph](https://github.com/jasonrudolph) from [atom/line-ending-selector#53](https://github.com/atom/line-ending-selector/issues/53).*",enhancement
Intelligent defaults based on mimetype,"*@mcandre commented on Feb 25, 2018, 3:08 AM UTC:*

The current settings menu for line-ending-selector is fairly flexible, allowing users to default to either UNIX-style LF line endings, or Windows-style CRLF line endings for new text files. However, I think we can do better:

*   Regardless of default line-ending value, start new UNIX-specific files in LF mode (`*.sh`, `*.bash`, `.profile`, etc.)
*   Regardless of default line-ending value, start new Windows-specific files in CRLF mode (`*.bat`, `*.cmd`, `*.ps1`, `*.vbs`, `*.cs`, `*.fs`, etc.)

This way, users can be sure to use an appropriate line ending format for critical file types, while using their preferential default of LF/CRLF for non-specific files (`*.txt`, `*.md`, `*.py`, etc.)

*This issue was moved by [jasonrudolph](https://github.com/jasonrudolph) from [atom/line-ending-selector#54](https://github.com/atom/line-ending-selector/issues/54).*",enhancement
Allow Normalize File EOL's On Save,"*@NodeJoSe commented on Nov 18, 2016, 6:11 AM UTC:*

Hello! im having some trouble with atom-beautify changing my line ending format from lf to crlf and vice versa, depending if im using jsbeautify or prettydiff.

I managed to solve the issue by using ""Normalize File EOL's On Save"" feature of the ""line-ending-converter"" package, but that package is not maintained because we have line ending selector now :)

We should add this feature on the line-ending-selector package!

*This issue was moved by [jasonrudolph](https://github.com/jasonrudolph) from [atom/line-ending-selector#36](https://github.com/atom/line-ending-selector/issues/36).*",enhancement
Allow converting line endings for multiple files in project,"*@RichyHBM commented on Oct 31, 2016, 9:24 PM UTC:*

It would be great to have the ability to convert files from the project side-view, maybe by right clicking on the file and selecting ""convert line endings""?
If you were to do so on a file the default behaviour could happen, opening the file in the editor view and changing the endings without saving. But doing so on a folder should prompt the line ending to convert all files bellow that folder to; this could then auto save or, batch open all the files in editor and convert the endings without saving (the user could then click on close alll and hit save for all of the files)

*This issue was moved by [jasonrudolph](https://github.com/jasonrudolph) from [atom/line-ending-selector#34](https://github.com/atom/line-ending-selector/issues/34).*",enhancement
Wrong suggested title for opening a new issue,"_From @mik01aj on February 6, 2015 15:26_

Deprecation warning looks like this:

![screenshot 2015-02-06 16 22 15](https://cloud.githubusercontent.com/assets/3027415/6081782/838956b4-ae1c-11e4-8986-1f49594f38f5.png)

But when I click on the link, I see:

![screenshot 2015-02-06 16 24 12](https://cloud.githubusercontent.com/assets/3027415/6081807/af89069c-ae1c-11e4-9f79-963e2dcacf8e.png)


_Copied from original issue: atom/deprecation-cop#30_",bug
Change Report Issue button to reflect current status of the deprecation,"_From @eboracus on July 17, 2015 18:31_

It would be nice if the report issue button behaved similarly to the Uncaught Error notification's report issue button. So if the error/issue has already been reported the button changes visually to inform the user, and they know it's not necessary to go and report it.

The button could still link through to the logged issue's page as it does now, but just give the information to the user without them having to click and open up the link to find out.

![depcop_report_issue](https://cloud.githubusercontent.com/assets/11758299/8754208/c2983b06-2cb9-11e5-9001-f9e957e6f352.png)
This is how it currently looks for a deprecation that has already been reported.


_Copied from original issue: atom/deprecation-cop#61_",enhancement
grammar reload,"_From @MasseGuillaume on July 31, 2014 17:23_

can we find a way to merge this ?

https://github.com/MasseGuillaume/atom-live-grammar-reload


_Copied from original issue: atom/dev-live-reload#6_",enhancement
Does not work on Linux (duplicate handles),"_From @varemenos on May 23, 2015 22:56_

This doesn't actually initialize a livereload watcher, does it?
It's just a shortcut to refresh the UI, correct?


_Copied from original issue: atom/dev-live-reload#17_",bug
Package name and command misleading,"_From @MartinMuzatko on April 14, 2016 9:39_

I used this dev-live-reload in the hope of it being able to live reload my changes to core packages (coffescript) when in `atom -d` mode.

![image](https://cloud.githubusercontent.com/assets/2950505/14523724/77248470-0235-11e6-908b-c2116d8f818f.png)

Please rename `Dev Live Reload: Reload All` to `Dev Live Reload: Reload All Styles`.

So I thought that this: 
![image](https://cloud.githubusercontent.com/assets/2950505/14523775/b5bf0962-0235-11e6-9b9f-1b82be51244f.png)
and the package are related.


_Copied from original issue: atom/dev-live-reload#21_",enhancement
Live reload in dev mode fails when multiple files are symlinks to the same path.,"_From @p0lm on April 17, 2017 23:16_

<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
When multiple files within the same project are symlinks to an identical path, dev live no longer works.

### Steps to Reproduce

1. Create a new project.
2. Create a new file. 
3. Create 2 symlinks to the original file.
4. Open Atom in developer mode.

**Expected behavior:** Live reload on edit of either the original file, or when opened via the symlink.

**Actual behavior:** No live reload. Trace below:

```
The handle(20) returned by watching /path/to/second-symlink is the same with an already watched path(/path/to/first-symlink)

HandleWatcher.start	@	main.js:91
HandleWatcher	@	main.js:20
PathWatcher	@	main.js:140
exports.watch	@	main.js:234
module.exports.File.subscribeToNativeChangeEvents	@	file.js:598
module.exports.File.willAddSubscription	@	file.js:107
(anonymous function)	@	file.js:3
module.exports.File.onDidChange	@	file.js:86
module.exports.TextBuffer.subscribeToFile	@	text-buffer.js:1272
module.exports.TextBuffer.setPath	@	text-buffer.js:317
TextBuffer	@	text-buffer.js:122
module.exports.Project.buildBuffer	@	project.coffee:385
module.exports.Project.bufferForPath	@	project.coffee:364
openTextFile	@	workspace.js:719
openURIInPane	@	workspace.js:624
open	@	workspace.js:556
module.exports.TreeView.openAfterPromise	@	tree-view.coffee:246
module.exports.TreeView.fileViewEntryClicked	@	tree-view.coffee:240
module.exports.TreeView.entryClicked	@	tree-view.coffee:228
(anonymous function)	@	tree-view.coffee:100
```

**Reproduces how often:** 100%

### Versions
Linux Mint 18.1 Cinnamon - Atom 1.16.0 development mode.

_Copied from original issue: atom/dev-live-reload#25_",bug
Report browser process exceptions,"_From @kevinsawicki on October 18, 2013 1:8_

Figure out a way to report these since they can be just as bad as render process exceptions.


_Copied from original issue: atom/exception-reporting#2_",enhancement
Collect recent errors and make them available,"_From @kevinsawicki on August 14, 2014 1:6_

Currently when the dev tools pops up it only shows the top of the stack for the errors that were logged.

This can make it hard to tell which package caused it and you have to do the whole open the dev tools first, reproduce the error, get the stack dance.

So start collecting the last 10 or so and make the log-able from dev tools using something like `printRecentErrors()`.

This method could even check the stack and tell you which package it came from by looking for `~/.atom/packages` in the stack.


_Copied from original issue: atom/exception-reporting#10_",enhancement
Request: Indicate that package is looking for existing issue,"_From @tairun on September 26, 2015 15:6_

I think its really cool, that the package checks if there is already an open issue on github. But the default button says **Report Error** and if you click it and the issue was in fact already reported, nothing happens. A good 2-3 seconds later the button changes to **View Issue**. I would appreciate it, if there was a visual indicator, that atom is searching online.


_Copied from original issue: atom/exception-reporting#16_",enhancement
Exception when non-Error thrown,"_From @peterhal on May 24, 2016 18:3_

parseStackTrace attempts to use the thrown value as a key in the StackTraceCache WeakMap.

WeakMap keys must be Objects, while non-Objects may be thrown. If a non-Object is thrown the following stack trace is generated:

```
Error reporting uncaught exception TypeError: Invalid value used as weak map key
  at WeakMap.set (native)
  at parseStackTrace (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/exception-reporting/lib/reporter.js:115:23)
  at shouldReport (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/exception-reporting/lib/reporter.js:102:20)
  at Object.exports.reportUncaughtException (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/exception-reporting/lib/reporter.js:169:10)
  at /Applications/Atom.app/Contents/Resources/app.asar/node_modules/exception-reporting/lib/main.js:21:27
  at Function.module.exports.Emitter.simpleDispatch (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:25:14)
  at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:125:28)
  at /Applications/Atom.app/Contents/Resources/app.asar/src/atom-environment.js:832:32
```

_Copied from original issue: atom/exception-reporting#19_",bug
Fails to report error when stacktrace includes core JavaScript API,"_From @jasonrudolph on April 10, 2018 20:54_

### Description

When an exception occurs, and the stacktrace includes a core JavaScript API, the exception-reporting package fails to report the exception to bugsnag. For example, the stacktrace below involves an exception in the fuzzy-finder package, and the stacktrace includes a call to `Array.forEach`:

```
     ~/github/fuzzy-finder/lib/main.js:81 Uncaught Error
         at forEach (/Users/j/github/fuzzy-finder/lib/main.js:81:31)
===>     at Array.forEach (native)     <===
         at Object.createProjectView (/Users/j/github/fuzzy-finder/lib/main.js:81:9)
         at HTMLElement.fuzzy-finder:toggle-file-finder (/Users/j/github/fuzzy-finder/lib/main.js:12:14)
         at CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:384:49)
         at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent      (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:621:22)
         at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent      (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:412:28)
         at WindowEventHandler.handleDocumentKeyEvent (/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:110:40)
```

When the exception-reporting package [attempts to normalize the paths in the stacktrace](https://github.com/atom/exception-reporting/blob/06b51ec2f8db4753c9ffc9ad6360061939ac32d5/lib/reporter.js#L70-L86), the package errors when it encounters `Array.forEach` in the stacktrace. Instead of reporting the exception to bugsnag, the package logs an error to the console:

```
Error reporting uncaught exception TypeError: Cannot read property 'replace' of null
    at Reporter.normalizePath (~/github/exception-reporting/lib/reporter.js:71:27)
    at Reporter.scrubPath (~/github/exception-reporting/lib/reporter.js:77:31)
    at ~/github/exception-reporting/lib/reporter.js:61:20
    at Array.map (native)
    at Reporter.buildStackTraceJSON (~/github/exception-reporting/lib/reporter.js:59:40)
    at Reporter.buildExceptionJSON (~/github/exception-reporting/lib/reporter.js:54:24)
    at Reporter.buildNotificationJSON (~/github/exception-reporting/lib/reporter.js:33:27)
    at Reporter.reportUncaughtException (~/github/exception-reporting/lib/reporter.js:229:30)
    at ~/github/atom/out/app/node_modules/exception-reporting/lib/main.js:25:23
    at Function.module.exports.Emitter.simpleDispatch (/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:25:20)
    at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:141:34)
    at window.onerror (/Applications/Atom.app/Contents/Resources/app/src/atom-environment.js:949:26)
    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:621:22)
    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:412:28)
    at WindowEventHandler.handleDocumentKeyEvent (/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:110:40)
```

### Steps to Reproduce

1. Clone the repository for another bundled package and `apm link` it. We'll use fuzzy-finder for this example:
    1. `git clone atom/fuzzy-finder`
    1. `cd fuzzy-finder`
    1. `git checkout v1.8.1`
    1. `apm install && apm link`
1. In the fuzzy-finder code, edit `main.js` to trigger an error that has a core JavaScript API in the stacktrace:
    ```diff
    --- a/lib/main.js
    +++ b/lib/main.js
    @@ -78,6 +78,8 @@ module.exports = {
       },

       createProjectView () {
    +    [0].forEach(() => { throw new Error('whoops') })
    +
         this.stopLoadPathsTask()

         if (this.projectView == null) {
    ```
1. Clone the atom/exception-reporting repository and `apm link` the package:
    1. `git clone atom/exception-reporting`
    1. `cd exception-reporting`
    1. `git checkout v0.43.1`
    1. `apm install && apm link`
1. In the exception-reporting code, edit `lib/reporter.js` so that it will treat our local copy of fuzzy-finder as a bundled package for error reporting purposes:
    ```diff
    --- a/lib/reporter.js
    +++ b/lib/reporter.js
    @@ -253,7 +253,7 @@ export default class Reporter {
       }

       isBundledFile (fileName) {
    -    return this.normalizePath(fileName).indexOf(this.resourcePath) === 0
    +    return true
       }

       isTeletypeFile (fileName) {
    ```
1. Open Atom
1. Trigger the `Fuzzy Finder: Toggle File Finder` command to force the error above to be thrown

**Expected behavior:** Error should be successfully posted to bugsnag

**Actual behavior:** Error is not reported to bugsnag

**Reproduces how often:** 100%

### Versions

exception-reporting 0.43.1

```
$ atom --version
Atom    : 1.27.0-dev-6dd878d
Electron: 1.7.11
Chrome  : 58.0.3029.110
Node    : 7.9.0
```

---

/cc @as-cii (since we encountered this issue while pairing today)

_Copied from original issue: atom/exception-reporting#40_",bug
Use wrap-guide's column length if it differs from editor's preferred line length,"_From @jasonrudolph on December 26, 2013 21:49_

When the [wrap-guide settings](https://github.com/atom/wrap-guide/blob/4ffdee199951398f5953fe575dfa3c777e0cdbc0/docs/index.md#configuration) differ from the `editor.preferredLineLength` setting, it would be awesome if the autoflow package used the wrap-guide settings to determine the line length.
#### Example Use Case

For most files, I prefer a line length of 80 characters. So, I have `editor.preferredLineLength` set to `80`.

But for Git commit messages, [72 characters is a better choice](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html). To help me stick to that guideline, I have a [custom `wrap-guide` setting](https://github.com/atom/wrap-guide/blob/4ffdee199951398f5953fe575dfa3c777e0cdbc0/docs/index.md#configuration) for commit messages:

``` cson
'wrap-guide':
  'columns': [
    {
      'pattern': 'COMMIT_EDITMSG'
      'column': 72
    }
```

I'd love to be able to reflow a commit message to 72 characters. Currently, when you reflow a paragraph, it uses `editor.preferredLineLength` to determine the line length.

The gif below demonstrates the current behavior. Note the wrap-guide at 72 characters, and the reflow wrap at 80 characters:

![autoflow-demo](https://f.cloud.github.com/assets/2988/1812282/7fce0bba-6e75-11e3-86cc-0daca6ed4b33.gif)

In my case, the commit message gets reflowed at 80 characters instead of 72. It would be awesome if it wrapped at 72 characters.

---

Note: I'm not sure whether we would want the autoflow package to have a dependency on the wrap-guide package. (Seems kinda weird.) Maybe these two packages should be combined?


_Copied from original issue: atom/autoflow#2_",enhancement
Reflow multiple paragraphs,"_From @ahti on March 2, 2014 15:45_

It's not currently possible to reflow multiple paragraphs at once.
- When multiple cursors are placed, only the paragraph containing the first cursor is reflowed.
- When text is selected across multiple paragraphs, only the paragraph containing the beginning of the selection is reflowed.

I think in these cases the expected behaviour would be to reflow every paragraph that contains a cursor or is part of the selection.

Additionally, I think a separate command for reflowing the whole buffer would be useful.


_Copied from original issue: atom/autoflow#6_",enhancement
"""Auto-reflow"" on editing","_From @ahti on March 2, 2014 15:48_

I think it might be useful to have an option to reflow paragraphs after every edit (typing, insertion, deletion, ...), so the user doesn't need to remember to reflow his buffer after writing.

Because this might not make sense for every kind of document, I think it would be reasonable to allow the user to select on which document kinds (identified by their grammar) this feature should be enabled.


_Copied from original issue: atom/autoflow#7_",enhancement
reflowing JSdoc fails,"_From @slang800 on May 8, 2014 19:20_

``` coffee
###*
 * Constructor, options are passed in from the cli tool or manually when using nsync as a library.
 * By default, it just sets schema properties that all transports use.
 * @param {[type]} options [description]
 * @return {[type]} [description]
 * @extend
###
```

get's reflowed into this:

``` coffee
###*
 * Constructor, options are passed in from the cli tool or manually when using
 * nsync as a library. By default, it just sets schema properties that all
 * transports use. @param {[type]} options [description] @return {[type]}
 * [description] @extend
###
```

...which is pretty clearly wrong. It would be great if autoflow had the same behavior as ST2's [wrap-plus](https://github.com/ehuss/Sublime-Wrap-Plus) package, which reflows to look like this:

``` coffee
###*
 * Constructor, options are passed in from the cli tool or manually when using
   nsync as a library.
 * By default, it just sets schema properties that all transports use.
 * @param {[type]} options [description]
 * @return {[type]} [description]
 * @extend
###
```


_Copied from original issue: atom/autoflow#9_",enhancement
Markdown links are broken on reflow,"_From @lee-dohm on July 20, 2014 0:16_

See the Discuss topic that led to this: http://discuss.atom.io/t/make-reflow-selection-markdown-aware/10995

Markdown hyperlinks can be broken by inserting a line break in between the label and the link address, like so:

![screen shot 2014-07-19 at 5 05 43 pm](https://cloud.githubusercontent.com/assets/1038121/3636138/1ee3f3ee-0fa3-11e4-8ab3-7907411df46d.png)


_Copied from original issue: atom/autoflow#11_",bug
Latex comments broken on reflow selection,"_From @fbrundu on July 31, 2014 18:47_

Hi,
I have not a gif but this issue is easily reproducible. 

When I comment a long line with Latex (comment starts with `%`) and then run reflow selection, the comment is truncated (reflown) but only the first part is commented. The following new lines are not commented.

I tested only Latex but maybe this issue affects other languages as well.

Thanks


_Copied from original issue: atom/autoflow#12_",bug
Autoflow does not play well with comments,"_From @archer884 on April 18, 2015 1:53_

Code and comment before reflow:

```
/// `DiceResult` is a vector of unsigned integers.
///
/// `DiceResult` wraps a vector of unsigned integers, allowing us to implement specialized
/// formatting functions for dice roll results.
pub struct DiceResult(Vec<u32>);
```

Code and comment after reflow (did not select code for reflow operation; just including it for reference):

```
    /// `DiceResult` is a vector of unsigned integers.
     ///
     /// `DiceResult` wraps a vector of
/// unsigned integers, allowing us to implement specialized
     /// formatting functions for dice
/// roll results.
    pub struct DiceResult(Vec<u32>);
```

Entertainingly enough, this operation has actually inserted tabs in places. I, of course, have opted to use spaces instead of tabs in the settings menu.


_Copied from original issue: atom/autoflow#23_",bug
Reflow selection breaks indentation,"_From @izuzak on July 1, 2015 10:56_

_From @danbim on July 1, 2015 10:1_

If I have a block of text indented and I use the ""reflow selection"" command (cmd+alt+q on Mac) the resulting text block will only keep the intended indentation in the first line but lose it in the following lines. While for some file types this might be the correct behaviour, IMO for many others it's not. Therefore ""reflow selection"" is unusable for my source code.

![screen shot 2015-07-01 at 11 57 20](https://cloud.githubusercontent.com/assets/300638/8452143/ced99d34-1fe8-11e5-910e-b9e79629aa2a.png)

If the current behaviour is still to be supported I suggest to make this a customizable behaviour, e.g., depending on file type.

_Copied from original issue: atom/atom#7621_


_Copied from original issue: atom/autoflow#31_",enhancement
Autoreflow doesn't take non-breaking space into account,"_From @PaulEcoffet on November 1, 2015 18:12_

If there is a [non-breaking space](https://en.wikipedia.org/wiki/Non-breaking_space) at a breaking point, autoreflow will break it and delete it.

Exemple:
Input:

```
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmo tempor « incididunt ut labore »
                                                                                ^ 81st char and non-breaking space
```

After reflow:

```
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmo tempor «
incididunt ut labore »
```

The non-breaking space has been broken!

Expected:

```
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmo tempor
« incididunt ut labore »
```

The non-breaking space should not be broken


_Copied from original issue: atom/autoflow#38_",enhancement
Cannot autoflow JSDoc comments,"_From @onury on June 12, 2016 18:6_

``` js
/**
 * Atom autoflow test. Cannot autoflow JSDoc comments.
 *
 * @readonly
 * @private
 */
```

this is autolowed into this :(

``` js
/**
 /** /** * Atom autoflow test. Cannot autoflow JSDoc comments. * * @readonly * /**
/**
 @private */
```

Atom v1.8.0
Mac OS X 10.11.5


_Copied from original issue: atom/autoflow#52_",bug
Reflow jumbles separate lines together,"_From @joallard on October 18, 2016 12:39_

This is following burodepeper/language-markdown#144. I searched briefly if the issue was already existing, sorry if it's a dupe.

---

To be clear, this happens when the heading and paragraph are not separated by an empty line.

``` gherkin
Given I have markdown
  """"""
  ## Oh how headers are useful
  This is a paragraph with some text that will make it go over the line of 80 characters. It is a paragraph, and we want it to be separate from the heading.
  """"""
And I put the caret between ""This"" and ""is""
When I invoke Reflow (Alt-Cmd-Q)
Then only the paragraph should be reflown
```

Actual:

``` md
## Oh how headers are useful This is a paragraph with some text that will make
## it go over the line of 80 characters. It is a paragraph, and we want it to be
## separate from the heading.
```


_Copied from original issue: atom/autoflow#53_",bug
Add support for .editorconfig file,"_From @terrycloth on March 13, 2017 22:27_

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

[EditorConfig](http://editorconfig.org/) is an attempt at standardizing certain configurations across text/code editors, to help keep things consistent, no matter who is editing the file or with what program. You can configure [settings](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties) for a whole project, a directory, or specific files matched using globbing patterns, with rules set in standard INI format.

In particular, I think it would be helpful if Autoflow followed the `max_line_length` directive, which defines what *should* be the maximum number of characters per line. EditorConfig currently only uses the value here to set the placement of a visual text wrapping guide --- i.e., a *hint*, rather than forcing hard-wrap. However, I think ""maximum line length"" is semantically related enough that it would make sense for Autoflow to use this directive when determining how to rewrap text in the current context.


### Versions

* Fedora 25 Workstation x86_64
* Atom 1.15.0
* Autoflow 0.29.0
* Electron 1.3.13
* Chrome 52.0.2743.82
* Node 6.5.0
* apm  1.13.0
* npm  3.10.10
* node 6.9.5
* python 2.7.13
* git 2.9.3

_Copied from original issue: atom/autoflow#58_",enhancement
Symlinks within repository now breaking git-diff,"_From @lucascosti on February 10, 2017 3:40_

<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I have a repo that contain symlinks to other places within the same repo. eg

````
repo/
└── docs/
       ├── topics/
       └── InstallGuide/
               └── topics/ -> ../topics/
````

`repo/docs/InstallGuide/topics` is a symlink to `repo/docs/topics`.

If I open a file from within the symlinked directory (`repo/docs/InstallGuide/topics`), then git-diff line marking in the gutter for that file no longer works.

If I open the file from `repo/docs/topics`, git-diff line marking in the gutter does work.

I'm not sure when it started breaking, but I think it was after I installed 1.14.0. I don't think this is the same issue as #91, as this directory structure has been working fine with git-diff until this week. 

### Versions

OS is Fedora 24.

$ atom --version
Atom    : 1.14.1
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

$ apm --version
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.13
git 2.7.4

_Copied from original issue: atom/git-diff#124_",bug
CRLF showing as changes when git commits them in LF ,"_From @matthieuheitz on November 24, 2016 8:53_

I have a file with CRLFs.
I use the git setting that automatically takes care of it, and commits files with LF instead of CRLF.
When I type git diff on that file, I don't see any changes.
Whereas in the Atom Minimap, all the lines are orange, except for the last one.
This makes it impossible to properly use this package since all lines have changes.

Maybe this package should not consider the CRLF instead of LF as a change.
What do you think ?

I already submitted this issue [here](https://github.com/atom-minimap/minimap-git-diff/issues/25#issuecomment-260886624), and they directed me here.

_Copied from original issue: atom/git-diff#116_",bug
Provide option to ignore EOL whitespace,"_From @lijunle on June 18, 2016 9:8_

[Repository.getLineDiffs](https://github.com/atom/git-utils/blob/7c6c2fd5650233d0e5d4bdee80f04f574ed5ff83/README.md#repositorygetlinediffspath-text-options) provides an option to ignoreEOLWhitespace, however it is not passed in [the code](https://github.com/atom/git-diff/blob/1f73deb3020b26e8e6578db89ccd76045060bd23/lib/git-diff-view.coffee#L103). Could you please add it as an option?


_Copied from original issue: atom/git-diff#102_",enhancement
Deletion mark in gutter is partially covered when the mark's bottom row is selected,"_From @izuzak on August 22, 2015 7:46_

In the GIF below, something was deleted between row 16 and 17, so the icon is shown. Notice how when I click in the gutter for row 16 the upper part of the triangle is still visible, but when I click in the gutter for row 17 the lower part of the triangle is no longer visible.

![gutter](https://cloud.githubusercontent.com/assets/38924/9423029/e79a1258-48b1-11e5-9baa-9ee16f9a7dc2.gif)

Atom 1.0.8-a87dd05 in safe mode, on OSX.

Some :pager:: @simurai @as-cii @nathansobo 


_Copied from original issue: atom/git-diff#71_",bug
Diff lines only change on window focus after commit,"_From @DepthDeluxe on July 7, 2014 21:29_

Minor issue but it would be nice if when a user committed files, line diffs were automatically updated as opposed to updating when the window is refocused.

i.e. when I change a line and then commit that change, atom still thinks the line is different than `HEAD` until refocusing the editor.


_Copied from original issue: atom/git-diff#28_",bug
Close icon re-appears after drag-dropping a tab,"_From @chbk on October 1, 2017 2:7_

one-dark-ui 1.10.6 on atom 1.20.1

![tabs](https://user-images.githubusercontent.com/7478535/31051006-4957f126-a65d-11e7-9086-92fc576303eb.gif)

Drag tab C, drop it on tab B, B takes C's place and its close icon appears.

_Copied from original issue: atom/one-dark-ui#221_",bug
Atom's UX problems,"## Summary

Here a few UX problems that aren't really bugs nor feature requests, but can still negatively impact a user's experience. I'll keep adding more when something comes to mind. Also feel free to comment below, but keep in mind that this issue is not meant to brainstorm solutions and only focuses on the problems first. If we want to improve something, an RFC should be proposed.

---

## Can't quickly switch projects

When wanting to switch to another project, Atom opens a new window which takes a while. And you also have to close the current window. Also, the new window size and placement could be different and might need adjustment. 

**Workaround**:

- You could re-use the same window by removing and adding root folders in the tree-view, but that feels tedious.
- Use packages like [project-plus](https://atom.io/packages/project-plus), [project-jump](https://atom.io/packages/project-jump), [project-switcher2](https://atom.io/packages/project-switcher2)

## No way to limit the scope to a single root project

When having multiple root projects, find and replace or fuzzy finder always search in all projects. But sometimes you might want some projects not to be ""active"" and just use as reference. Similar issue: [https://github.com/atom/github/issues/1676](https://github.com/atom/github/issues/1676)

**Workaround**: Temporarily remove and then after the search, add the removed projects back again.

## Autocomplete is not auto enough

When Autocomplete shows several options, the order is chronological. If the option you want is not near the top, you have to spell it out or use the arrow key many times.

**Workaround**: None.

## Slow settings for Packages/Themes and Updates

It usually takes several seconds until the list of packages/themes is shown. Or when showing in the Status Bar that there are new updates available, it still takes a long time until the updates show up in the settings.

**Workaround**: Install [package-settings](https://atom.io/packages/package-settings) to open a package's settings directly.

## Package discovery is hard to find in the settings

People instinctively go to `Settings > Packages` and then start to type to search for a package, not realizing that they have to go to `Settings > Install`. This came up in the past https://github.com/atom/settings-view/issues/825, but hasn't gotten enough priority.

**Workaround**: Use `apm install package-name`.

## It's hard to know the health of a package

There are many packages that are abandoned and not maintained anymore. They are either broken or have bugs that make it less usable. But it's hard to know before installing a package and trying it out.

**Workaround**: Go to the repo to check a package's ""health"".

## Command palette could get over-polluted.

Because there are quite a few commands, more when installing a lot of packages, it becomes hard to use commands without spelling them out.

**Workaround**: Remove packages so they don't pollute the list, use a keymap or install the [tool-bar](https://atom.io/packages/tool-bar) package.

## Some functionality is hard to discover

For example the GitHub package has a dock item with current and open PRs, but it's hard to discover that this exists. See this [issue](https://github.com/atom/github/issues/1573)

**Workaround:**

- Look through `Menu > Packages`
- Look through command palette
- Package authors could add a button to the Status Bar, although the Status Bar shouldn't be (mis-)used as a navigation

## Package authors need to build their own UI

Atom provides some UI components like select-list, tooltip, mini-editor and there are also some CSS-only components in the [Styleguide](https://github.com/atom/styleguide/) like button, checkbox, inputs etc. But otherwise package authors need to build everything themselves. It's great to have the freedom, but it's also a lot of extra work and consistency lacks between all the packages.

**Workaround**: Package authors could use a 3rd party UI library.
",enhancement
"""check for updates"" button for Linux","_From @pedzed on October 13, 2016 17:55_

On Windows and macOS you have a button to update Atom to the latest version. It would be nice if Linux also had that. If the update functionality will not be implemented (anytime soon), it would be nice if there's a button that tells you if an update is available - just so you know that your version is outdated. And perhaps also instructions on how to update.

Currently, you have to check at https://github.com/atom/atom/releases to see if there is a newer version. Understandably, that is far from ideal.


_Copied from original issue: atom/about#38_",enhancement
About package does not disable cleanly,"_From @Ben3eeE on April 6, 2016 21:17_

### Prerequisites
- [X] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode)?
- [X] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [X] Did you check the [debugging guide](flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [X] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [X] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [X] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

Disabling about package has some issues. Application:about command still exists in palette and help menu and executing it opens a weird atom:\about file that causes atom to hang when saving it.

Same issue different package: https://github.com/atom/settings-view/issues/764
### Steps to Reproduce
1. Open atom
2. Disable about
3. (optional) Restart atom
4. Run application:about from command palette or help menu.

**Expected behavior:** Nothing or some default very basic atom/core about to show.

**Actual behavior:** Weird non existing file opens that causes atom to hang when saving.
### Versions

1.6.X
Windows 7.


_Copied from original issue: atom/about#22_",bug
Warn if using a git package with an unsupported version of Atom,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When a package is installed from a git repository Atom doesn't check the [`engines`](https://docs.npmjs.com/files/package.json#engines) field in `package.json`. Atom should at least warn the user that their version of atom is not supported by that package, or wouldn't allow the package to be enabled/updated/installed like with regular community packages.

### Steps to Reproduce

1. Install a git package that doesn't support your version of atom. I have set up a package called [`test-engines-package`](https://atom.io/packages/test-engines-package) for this situation at https://github.com/UziTech/test-engines-package

**Expected behavior:** [What you expect to happen]

Somewhere Atom should warn that this package does not support this version of Atom

**Actual behavior:** [What actually happens]

Nothing. The package installs just fine.

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

Atom    : 1.27.0-beta1
Electron: 1.7.11
Chrome  : 58.0.3029.110
Node    : 7.9.0

apm  1.19.0
npm  3.10.10
node 6.9.5 x64
atom 1.27.0-beta1
python 2.7.14
git 2.17.0.windows.1
visual studio 2015

### Additional Information

resubmitted from #14222
",enhancement
Dock Bug: Crossing dock toggle with drag and drop breaks dock positioning,"### Prerequisites
* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: Attempted. None of the directions to enter safe mode or attempts to work around them worked. Might because this computer is running beta and there is a space in the file name (but everything from atom to 'Atom\ Beta' errors when executing from within the Contents/MacOS/ folder).
    * Followed all applicable steps in the debugging guide: 
    * Checked the FAQs on the message board for common solutions: N/A
    * Checked that your issue isn't already filed: None found.
    * Checked that there is not already an Atom package that provides the described functionality: N/A

### Description
Dragging a file from the finder so the mouse path crosses the dock toggle of a closed left dock (tree-view pane) triggers the dock toggle, but does not redraw the rest of the window to accommodate the pop-out.

### Steps to Reproduce
(Note: I have vertical tabs and tree-view enabled.)
1. With Atom open and the tree-view pane closed, open file manager/finder to the left of the window.
2. Drag a file from the file manager/finder to the Atom window so it crosses the toggle control on the closed dock.

**Expected behavior:** [What you expect to happen]
File appears in new tab with no other events triggered.

**Actual behavior:** [What actually happens]
The tree-view pane opens, but the rest of the window does not redraw to accommodate it. Toggling the dock after this moves the rest of the window back and forth as if the dock were toggling but not the dock, which remain open over overlaps the other content in the window.

Only resolved by restarting Atom.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%
Only occurs when dragging and dropping. Just dragging over the window with the left button pressed and nothing selected has no effect.

### Versions
Various. Tested both on Mac (beta) and multiple Windows boxes (current non-beta and older standalone).

### Additional Information
Disabled vertical tabs and toolbar, both to no effect.
Reproducible on bottom dock as well. Nothing docked to right.
Maybe the toggle is looking for a mouse event without checking whether the event occurred over the toggle or entered the toggle after occurring elsewhere? The dev console doesn't show any listeners for the toggle or its immediate parent divs.
<img width=""630"" alt=""dock-open"" src=""https://user-images.githubusercontent.com/1514228/37257058-3346aeac-253a-11e8-8c39-4a33766c80d8.png"">
<img width=""630"" alt=""dock-closed"" src=""https://user-images.githubusercontent.com/1514228/37257060-353ed798-253a-11e8-83a4-38e266b985b3.png"">
",bug
Improve soft-wrapping by breaking words like web browsers,"### Description

Current soft-wrapping behavior is not aggressive enough and sometimes leads to bad results.

### Steps to Reproduce

1. Enable «Soft Wrap» and «Soft Wrap at Preferred Line Length» in «Editor» tab of Settings
2. Copy an URL in a text editor tab or a sequence of non-spaces characters that have more characters than the Preferred Line Length setting

**Expected behavior:**

* Break character sequences on spaces, dashes and slashes, like in a web browser
* Break character sequences at most at the «Preferred Line Length» setting
* Show a grayed out character, like those for EOL or spaces, when Atom break a word that had no spaces in it. Suggestion for default character: broken bar `¦`, which is present in the same Unicode block than  `¤¬»`.

For example, if Preferred Line Length is set to 20, then it should behave like this (`|` character represent the wrap-guide):

```
https://github.com¦ |
/atom/atom/issues¦  |
/new                |
                    |
Averylongword-¦     |
thatshouldbreak     |
                    |
Averylongword-    ¦ |  # four spaces after the dash and we see where it stops
thatshouldbreak     |  # ¦ allows to differentiate with the previous example
                    |
Averylongwordwithnos|¦  # no space, dash or slash in the word
eparator            |
```

**Actual behavior:**

* Character sequences break only on spaces
* If the character sequence doesn’t contain space and fill the whole line, the word is cut at the window edge instead of the expected Preferred Line Length (see screenshot).
![screenshot of current work-wrapping behavior](https://user-images.githubusercontent.com/2446451/37145899-785416b2-22c2-11e8-8229-d8eefa909d57.png)

```
https://github.com/a|tom/atom/issues/new
                    |
Averylongword-thatsh|ouldbreak
                    |
Averylongword-      | # four spaces after the dash but we can’t see it
thatshouldbreak     |
                    |
Averylongwordwithnos|eparator
```

### Versions

```
Arch Linux
Atom    : 1.24.0
Electron: 1.8.2
Chrome  : 59.0.3071.115
Node    : 8.2.1
```",enhancement
Application: Install Update closes the window and breaks the sessions,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
On Windows 10, Running `Application: Install Update` through the command palette closes atom and makes it no longer remember opened tabs and projects.

### Steps to reproduce
1. Open the command palette (ctrl + shift + p)
2. Type: Application Install Update
3. Enter

**Expected behavior:** [Install updates if there are]

**Actual behavior:** [Closes atom and makes it no longer remember opened tabs and projects]

**Reproduces how often:** [The first time you run the command]

### Versions

Atom    : 1.23.3
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0

Windows 10: 
Version: 1709
Build: 16299.192.
",bug
[Regression] Auto indentation fails when moving multiple lines up or down,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
![sigh](https://user-images.githubusercontent.com/490562/34974740-7444f40c-faf3-11e7-844e-63bc8fb1d69a.gif)


### Steps to Reproduce
1. Open a new editor.
1. Set the language grammar to javascript.
1. Type code as in the example, e.g.

```js
    //Create change(s)
    for (const item of items) {
      await mongoose
        .model('Change')
        .create({type, item, timestamp, isDeleted});
    }
```
1. Select from 3 lines from `await` to `  .create({type, item, timestamp, isDeleted});`
![image](https://user-images.githubusercontent.com/5624870/35422236-7da0eb86-01fc-11e8-8ad2-947d707768b9.png)

1. Move the 3 lines selected down by running the `Editor: Move Line Down` command.
1. Observe that auto indentation breaks the indentation.
1. Try the same when moving the code back into the for loop using the Move line up command.

**Expected behavior:** Correct indentation

**Actual behavior:** Incorrect indentation

**Reproduces how often:** 100%

### Versions

Atom    : 1.25.0-dev-390ab7449
Electron: 1.7.10
Chrome  : 58.0.3029.110
Node    : 7.9.0

apm  1.19.0
npm  3.10.10
node 6.9.5 x64
atom 1.25.0-dev-390ab7449
python 2.7.10
git 2.14.1

OS X 10.11.5

### Additional information
See also https://github.com/atom/atom/issues/16556

This is a regression that only started happening in the last month or so in Atom's dev builds.
Are there no tests in place around these kind of indentation actions?",bug
DISPOSE of MENU item not functioning as expected.,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode.
    * Followed all applicable steps in the debugging guide.
    * Checked the FAQs on the message board for common solutions.
    * Checked that your issue isn't already filed.
    * Checked that there is not already an Atom package that provides the described functionality.

<br>

### Description

Tags: API, menu, atom.menu.add(), dispose()

If a menu object is disposed, this object is not disposed properly when one of the object's items is a 'separator`.

Building the object would be with the instruction
`favoritesMenu = atom.menu.add( .. )`

Disposing of the object would be..
`favoritesMenu.dispose()`

<br>

### Steps to Reproduce

1. Open the development console in Atom.
2. Execute code in the console to create a complex menu entry.
`favoritesMenu = atom.menu.add( .. )`
3. Execute code in the console to dispose of the menu entry.
`favoritesMenu.dispose()`

- - - -

#### Scenario1 - Does work
Execute code in the development console...
* Creates menu items as expected.<br>
Notice the `- - - -` item.
```js
favoritesMenu = atom.menu.add ([{
  label: 'Extra',
  submenu : [{
    label: 'Test',
    submenu: [
      {label: 'item1'},
      {label: '- - - - '},
      {label: 'item2'}
    ]
  }]
}])
```

* Dispose all menu items as expected.
```js
favoritesMenu.dispose()
```

- - - -

#### Scenario2 - Does not work
Execute code in the development console...
* Creates menu items as expected.<br>
Notice the `separator` item.
```js
favoritesMenu = atom.menu.add ([{
  label: 'Extra',
  submenu : [{
    label: 'Test',
    submenu: [
      {label: 'item1'},
      {type: 'separator'},
      {label: 'item2'}
    ]
  }]
}])
```

* Attempt to dispose all menu items with unexpected result.
```js
favoritesMenu.dispose()
```
- - - -

**Expected behavior:** [What you expect to happen]
All items are removed from the menu if `dispose()` is executed.

**Actual behavior:** [What actually happens]
Scenario1 occurs as expected. Scenario2 does not work as expected.
Scenario2: Items `item1` and `item2` is removed as expected. however `Extra -> Test -> separator` remains. Restarting Atom brings back normality.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions

* Atom V1.23.2 
* Atom V1.24-beta 2
* Windows 10 Professional

### Additional Information

Originally reported by @gliviu on https://discuss.atom.io/t/menu-refresh-fails-for-separators/51255. @gliviu constructed similar coding in `init.js` which led him to discover the behaviour.


Thanks for your attention.
\- Dan Padric

  ",bug
Prompt for registering as default atom:// protocol handler is unclear,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->


### Description
This is not a code issue, but an UX issue. I personally find this message: 
![image](https://user-images.githubusercontent.com/13496178/34385155-62980656-eb29-11e7-98e3-9eb85af46cb9.png)
unclear. What is a URI handler and why should we now set it on Atom. If you can add an explanation, or an explenation button it would be helpful. 


### Versions
1.23.1 X64
You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.
",enhancement
"Mapping ctrl-tab's key behavior to a different key, key doesn't work the same as ctrl-tab does","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Default `ctrl-tab` key does `pane:show-next-recently-used-item`. I would like 
`ctrl-pagedown` to do the same. but even after I mapped `ctrl-pagedown` to act the same-
Using `ctrl-tab` works smoothly but using `ctrl-pagedown` is glitchly.
They should be acting the same but for some unknown reason they don't...

### Steps to Reproduce

1. Map `ctrl-pagedown` key as `ctrl-tab`:
open `keymap.cjson`, type:

```
'body':
  'ctrl-pagedown': 'pane:show-next-recently-used-item',
  'ctrl-pagedown ^ctrl': 'pane:move-active-item-to-top-of-stack'
```
Save `keymap.cjson` file.
2.  Have at least 2 open tabs: call it `tab1`, `tab2`, edit both, finish at `tab1`.
3.1 scenario:
go to `tab1`
Hold `ctrl`, type `pagedown` **once**, wait 10 secs (3 secs should do it), release `ctrl`
OR
3.2 scenario:
Hold `ctrl`, type `pagedown` several times **fast** , to move between the open files (in popup, see image below), 

**Expected behavior:** 
Switching **smoothly** between the open files in the popup screen.
Just use the default keys to see _Expected behavior_:
3.1 scenario:
After releasing of `ctrl`, it should switch from `tab1` to `tab2`

3.2 scenario:
Hold `ctrl`, type `tab` several times **fast** , and see how it works **smoothly**, like it should.
The files in popup (open by the first `ctrl-tab`) are being switched quickly.


**Actual behavior:** 
3.1 scenario:
After releasing of `ctrl` (after waiting 10 secs), not switching from `tab1` to `tab2`, staying in same tab: `tab1`
3.2 scenario:
Switching **glitchly** between the open files in the popup screen.
(If you type `pagedown` fast enough) You need to click `pagedown` 2 times (instead of once) for it to switch a single file in popup.


**Reproduces how often:**
100%, All the time.
### Versions
`win 10 pro`
```
    Atom    : 1.22.1
    Electron: 1.6.15
    Chrome  : 56.0.2924.87
    Node    : 7.4.0
```

### Additional Information
Glitch **only** occur **when you click fast enough (or to be more accurate: not slow enough)**
If you hold`ctrl` then click -`pagedown` wait 3 secs, click `pagedown`, wait 3 secs- It will kinda work.
Just try it- easy to see once you try it. It works **differently** for some reason, not like the default `ctrl-tab`. 

Popup displaying used flies:
![image](https://user-images.githubusercontent.com/3532929/33127609-c9d0cc76-cf91-11e7-81d2-dfc0b17bcdef.png)",bug
[Bug] text re-rendering on save,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    *  Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * [x] Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * [x] Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * [x] Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * [x] Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When I hit `Cmd + S` to save some text i just changed, folded text above the current line is sometimes re-rendered to the right of what is already there. 

### Steps to Reproduce

1. Collapse several functions/methods, and then make a change on a line below the collapsed lines.
2. Hit `Cmd + S` to save, and see text re-rendered

**Expected behavior:**

No re-rendering

**Actual behavior:**

re-rendering

**Reproduces how often:** 

Approximately 75% of the time

### Versions

```
Atom    : 1.21.0
Electron: 1.6.9
Chrome  : 56.0.2924.87
Node    : 7.4.0
```

### Additional Information

![copy_bug](https://user-images.githubusercontent.com/2036040/32116289-09c68804-bb18-11e7-8307-4bf2ab06a0f1.gif)

/cc @maxbrunsfeld ",bug
[BUG] Fix resize behaviour when soft wrapping is enabled,"
### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When soft wrap is enabled, resizing the window with a long file causes your current position in the file to be lost. This is because Atom seems to keep the viewport at a fixed position from the top of the file during a resize, causing the file content to be pushed down (by the addition of new soft wrap lines) and your current position in the file being lost.

Why is this feature important? Here are two common use cases where this issue occurs:

- Opening/closing a vertical split
- Toggling the tree view

### Steps to Reproduce

1. Enable soft wrapping (`preferences -> editor -> soft wrap`)
2. Open a long file and navigate to a position a decent way down the file (in my example below the file is 1000 lines long and I have the cursor on line 878)
3. Resize the window and observe your current position in the file being pushed down below the viewport

**Expected behavior:** [What you expect to happen]

When a tab is resized, your current position in the file should stay visible within the viewport instead of being push down below the viewport due to the addition of soft tab lines.

This expected behaviour is the default behaviour in both VS Code and in Vim (maybe in other editors as well, they are the only two I tested).

Here is an example of the expected behaviour, in VS Code:

![gif_vscode](https://user-images.githubusercontent.com/3773641/31256183-a5f9b176-aa7c-11e7-9b96-7793a05ac7e9.gif)

**Actual behavior:** [What actually happens]

When a tab is resized, the current position in the file is pushed down below the viewport by the extra soft wrapped lines being added to the file. This results in you losing your place in a file everytime you open a vertical split, toggle the tree view, etc.  Here is an example of this, using the same file and line number from the VS Code example above:

![gif_atom](https://user-images.githubusercontent.com/3773641/31256196-b3106ecc-aa7c-11e7-8eea-0cac38d5b8b0.gif)

**Reproduces how often:** [What percentage of the time does it reproduce?]

100% of the time this is reproducable

### Versions

apm: 1.18.5
 Atom: 1.21.0 
OS: MacOS Sierra 10.12.3 

",bug
Atom does not remember last-opened state if a spec window is closed last,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When a normal Atom window as well as an Atom spec window are open, closing the spec window last results in Atom attempting to save the state of the spec window rather than the actual project window.  Spec windows should probably be ignored when saving state.

### Steps to Reproduce

1. Open any project
2. Run specs using the GUI
3. Close the project window
4. Close the specs window
5. `atom` in terminal

**Expected behavior:** The project from step 1 to be reopened

**Actual behavior:** Atom appears un-maximized (same dimensions as the spec window) and with no project state.

**Reproduces how often:** 100%

### Versions

```
Atom    : 1.23.0-dev-c30cc9bc8
Electron: 1.6.9
Chrome  : 56.0.2924.87
Node    : 7.4.0
```

### Additional Information

This may be harder to reproduce on macOS due to its special Quit behavior.",bug
Revert buffer / Revert to saved / Refresh from source,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

[`revert-buffer` package](https://github.com/atom/revert-buffer/issues/3) should be rolled into core.  This package has zero documentation and appears to not be maintained. 

The functionality provided by this tiny package is just a single command to reset the buffered text to the content saved on disk. I am quite surprised this functionality is not already in core. We shouldn't need to install a package to do this. 

Atom should move this to core and make it available to various menus and deal with any open issues brought up on that package's repo.

### Steps to Reproduce

**Expected behavior:** 
Opening `File` menu or context clicking on a file in `Tree View` or typing `""revert` into `Command Palette` displays an option to revert file to it's saved state. `File` menu and `Command Palette` also displays the wisely selected default hotkey for this command.

**Actual behavior:** [What actually happens]
In order to revert file to saved, I must close and reopen the file or install the undocumented and poorly interfaced `revert-buffer` package.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions

Windows:    10
Atom    : 1.19.6
Electron: 1.6.9
Chrome  : 56.0.2924.87
Node    : 7.4.0
apm  1.18.4
npm  3.10.10
node 6.9.5 x64
python
git 2.12.0.windows.1
visual studio

### Additional Information

None
",enhancement
Scrollbar moves to the top when splitting panes,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

![scrollbar position](https://user-images.githubusercontent.com/1058982/30176488-e483daf6-9402-11e7-9fb0-726733af7856.gif)

### Steps to Reproduce

1. Open `tag-finder.coffee` and `README.md` from the `bracket-matcher` repo
1. Scroll down a bit in `tag-finder.coffee`
1. Open `README.md` and run `pane:split-right-and-copy-active-item`
1. Switch back to the `tag-finder.coffee` tab

**Expected behavior:** Scrollbar position to be on the correct position

**Actual behavior:** Scrollbar position is in the top of the file

**Reproduces how often:** 100%

### Versions

1.21.0-dev-c1981ffb4

### Additional Information

Related: https://github.com/atom/atom/issues/15552

/cc: @as-cii @50Wliu ",bug
Editor is empty if you scroll up after splitting,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

![split stuff](https://user-images.githubusercontent.com/1058982/30175603-69f11428-93ff-11e7-8968-3a0a3ad70a90.gif)

### Steps to Reproduce

1. Download https://github.com/atom/atom/files/1260242/test.zip
1. Open Atom in that folder
1. Install `preview-inline`
1. Open `preview-inline` in `test.md` from the zip using `preview-inline:show`
1. Close the preview using the X icon on the preview
1. `pane:split-right-and-copy-active-item`
1. Scroll up in the right pane using the horizontal scrollbar

**Expected behavior:** Not empty editor when scrolling up

**Actual behavior:** Empty editor

**Reproduces how often:** 100%

### Versions

1.21.0-dev-c1981ffb4

### Additional Information

/cc: @as-cii ",bug
Cursor rendered incorrectly when horizontalPixelPositions are measured while not visible,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Cursor is rendered in incorrectly when cursor style updated when editor is not visible.

![cursor-displayed-wrong-position](https://user-images.githubusercontent.com/155205/30166338-f693b408-941d-11e7-965b-00fdbc8ed038.gif)

Condition this happens is
- Cursor's style is updated when editor is not active pane item(= not visible in screen)
- In addition to update style, cursor has to be moved(without no move, issue not happen).

When issue happened cursor's style's `translation`, `width` is not measured correctly, result in rendered incorrectly.

Following GIF is before and after the cursor move right by `ctrl-f` after I reproduce issue.
Notice lower GIF have odd width, translate value.

<img width=""854"" alt=""untitled"" src=""https://user-images.githubusercontent.com/155205/30166332-ee938774-941d-11e7-8edf-cd69d935770b.png"">

### Steps to Reproduce

1. Prepare following style in your `style.less`.

```less
atom-text-editor.test-cursor-marker {
  &.is-focused {
    .cursor {
      border: none;
      background: none;
      opacity: 0.5;
      background-color: @syntax-cursor-color;
      visibility: visible;
    }
  }
}
```

2. open editor-1 and set text ""aaa"". and open another editor-2.
3. Set editor-1 active. place cursor at eol of first line.
4. open chrome-dev console and paste following code.

```javascript
(function reproduceIssue() {
  const editor = atom.workspace.getActiveTextEditor()
  atom.workspace.onDidChangeActivePaneItem(item => {
    if (item !== editor) {
      editor.moveLeft() // This is necessary
      editor.element.classList.add(""test-cursor-marker"")
    }
  })
})()
```

5. click editor-2's tab, then click editor-1's tab(re-activate)
6. See cursor style become odd.

**Expected behavior:** [What you expect to happen]

Cursor is rendered correctly after tab-switch and back.

**Actual behavior:** [What actually happens]

Cursor is rendered incorrectly after tab-switch and back.

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%, in safe-mode.

### Versions

Can reproduce

```
Atom    : 1.20.0-beta5
Electron: 1.6.9
Chrome  : 56.0.2924.87
Node    : 7.4.0
```

Cannot reproduce with 1.18.0(so I believe this issue introduced by editor-rewrite).

### Additional Information

Actual Issue in vim-mode-plus is here
https://github.com/t9md/atom-vim-mode-plus/issues/855
",bug
Add the TextEditor.element to the public API,"

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I would like to request that the `TextEditor.element` property be added to the public API, because it contains very helpful methods for package development such as the `getFirstVisibleScreenRow()` and `getLastVisibleScreenRow()`, which return which are the lines that are currently visible in an editor.

Note: I am also using these methods on my own package: [srt-helper](https://atom.io/packages/srt-helper). Previously I was using the `TextEditor.presenter.startRow` and `TextEditor.presenter.endRow` properties, but since the `presenter` no longer exists I had to start using the `element` property. This is another reason that I would like to request that the `TextEditor.element` be added to the public API: so that my package remains stable on the next versions of Atom.

### Steps to Reproduce

N/A

### Versions

Atom    : 1.19.5
Electron: 1.6.9
Chrome  : 56.0.2924.87
Node    : 7.4.0
OS: Windows 10

### Additional Information

Link to discussion in the Atom forums: https://discuss.atom.io/t/how-to-get-visible-lines-numbers-in-atom-editor/47065/7
",enhancement
Uncaught TypeError: Cannot read property 'classList' of null,"1. calling of Pane.splitRight()/Pane.splitLeft()/Pane.splitDown()/Pane.splitUp().
can not provide more detailed reproduction sequence, since issue appears rarely and randomly and too difficult to debug it. Only can say that issue appears on startup and pane fetched by atom.workspace.getActivePane()

**Atom**: 1.19.1 x64
**Electron**: 1.6.9
**OS**: Mac OS X 10.10.5
**Thrown From**: 'api-workbench' package v0.8.46


### Stack Trace

Uncaught TypeError: Cannot read property 'classList' of null

```
At /Applications/Atom.app/Contents/Resources/app/src/pane-resize-handle-element.js:25

TypeError: Cannot read property 'classList' of null
    at HTMLElement.PaneResizeHandleElement.attachedCallback (/Applications/Atom.app/Contents/Resources/app/src/pane-resize-handle-element.js:25:45)
    at HTMLElement.PaneAxisElement.childRemoved (/Applications/Atom.app/Contents/Resources/app/src/pane-axis-element.js:111:21)
    at HTMLElement.PaneAxisElement.childReplaced (/Applications/Atom.app/Contents/Resources/app/src/pane-axis-element.js:122:12)
    at Function.module.exports.Emitter.simpleDispatch (/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:25:20)
    at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:141:34)
    at PaneAxis.module.exports.PaneAxis.replaceChild (/Applications/Atom.app/Contents/Resources/app/src/pane-axis.js:209:33)
    at Pane.module.exports.Pane.split (/Applications/Atom.app/Contents/Resources/app/src/pane.js:984:27)
    at Pane.module.exports.Pane.splitDown (/Applications/Atom.app/Contents/Resources/app/src/pane.js:972:25)
```

### Non-Core Packages

```
api-workbench 0.8.46 
atom-editor-logger 0.0.4 
busy-signal 1.3.0 
file-icons 1.7.14 
intentions 1.1.2 
linter 2.1.4 
linter-ui-default 1.5.4 
```",bug
--log-file parameter didn't create log file,"### Description

I'm running Atom with `--log-file` parameter, but the log file isn't created. Tested on macOS Sierra.

### Steps to Reproduce

```
$ /Applications/Atom.app/Contents/MacOS/Atom --help | grep log
  -l, --log-file             Log all output to file.  [string]
$ /Applications/Atom.app/Contents/MacOS/Atom -l ~/.atom/atom.log
[warn] kq_init: detected broken kqueue; not using.: Undefined error: 0
[warn] kq_init: detected broken kqueue; not using.: Undefined error: 0
[warn] kq_init: detected broken kqueue; not using.: Undefined error: 0
$ ls -la ~/.atom/
# The log file is not there.
```

**Reproduces how often:** All the time.

### Versions

```
$ atom --version
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
$ apm --version
apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 2.7.10
git 2.13.3
```",bug
Persist undo history when reopening a previously-closed buffer,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Undo/redo don't work after the file has been closed.

### Steps to Reproduce

1. Open existing file (or create the new one)
2. Edit this file
3. Close this file
4. Restore the last closed tab (`Ctrl+Shift+T`)
5. Undo/redo don't work!

**Expected behavior:** Undo/redo work after reopening closed file.

**Actual behavior:** Undo/redo don't work after reopening closed file.

**Reproduces how often:** 100%

### Versions

```
$ atom --version
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0

$ apm --version
apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 3.6.2
git 2.13.3

$ uname -a
Linux Alex-ArchMainPC 4.11.9-1-ARCH #1 SMP PREEMPT Wed Jul 5 18:23:08 CEST 2017 x86_64 GNU/Linux
```

### Additional Information

Missing.
",enhancement
Atom doesn't correctly indent lines with combining diacritics,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

[Description of the issue]

### Steps to Reproduce

1. Paste the following text into a new plain text tab.
```
x	= 1
γ	= 1
φ̄	= 1
```

**Expected behavior:**
All three `= 1` should be indented to the same distance.

**Actual behavior:**
The third line doesn't indent fully:
<img width=""84"" alt=""screen shot 2017-07-25 at 12 47 00 pm"" src=""https://user-images.githubusercontent.com/637714/28585884-cc993f70-713f-11e7-8fae-06c8788927e6.png"">


**Reproduces how often:**
Always.

### Versions

```
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

### Additional Information

Tested on macOS 10.12.5.",bug
"""Editor is not responding"" after leaving ""Save As"" dialog open for some time on macOS Sierra","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If the save dialog is open for too long, when it closes, I get an ""Editor is not responding"" dialog. If I click ""Keep Waiting"", everything is actually fine. I suspect there's a synchronous call somewhere when opening the save dialog.

### Steps to Reproduce

1. Create a new file in atom.
2. File -> Save As
3. Stare at the ""Save"" modal for a couple minutes.
4. Input a file name and save the file.
5. Now the ""Editor is not responding"" dialog pops up.
6. Click ""Keep Waiting"".
7. Everything is fine and working as normal.

**Expected behavior:** ""Editor is not responding"" dialog should not pop up.

**Actual behavior:** ""Editor is not responding"" dialog pops up.

**Reproduces how often:** 100%

### Versions

macOS Sierra Version 10.12.5
Atom    : 1.17.2
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
apm  1.17.0
npm  3.10.5
node 6.9.5 x64
python 2.7.13
git 2.11.0

### Additional Information

N/A",bug
Window dimensions and position not being saved,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Atom 1.18.0 is not saving window positions on multi-monitor Mac setups, in particular circumstances.

### Steps to Reproduce

1. On a Mac with 2 monitors, arrange them so that the secondary monitor is positioned higher and to the left of the primary monitor, like so: <img width=""668"" alt=""screen shot 2017-07-13 at 5 39 33 pm"" src=""https://user-images.githubusercontent.com/5263654/28193555-934b56be-67f2-11e7-9255-ae81d1e2ea98.png"">
2. Open Atom and mentally note the window size and position.
3. Open settings to ensure that ""Restore Previous Windows On Start"" is set to ""always"".
4. Move Atom's application window fully onto the secondary monitor, so that the top left corner of it is positioned above the height of the primary window. Optionally, resize the window to be noticeably different than the original size. 
5. Open the Developer tools and enter `atom.getPosition()` into the console.
6. Observe that the current widow position x and y values are both negative, like so: 
![screen shot 2017-07-13 at 5 56 51 pm](https://user-images.githubusercontent.com/5263654/28193853-eca1fd56-67f4-11e7-99c3-f00acfeca7d0.png)
7. Quit Atom via CMD+Q or via the File menu.
8. Open Atom.

**Expected behavior:** Atom should restore the window position and size due to the ""Restore Previous Windows On Start"" setting.

**Actual behavior:** The window will open in the position it was in at step 2. 

**Reproduces how often:** 100% (if the above steps are followed)

### Versions

**Atom:**
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0

**apm:**
apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 2.7.10

**MacOS:**
System Version:	macOS 10.12.5 (16F73)
Mac Model Identifier:	MacBookPro13,2 

### Additional Information

The issue appears to be caused by an assumption that window positions are calculated relative to the monitor they reside on, not relative to the primary monitor position. The validation logic is found in the `isValidDimensions` method of `atom-environment.coffee` at line 635:
```
# Returns true if the dimensions are useable, false if they should be ignored.
# Work around for https://github.com/atom/atom-shell/issues/473
    isValidDimensions: ({x, y, width, height}={}) ->
    width > 0 and height > 0 and x + width > 0 and y + height > 0
```
The intent seems to be to prevent saving positions that would place the window outside the viewable area of the monitors, but in our case it generates a false negative due to the way the position data is calculated, and therefore the window position is not saved if your setup is as described above. 

",bug
A cursor position is not restored when switching to and back from a pane without cursor,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When switching between panes using keyboard, if a pane you switched to is cursor-less (like About or Welcome pane) the cursor position is not restored when returning back to an editable pane. This is similar to #6662 but without a mouse. Mouse works as expected

### Steps to Reproduce

1. Open a new file, enter some text in multiple lines
2. Open About pane (on macOS Atom -> About Atom
3. Switch between text pane and About pane using keyboard Cmd-Alt-Arrows or Cmd-Shift-[, Cmd-Shift-]

**Expected behavior:** When returning to a pane with an edit have a cursor where I left it and move it using arrows or other navigation keys

**Actual behavior:** Only line number is highlighted and no cursor is visible in the line and no reaction to arrow keys and other typing or navigation inside a pane

**Reproduces how often:** 100%

### Versions

Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 2.7.13
git 2.11.0

macOS Sierra 10.12.5

### Additional Information

Clicking on panes does not behave the same way and does what expected.
",bug
⌘ + ⌃ + ␣ (command + control + space | cmd + ctrl + space) does not open the Characters selector on macOS with system lang with non-English system language,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

*edit by @rsese: need to set the system language to something other than English (`System Preferences > Language & Region`)  first before trying the steps below (confirmed with German, but reports also with French and Dutch)*

⌘ + ⌃ + ␣ (command + control + space | cmd + ctrl + space) does not open the Characters selector on macOS.

_edit by @lee-dohm: This reproduces on Windows as well using the <kbd>Win+.</kbd> keyboard combination as [reported below](
https://github.com/atom/atom/issues/14963#issuecomment-442403546)._

### Steps to Reproduce

1. Open Atom (either in `--safe` mode or just `atom`) on macOS Sierra
2. Open a new file: press ⌘ + N (command + N)
3. Open the macOS built-in special character selector: press ⌘ + ⌃ + ␣ (command + control + space)
4. Wait forever.

**Expected behavior:** The Character selector opens.

**Actual behavior:** The Characters selector does not open.

**Reproduces how often:** 100% (`n_trials < 10`).

### Versions

`atom --version`:
```
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```
`apm --version`:
```
apm  1.18.1
npm  3.10.10
node 6.9.5 x64
python 2.7.13
git 2.13.2
```
`sw_vers`:
```
ProductName:	Mac OS X
ProductVersion:	10.12.5
BuildVersion:	16F73
```

### Additional Information

The Atom keybinding resolvers (⌘ + .) does detect that ⌘ + ⌃ + ␣ is pressed, but no Atom action is bound to it, nor does it trigger the system's Characters selector.
",bug
Feature request: add select-current-paragraph,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Currently, there is no way to select the current paragraph. I [posted this in Discuss](https://discuss.atom.io/t/how-to-expand-selection-to-paragraph/44220) and was asked to create this request.

**Expected behavior:** 

You are able to use a shortcut to select the current paragraph
![image](https://user-images.githubusercontent.com/27538/27391271-8261fbce-5671-11e7-95cf-f0219cd46f1d.png)


**Actual behavior:** 

This functionality doesn't exist


### Versions

All

",enhancement
macOS custom titlebar does not hide titlebar when reloading editor in fullscreen mode,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Hello all!

I just noticed weird behavior of Atom that it does not hide its titlebar when reloading editor in fullscreen mode on `macOS`.

Here are the captured screenshots where in safe mode:

When not in full screen mode:
![image](https://user-images.githubusercontent.com/4936201/27217319-58e116ce-52b4-11e7-9ae8-c8cfe850e02c.png)

When in full screen mode:
![image](https://user-images.githubusercontent.com/4936201/27217324-5dc3373a-52b4-11e7-94a9-bc0a4aab9bce.png)

When in full screen mode after reloading right after previous step:
![image](https://user-images.githubusercontent.com/4936201/27217327-6073889a-52b4-11e7-91c6-15dccc987f2d.png)

### Steps to Reproduce

0. Prepare `macOS` environment. 🤑 
1. Open Atom.
2. Go to `Settings` and change `Title Bar` option to `custom` or `custom-inset` from `Core` setting.
3. Toggle fullscreen by `ctrl` + `cmd` + `f`.
4. Reload editor by `ctrl` + `alt` + `cmd` + `l`.
5. Hang tight until editor titlebar show up

**Expected behavior:** Titlebar hidden when reloading editor.

**Actual behavior:** Titlebar keep showing even in fullscreen mode.

**Reproduces how often:** Every time you follow above steps.

### Versions

```
Atom    : 1.18.0
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

`macOS Sierra 10.12.5`
",bug
Redirect outdated links in keymap.cson,"When I open the Keymap.cson file, the links provided are outdated.

```
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
```

They just redirect to the root of http://flight-manual.atom.io/.",enhancement
Ctrl-alt-'letter' Keybindings do not appear as a shortcut,"
![menu_bug](https://user-images.githubusercontent.com/27342440/26912866-71f377fe-4c17-11e7-83e4-00276419b9dc.png)
### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Ctrl-alt-'Letter' keybindings do not appear as shortcuts in menu items.
All other key bindings appear as shortcuts except ctrl-alt. What's up with that?

Importantly, this only happens on Windows, and I have tried it out with both 1.16 and 1.17 versions.

### Steps to Reproduce

1. Create Sample Package
2. The keybinding for toggle is ctrl-alt-o
3. Cannot be seen as a shortcut in the menu, Packages>my-package>toggle






",bug
Atom doesn't handle .gitignore/exclude files with trailing whitespace,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
Atom doesn't handle .gitignore/exclude files with trailing whitespace. This means that files that are followed by trailing whitespace in .gitignore/exclude always show up as new.

Obviously no one is going to create such files on purpose. I only got bitten by this due to Windows being Windows and adding a trailing whitespace when I innocently did a simple `echo` command. 😛

I checked the git-diff package first and saw that the actual calculation is implemented in Atom using the git-utils npm package, which I think uses libgit2. This might be an issue in libgit2 or it's usage in git-utils or it might be an issue in the way Atom is using git-utils.

### Steps to Reproduce
1. Execute in a Windows console (Not Git Bash):
```sh
git init test-repo && cd test-repo
echo. > test.txt && echo. > test2.txt
echo test.txt > .gitignore
echo test2.txt >> .git/info/exclude
```
2. Open `test-repo` in Atom with the default VCS exclude settings.
3. Look at the tree view.

**Expected behavior:** test2.txt doesn't appear in the tree view or in fuzzy finder since it's ignored.

**Actual behavior:** test2.txt appears in the tree view as a new file and also appears in the fuzzy finder. But is ignored by standard Git (`git status`).

**Reproduces how often:** 100%

### Versions
```
Atom    : 1.17.2
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```
```
apm  1.17.0
npm  3.10.5
node 6.9.5 x64
python 2.7.13
git 2.13.0.windows.1
visual studio 2015
```
Windows 10.0.14393 x64
",bug
Scroll Past End retains 3 lines instead of 1,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

[Description of the issue]
I would like to modify the behavior of Scroll Past End where it retains only one line instead of three.
I want Scrolling Past End just like in Sublime Text or Visual Studio Code.
I could not find how to do this.
Any help is welcomed.

### Steps to Reproduce

1. Enable ""Scroll Past End"" in Settings > Editor
2. Open a file that has more than 3 lines
3. Scroll to the bottom of the document / file
4. Count the number of lines that can be seen from the document / file

**Expected behavior:** [What you expect to happen]
I expected to see only the last line from the file
**Actual behavior:** [What actually happens]
I can see the last 3 lines from the file
**Reproduces how often:** [What percentage of the time does it reproduce?]
100%
### Versions
Atom    : 1.17.2
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
apm  1.17.0
npm  3.10.5
node 6.9.5 x64
python 3.6.1
git 2.13.0

OS: Arch Linux (Rolling) up to date (Mate Desktop), Linux Mint (Mate Desktop) 17&18, Ubuntu Mate 16.04 (all updated & upgraded)

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
",bug
Dock Icon stays visible when mouse leaves Atom window,"### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If your Atom loses focus and the dock icon is visible it will stay there until you go back into Atom and click on a different pane.

### Steps to Reproduce

![dock-always-shows](https://cloud.githubusercontent.com/assets/9828591/26303075/3898a18c-3ede-11e7-8026-8fc9acc551bd.gif)


**Expected behavior:**

If the editor loses focus I'd expect the icon to disappear.

### Versions

1.17.0
",bug
`Dock.destroy()` leaves part of the UI of the Dock behind and then exceptions happen,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I am able to destroy a Dock without its contents being destroyed.

### Steps to Reproduce

1. Launch Atom
1. Display the Git and GitHub panels in the right dock
1. Open the Dev Tools Console
1. Enter `atom.workspace.getRightDock().destroy()`

**Expected behavior:** The right dock to be destroyed along with all of its contents

**Actual behavior:** The right dock is destroyed, but the Git panel remains

### Versions

```
Atom    : 1.19.0-dev-9469e641d
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

### Additional Information

When closing the Dev Tools Console after the above repro steps, I get an uncaught exception identical to the one described in https://github.com/atom/notifications/issues/155
",bug
Opening directory with spaces and trailing slash opens invalid file,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

If you attempt to open a directory using a path with spaces in it, and include the trailing `\`, Atom opens to the parent directory with an empty ""file"" of the directory name with a `""` on the end.

### Steps to Reproduce

1. Have a directory with a directory that has spaces in the name as one of it's parent folders.
    * For example: `C:\foo bar\foo`
2. From the CLI (`cmd.exe` or PowerShell) attempt to open the folder with a trailing slash in the command.
    * For example: `atom 'C:\Temp\foo bar\foo\'`
3. Note that Atom has opened the _parent_ folder, with the desired folder name open as a ""file"" with an `""` on the end.
    * For example: Atom open to `C:\foo bar` with an empty ""file"" of `foo""` open.

**Expected behavior:**

Atom opens the desired folder, regardless of whether there was a trailing `\` on the path.

**Actual behavior:**

Atom opens the _parent_ folder, with an empty file named after the desired folder with a `""` on the end open.

![image](https://cloud.githubusercontent.com/assets/427137/25925238/38cb37c8-359c-11e7-9b06-3f58f081a577.png)
_The window on the left is the behavior of the first command, the window on the right is the second command (and the expected behavior)._

**Reproduces how often:**

100% of the time.

### Versions

Tested on Windows 10 x64 on:
```
Atom    : 1.17.0-beta5
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

Also tested on:
```
Atom    : 1.18.0-dev-fb9fd2fbf
Electron: 1.3.15
Chrome  : 52.0.2743.82
Node    : 6.5.0
```
(A build based on https://github.com/atom/atom/pull/14372/commits/fb9fd2fbfcf2f6fa07f43efcde20d4ee109df6a4)

### Additional Information

I tested the following variations...

Working:
* Anything that doesn't have the `\`, or doesn't have a space in any parent folder

Failing under both PowerShell and old fashioned `cmd.exe`:
* `PS C:\Temp> atom '.\foo bar\foo\'`
* `PS C:\Temp> atom 'C:\Temp\foo bar\foo\'`
* `PS C:\Temp> atom ""C:\Temp\foo bar\foo\""`",bug
Atom 1.17.0-beta5 - onDidChangeActivePane and onDidStopChangingActivePaneItem on atom.workspace.getCenter() do not work.,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

`atom.workspace.getCenter().onDidChangeActivePane` and `atom.workspace.getCenter().onDidStopChangingActivePaneItem` do not work.

### Steps to Reproduce

1. Open up Dev tools.
2. Type in either `atom.workspace.getCenter().onDidStopChangingActivePaneItem(console.log)` or `atom.workspace.getCenter().onDidChangeActivePane(console.log)`.
3. Switch tabs in center dock, observe that nothing is logged in the console.

**Expected behavior:** [What you expect to happen]
It should log the new pane that is active.

**Actual behavior:** [What actually happens]
Nothing is logged.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100% of the time.

### Versions

Atom 1.17.0-beta5
MacOS 10.12.4

### Additional Information

These two event handlers work on the workspace itself via `atom.workspace.onDidStopChangingActivePaneItem(console.log)` or `atom.workspace.onDidChangeActivePane(console.log)`.

I'm looking to use these methods for my [tree-view-extended](https://github.com/hswolff/tree-view-extended) package.",bug
Lost input focus when switching between popup dialogs via shortcut key,"### Prerequisites

* [X ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Lost input focus when switching between popup dialogs via shortcut key.

### Steps to Reproduce

1. 

Define key maps for dialogs in `keymap.cson`:
```
'body, atom-text-editor':
  'alt-o': 'fuzzy-finder:toggle-buffer-finder'
  'alt-m': 'fuzzy-finder:toggle-file-finder'
```

2.

Press `alt-o` to popup buffer finder, then press `alt-m` to switch to file finder, then the input focus will be lost, and can not press ESC to close the dialog.

### Versions

Atom    : 1.16.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0
OS: ArchLinux
",bug
"Feature Request: Always discard project state when ""Restore Previous Windows On Start"" is false.","### Prerequisites
* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
Hey Atomizers! I wanted to kick a little feature request your way, if it's not too much trouble. I've noticed that in the beta build of Atom, reopening a project in a window with a preexisting tab gives one the option to discard Atom's autosaved project state. I was wondering if it wouldn't be more consistent with the ""Restore Previous Windows on Start"" setting if, when ""restore windows"" was flagged `false`, opening any project---from the menu, via drag-and-drop, from the CLI, from a project management package---automatically dropped its state on the floor.

I'm ultimately trying to get back to a world like the one I enjoyed when setting `hot_exit` to `false` in Sublime Text, wherein projects never remember expanded directories or opened tabs. (Unsaved buffers are another story: losing those was a part of the deal with Sublime, but Atom's behavior could in theory be gentler there.) Nineish times out of ten, rather than dropping me helpfully where I was working six minutes ago, the state restoration drops me annoyingly where I was working six weeks ago; it's easier just to get back to where I was on my own.

The behavior is _so close_ to what I'm looking for in `1.17.0-beta3`, _except_ that reopening a project in a clean window always restores its tabs (which focus themselves in the Tree View as I close them, ack):

![screenflow](https://cloud.githubusercontent.com/assets/2207980/25434235/84b25d5e-2a59-11e7-9d2e-4a45d685fadc.gif)

Can't imagine this being super-high-priority by any stretch, but I also don't quite have the Atom-fu to tackle it on my own. Would be grateful if someone looking for an easy PR would consider it. :pray:

### Steps to Reproduce
1. Open a whole mess'a tabs in an Atom project window.
2. Close the project without explicitly closing your tabs.
3. Open a new window and reopen that selfsame project.
4. Tabs. Why did it have to be tabs.

**Suggested behavior:** When ""Restore Previous Windows on Start"" is disabled, Atom should discard all preexisting project state---including opened tabs.

**Actual behavior:** Atom selectively remembers some preexisting project state regardless of the setting---including opened tabs.

**Reproduces how often:** 100%

### Versions
```
❯ atom --version
Atom    : 1.17.0-beta3
Electron: 1.3.14
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

```
❯ apm --version
apm  1.17.0
npm  3.10.5
node 6.9.5 x64
python 2.7.13
git 2.12.2
```

```
❯ system_profiler SPSoftwareDataType
Software:

    System Software Overview:

      System Version: macOS 10.12.4 (16E195)
      Kernel Version: Darwin 16.5.0
      Boot Volume: Macintosh HD
      Boot Mode: Normal
      Computer Name: Zbornak
      User Name: Daniel P. Shannon (daniel)
      Secure Virtual Memory: Enabled
      System Integrity Protection: Disabled
      Time since boot: 1 day 12:19
```

### Additional Information
💖",enhancement
File content is missing when drag&dropping file from zip archive,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When drag & dropping file from zip archive atom doesn't show the content of the file. New tab is opened with a correct file name but the content is missing, as if the file was empty.

### Steps to Reproduce

1. Create a text file with some content.
2. Add that file to a zip archive.
3. Open zip archive and drag&drop the file into atom.

**Expected behavior:**

The file should open normally with it's content.

**Actual behavior:**

File content is missing

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

Atom    : 1.16.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.16.1
npm  3.10.5
node 6.9.5 x64
python 2.7.13
git 2.11.0.windows.1
visual studio 2015

Windows 10 x64
",enhancement
Saving and renaming different files causes conflict,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

File handle conflict detecting file renames, when saving and renaming files at the same time.

### Steps to Reproduce

1. <del>Open a file named `fft.cpp`.</del>
2. <del>Create another empty file, enter something in it, and open the ""Save File"" dialog, but do not save the file at the moment.</del>
3. <del>Rename the file `fft.cpp` into `fft2.cpp`.</del>
4. <del>Save the newly opened file to the same folder, and call it `fft.cpp`. This wouldn't cause any conflict, as they are mutually different files.</del>
5. <del>**At this point, you may notice, both open tabs turn into `fft2.cpp`.</del>
6. <del>**If you save any of the two files, the other would change its content into this one, rendering the previously available content unreachable.**</del>

As I was alleged of not stating the stati clearly enough, this is a modified version of the reproduction steps.

1. Create a file / open a file **in Atom** whose location is `D:/a.cpp`.
2. **In Atom**, create another file and add arbitrary things in it, then open the `Save File` dialog. **DO NOT INTERACT WITH ATOM AT THE MOMENT.**
3. **IN EXPLORER OR CMD, WHERE YOU WOULD NOT INTERACT WITH ATOM**, rename `D:/a.cpp` to `D:/b.cpp`.
4. **In the Save File dialog**, there should only be a file `b.cpp` on Drive D.
5. **In the Save File dialog**, save the new (empty) file as `D:/a.cpp`.
6. **Currently in Atom**, both open tabs should appear as `b.cpp - D:/`.
7. **IN ATOM**, saving any of the two files would result in the other having its contents change into this one.

**Expected behavior:** The first file should turn its name to `b.cpp`, while the newly saved file should retain its expected name `a.cpp`.

**Actual behavior:** Both files turn into `b.cpp`, and are duplicates of the same *file handle*.

**Reproduces how often:** **This can be reproduced at a rate of 100%, regardless of the file names.**

### Versions

**Affects Atom versions `1.8.x` through `1.16.0`, as far as I am concerned.**

Operating system: Windows 10.0.14393.

### Additional Information

I've never read any of the related code, and decided that there's something to do with the file system journal. Probably this requires a big fix.

**To regulators:** Change the issue title if you consider it inappropriate.
",bug
"Pasting new line char into settings field causing problem, see gif","### Description

Pasting new line char into settings field causing problem, see gif

### Steps to Reproduce

1. Copy invisible newline char
2. Paste it into settings field
3. It starts pasting white spaces automatically( still works even if you close settings tab and reopen it again )

**Reproduces how often:** [some fields]

### Versions

atom --version
Atom    : 1.15.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm -v
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.10
git 2.11.0

### Additional Information

![out](https://cloud.githubusercontent.com/assets/9260214/24765927/9c26280e-1ac7-11e7-95ef-308ef6073127.gif)
",bug
Add spec for Save As dialog,"(Prerequisites do not apply)

See: https://github.com/atom/atom/pull/14119#issuecomment-291295209.
Specifically, the test should ensure that the Save As dialog shows the correct directory and file name.

/cc @cs150bf",enhancement
Data loss when adding and removing project folders,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

There are already lots of unsaved buffer loss related issues, mostly of files with no project folder. However, this data loss scenario can also happen to a file with a project folder, without unusual or unintended behaviors such as crashing Atom, opening multiple windows of Atom, etc. It can be reproduced by the following steps.

### Steps to Reproduce

1. Open Atom with project folder A and make some change. Be sure that the changes are not saved.
2. Close Atom.
3. Open Atom with project folder B.
4. Add project folder A, and then remove project folder B.
5. Close Atom.
6. Open Atom with project folder A. (Or possibly with no project folder)
7. Now the changes are gone!

**Expected behavior:** The changes must be preserved at a certain step. If Atom handles unsaved buffers separate from project folders, the changes should be shown in step 3. This was what I expected (as Sublime Text does) before I search for the related issues and find out that Atom integrates the editor's state with project folders. Since Atom integrates them, the changes in step 1 may be expected reappear in either step 4 (when adding project folder A) or step 6.

**Actual behavior:** Data loss

**Reproduces how often:** Always

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.

Atom    : 1.15.0  
Electron: 1.3.13  
Chrome  : 52.0.2743.82  
Node    : 6.5.0  
",bug
Copying or cutting without selecting text results in unexpected paste behaviour,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When I copy a line without selecting any part of it, whether using Ctrl-c or right clicking and choosing ""Copy"", and then try to paste the contents of the line, they get added to the beginning of the line instead of being put where my cursor is.

### Steps to Reproduce

1. Open a file in Atom. It doesn't matter if there are other lines in this file or not.
2. Move your cursor to the very last line of the file. Type some text there. Press Ctrl-c.
3. Place your cursor on any line in the file, at any place in the line, and press Ctrl-v.

**Expected behavior:** [What you expect to happen]

I would expect the copied text to be pasted where the cursor is, without any newlines being pasted.

**Actual behavior:** [What actually happens]

Instead, the copied text is added to the beginning of the line and, if the cursor is not on the last line of the file, it moves down a line.

Here's a simple example, where I copy `a`, type `b`, then paste repeatedly:

![copy-paste-bug](https://cloud.githubusercontent.com/assets/17225098/24438786/e53b6fd8-1417-11e7-9fd5-62bacd7a0fec.gif)

**Reproduces how often:** [What percentage of the time does it reproduce?]

This happens every time.

### Versions

```
$ atom --version
Atom    : 1.15.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0
$ apm --version
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.12
git 2.7.4
```

I'm using Ubuntu 16.04, but I've seen the same issue in Windows 7 as well.",bug
Folding keybindings duplicated,"The keybinding for Fold All is `ctrl-alt-{` and for Fold Selection is `ctrl-alt-shift-[`. On a US keyboard, these are the same. I didn't override these bindings, and they remain duplicated when I start in safe mode.

Secondary problem: Under Settings => Keybindings, Fold All is shown as `ctrl-alt-{`, while in the command palette it's shown as `ctrl-alt-shift-[`. See screenshots below. Result: even on a keyboard layout that shouldn't be susceptible to this key binding duplication (on my Belgian layout, `[` and `{` don't share a physical key), Fold Selection still gets overridden by Fold All.

Keybindings according to Settings:
![2017-03-17 13_49_46-mint - vmware workstation](https://cloud.githubusercontent.com/assets/570247/24043897/212eb746-0b19-11e7-9f9b-b81464623e7d.png)

Keybindings according to Command Palette:
![2017-03-17 13_51_44-mint - vmware workstation](https://cloud.githubusercontent.com/assets/570247/24043898/212f1a88-0b19-11e7-9abe-2c18d07525e5.png)
",bug
horizontal scroll bar not fits longest line,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

This text will only scroll as far as the length of the second line even though there's more text on the first line:

```
１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０１２３４５６７８９０
123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
```

The characters in the first line of text are fullwidth Unicode characters.

### Steps to Reproduce

1. Paste the text above into a file
2. Scroll to the right

**Expected behavior:** [What you expect to happen]

Expect to be able to scroll to the end of the longest line which is the first line.

**Actual behavior:** [What actually happens]

You can only scroll to the end of the second line.

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

```
atom -v
Atom    : 1.15.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

```
apm -v
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.10
git 2.11.0
```

I'm on macOS 10.12.3 and @BlueSilverCat was on Windows 10 64bit

### Additional Information

GIF-age:

![no-scroll](https://cloud.githubusercontent.com/assets/734194/24685455/458348ec-1973-11e7-8bb7-16077969dc21.gif)
",bug
Should use name of symlink for determining file type (or have an option).,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Feature request:

I have a symlink in my source directory ""main.c"", which is a link to ""main.c.variant1"" (or perhaps one of the other variants). Atom nicely follows the link, but the fact that the destination file isn't "".c"" causes it to not do any syntax highlighting or other language-specific stuff.

It would be nice if it made that decision based on the name of the symlink, or perhaps only when the destintation file is of unknown type, or perhaps with an option setting.

### Steps to Reproduce

1. Find, say, ""sample.c"" in your source directory.
2. Rename it ""sample.c.notype"".
3. Create a symbolic link ""sample.c"" to point to it.
4. Open ""sample.c"" in Atom.

**Expected behavior:** [What you expect to happen]

It should be able to figure out that it's a C program.

**Actual behavior:** [What actually happens]

It doesn't.

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

Atom    : 1.12.9
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.12.9
npm  3.10.5
node 4.4.5
python 2.7.12
git 2.7.4

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.
",enhancement
command line interface refinement [macOS],"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

jump to line number via command line momentarily shows additional dock icon

### Steps to Reproduce

1. open any file
2. jump to line x with command line `atom /path/to/file.txt:x`
3. additional dock icon is momentarily shown, then the jump to line x occurs

**Expected behavior:** [What you expect to happen]
no additional dock icon is shown
**Actual behavior:** [What actually happens]
additional dock icon is momentarily shown
**Reproduces how often:** [What percentage of the time does it reproduce?]
always

### Versions
latest
Atom    : 1.14.4
Electron: 1.3.13
",enhancement
Proxy icon shows ~ in directory stack only when no files open,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

From Terminal, in a folder like `~/Sites/<project>`, when running `atom .` (`--safe` too), this happens:
<img width=""204"" alt=""screen shot 2017-03-07 at 11 34 05"" src=""https://cloud.githubusercontent.com/assets/898057/23652768/6abbed94-032a-11e7-9187-64727c702aee.png"">


### Steps to Reproduce

1. Launch Atom in a directory underneath your home directory from Terminal using `atom .`
1. Close any open files
1. Right-click the proxy icon

**Expected behavior:** Proxy icon stack should show a correct file path

**Actual behavior:** Proxy icon shows `~` in the file path

### Versions

You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running.
```
atom --version
Atom    : 1.14.4
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm --version
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.13
git 2.12.0
```
macOS 10.12.3 (16D32)

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.",bug
Improper display of long indented hyperlinks in text files with soft wrap,"### Prerequisites

* [X] All done! Including ""safe mode"" and ""factory settings"".

### Additional information:

This issue was originally opened here: https://github.com/atom/language-hyperlink/issues/16. But as commented by @lee-dohm this may not be ""a flaw in the language-hyperlink package itself and more of a problem with rendering"". @AndreaGriffiths11

### Description:

Long indented hyperlinks produce these ugly ugly lines when soft wrap is enabled in atom:

![atom_lorem_link_circled](https://cloud.githubusercontent.com/assets/19208670/23333215/175be1b2-fb88-11e6-8d6f-cb271c7ed9c8.png)

How do I get rid of these lines? The blank spaces should not be underlined since they're not part of the hyperlink.

### Steps to Reproduce:

1. Optional: Reset to factory defaults with `mv ~/.atom ~/.atom-backup` under linux.
2. Copy-paste a long hyperlink in a .txt file.
3. Indent it with a few tabs.
4. Enable Soft Wrap with: `View > Toggle Soft Wrap.`
5. And disable the Indent Guide if it's activated: `Settings > Editor > Show Indent Guide`

I get the ugly lines 100% of the time on two different computers.

### Configuration:

`atom --version`:
Atom: 1.14.3
Electron: 1.3.13
Chrome: 52.0.2743.82
Node: 6.5.0
`apm --version`:
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 3.6.0
git 2.11.1

Please let me know if you need more info.

And thank you __so very much__ for the work you're doing!! :D",bug
Unexpected restart causes Atom to lose project state,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I'm currently grappling with a problem with my laptop where it restarts when resuming from sleep without an external power source.  This causes Atom to lose the project I was working on, and I have to reopen it.  The Reopen Projects menu is also empty, though it is populated once a folder is opened.

### Steps to Reproduce

1. Open a folder in Atom
2. Somehow trigger an unexpected restart (I don't know if holding down the power button will work for this)
3. After restarting, reopen Atom

**Expected behavior:** The project to be displayed

**Actual behavior:** An empty editor with only an Untitled tab (if that option is enabled)

**Reproduces how often:** 100%

### Versions

```
Atom    : 1.15.0-dev-4eb3f22
Electron: 1.4.15
Chrome  : 53.0.2785.143
Node    : 6.5.0
```
```
apm  1.15.3
npm  3.10.5
node 4.4.5 x64
python 2.7.12
git 2.10.0.windows.1
visual studio 2015
```
Windows 10 x64.

### Additional Information

This may be related to #11406, though I have not been able to specifically reproduce that as 1) all open files are always saved before I put the laptop to sleep, and 2) there is no way for me to be typing in Atom when the restart occurs, as it happens as soon as Windows attempts to recover from sleep.",bug
"With invisibles on, hard tabs render larger than they should","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

With `editor.showInvisibles` set to `true` and `editor.tabType` set to `hard`, tabs render one character larger than they should:

<img width=""361"" alt=""screen shot 2017-02-05 at 9 34 09 am"" src=""https://cloud.githubusercontent.com/assets/1038121/22628296/4726af4c-eb86-11e6-9f81-10676676f713.png"">

Setting `editor.showInvisibles` to `false` corrects the problem:

<img width=""425"" alt=""screen shot 2017-02-05 at 9 08 04 am"" src=""https://cloud.githubusercontent.com/assets/1038121/22628312/9db0cb0e-eb86-11e6-9ee8-c4c7215991b5.png"">

### Steps to Reproduce

1. Launch Atom in your local atom repository
2. Open Settings View using <kbd>Cmd+,</kbd> on macOS or <kbd>Ctrl+,</kbd> on other platforms
3. Click the Editor tab
1. Check ""Show Invisibles""
1. Set ""Tab Type"" to ""hard""
1. Set ""Tab Length"" to 6
1. Open a new file using <kbd>Cmd+N</kbd> on macOS or <kbd>Ctrl+N</kbd> on other platforms
1. Type `1234567890` on the first line and press <kbd>Enter</kbd>
1. Press <kbd>Tab</kbd> on the second line

**Expected behavior:** The cursor to align between the 6 and the 7 from the line above

**Actual behavior:** The cursor aligns between the 7 and the 8 from the line above

### Versions

```
Atom    : 1.15.0-dev-7e7224c67
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0
```

### Additional Information

`config.cson`

```coffee
""*"":
  ""advanced-new-file"":
    suggestCurrentFilePath: true
  ""advanced-open-file"":
    createFileInstantly: true
  ""atom-color-highlight"":
    hideMarkersInComments: true
    hideMarkersInStrings: true
    markersAtEndOfLine: true
  ""autocomplete-elixir"":
    elixirPath: ""/usr/local/bin/elixir""
    erlangHome: ""/usr/local/lib/erlang/bin""
  ""autocomplete-erlang"":
    elixirPath: ""/usr/local/bin/elixir""
  ""autocomplete-plus"":
    confirmCompletion: ""tab""
    defaultProvider: ""Fuzzy""
    scopeBlacklist: [
      "".string .comment""
    ]
  core:
    audioBeep: false
    customFileTypes:
      ""source.git-config"": [
        ""gitconfig""
      ]
      ""source.ini"": [
        "".flowconfig""
      ]
      ""source.ruby"": [
        ""Brewfile""
      ]
      ""text.slim"": [
        ""slime""
      ]
      ""text.xml.plist"": [
        ""plist""
      ]
    disabledPackages: [
      ""background-tips""
      ""fonts""
    ]
    followSymlinks: true
    ignoredNames: [
      "".git""
      "".hg""
      "".svn""
      "".DS_Store""
      "".keep""
      ""._*""
      ""*.pyc""
      ""Thumbs.db""
    ]
    openEmptyEditorOnStart: false
    projectHome: ""/Users/Lee/Source""
    telemetryConsent: ""limited""
    themes: [
      ""one-light-ui""
      ""one-light-syntax""
    ]
  editor:
    fontFamily: ""Anonymous Pro""
    fontSize: 16
    invisibles:
      cr: ""↩""
      eol: "" ""
      tab: ""⇥""
    preferredLineLength: 100
    scrollPastEnd: true
    showInvisibles: true
    tabLength: 4
    tabType: ""hard""
  ""find-and-replace"":
    scrollToResultOnLiveSearch: true
  fonts:
    fontFamily: ""Anonymous Pro""
  ""fortune-background-tips"":
    fortuneCommand: ""fortune -s Computers""
  ""fuzzy-finder"":
    preserveLastSearch: true
  ""highlight-selected"":
    showInStatusBar: false
  ""markdown-preview"":
    openPreviewInSplitPane: false
    useGitHubStyle: true
  ""markdown-table-formatter"":
    formatOnSave: false
  minimap:
    charHeight: 4
    charWidth: 2
    ignoreWhitespacesInTokens: true
    plugins:
      cursorline: true
      cursorlineDecorationsZIndex: 0
      ""find-and-replace"": true
  ""package-generator"":
    createInDevMode: true
  pigments:
    ignoredScopes: [
      ""\\.elixir""
    ]
    markerType: ""dot""
  ""spell-check"": {}
  ""status-bar"":
    cursorPositionFormat: ""L:%L C:%C""
    fullWidth: false
  tabs:
    enableVcsColoring: true
  ""tabs-to-spaces"":
    changeSoftTabsMode: true
    onSave: ""untabify""
  ""tree-view"":
    hideIgnoredNames: true
    hideVcsIgnoredFiles: true
  welcome:
    showOnStartup: false
"".asciidoc.source"":
  editor:
    softWrap: true
  ""wrap-guide"":
    enabled: false
"".c.source"":
  editor:
    tabLength: 4
"".cpp.source"":
  editor:
    tabLength: 4
"".gfm.source"":
  editor:
    showInvisibles: false
    softWrap: true
    tabLength: 4
  ""wrap-guide"":
    enabled: false
"".git-commit.text"":
  editor:
    preferredLineLength: 72
"".haml.text"":
  ""wrap-guide"":
    enabled: false
"".java.source"":
  editor:
    tabLength: 4
"".json.source"":
  ""wrap-guide"":
    enabled: false
"".python.regexp.source"":
  editor:
    tabLength: 4
"".python.source"":
  editor:
    tabLength: 4
```
",bug
Key combination doesn't show up in the menu -> `alt-shift-n`,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I have created a new package [toggle-mode-modules](https://atom.io/packages/toggle-node-modules) and tried to use the following as a default keymap, but it does NOT appear when selecting `Packages -> Toggle Node Modules -> Toggle`

I have since changed the default to `ctrl-shift-t` which now works...

```
'.platform-linux atom-workspace, .platform-win32 atom-workspace':
  'shift-ctrl-t': 'toggle-node-modules:toggle'

'.platform-darwin atom-workspace':
  'shift-ctrl-t': 'toggle-node-modules:toggle'
``` 

### Steps to Reproduce

1. This can be replicated by trying to create a new entry in `keymap.cson`

```
'.platform-darwin atom-workspace':
  'shift-ctrl-t': **'toggle-node-modules:toggle'
```

**Expected behavior:** [What you expect to happen]

I expected the defined keymap to appear in `Packages -> Toggle Node Modules -> Toggle`

**Actual behavior:** [What actually happens]

No menu keyboard equivalent appears

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

Atom    : 1.13.1
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

### Additional Information

Had discussion on Slack channel with @BinaryMuse and @lee-dohm who requested I create this ticket",bug
"Rename, reveal in tree view, and show in finder with split files can affect the wrong split ","<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

When I open 2 files in horizontal split and try to rename (RMB on file tab -> ""Rename"") the right one, it shows the name of the left one and renames it, not the right one.  Reveal in tree view and show in finder are similarly affected.

### Steps to Reproduce

1. Open two files
2. Drag one of them to the right until editor highlights a right split for it
3. Focus the file on the left.
3. Right-click the file on the right and try to rename it.

**Expected behavior:** a pop-up appears with an input box for renaming the ""right"" file

**Actual behavior:** a pop-up appears with an input box for renaming the ""left"" file

**Reproduces how often:** was able to catch it once

### Versions

Xubuntu 16.04
atom v6.5.0
apm  1.12.9
npm  3.10.5
node 4.4.5
python 2.7.12
git 2.7.4

### Additional Information

*none*
",bug
Arabic sentences between double quotations are rendered out of the quotations,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description
Arabic sentences between double quotations ("") sometimes are rendered out of the quotations.


![arabic-in-atom](https://cloud.githubusercontent.com/assets/4347943/21939092/e592949c-d9c6-11e6-8a6e-45e66bfc29ad.png)

### Steps to Reproduce

1. Create `test.js` file (the syntax must be JavaScript, plain text does not reproduce the problem)
2. Write البنك المركزي المصري between double quotations (""البنك المركزي المصري"")

**Expected behavior:** The sentence inside the double quotations ""البنك المركزي المصري""

**Actual behavior:** Part of the sentence is out of the quotations pound

### Versions

`atom --version`:
```
Atom    : 1.13.0
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0
```
`apm --version`:
```
apm  1.14.1
npm  3.10.5
node 4.4.5
python 2.7.13
git 2.11.0
```
OS: Arch linux
",bug
The entire editor breaks when a UI theme's ui-variables.less causes the Less compiler to error,"### Prerequisites

* [ ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

The problem cannot be reproduced in safe mode, as safe mode does not load packages and themes. I recognise that the problem is caused by a package external to Atom. I believe that this is a valid issue despite this. I have met the other prerequisites.

### Description

When a UI theme is selected with a `styles/ui-variables.less` file which would cause the Less compiler to error, and Atom is reloaded, the editor fails to load, and the window remains an empty white box.

### Steps to Reproduce

1. Clone [atom-community/ui-theme-template](https://github.com/atom-community/ui-theme-template).
2. Append `#` on a new line to `styles/ui-variables.less`. Alternatively, `@foo: @bar;` can be appended, where `@bar` is undefined. This also reproduces the issue. 
3. Run `apm link --dev` in the root of the repository.
4. Open Atom in developer mode (`atom --dev`), navigate to the themes section of the settings screen, and select ""Ui Theme Template"" from the UI themes dropdown list.
5. Reload Atom in developer mode (I tried both `ctrl + alt + r`, and simply closing Atom and re-opening it with `atom --dev`).

I have only reproduced the problem in developer mode. I have not attempted to reproduce the problem in Atom's normal mode, as I fear being unable to reverse it.

**Expected behavior:** The editor loads.

**Actual behavior:** The editor does not load, and the window remains an empty white box. The Chromium developer tools automatically open to the console.

**Reproduces how often:** Every time.

### Versions

Atom    : 1.12.9
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.12.9
npm  3.10.5
node 4.4.5
python 3.6.0
git 2.11.0.windows.1
visual studio

Microsoft Windows [Version 10.0.14393]

### Additional Information

Here is the stack trace:

    index.js:61 Error
        at new Parser (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\node_modules\less\lib\less\parser.js:333:27)
        at LessCache.module.exports.LessCache.parseLess (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\node_modules\less-cache\lib\less-cache.js:255:16)
        at LessCache.module.exports.LessCache.cssForFile (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\node_modules\less-cache\lib\less-cache.js:286:20)
        at LessCache.module.exports.LessCache.readFileSync (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\node_modules\less-cache\lib\less-cache.js:274:19)
        at LessCompileCache.module.exports.LessCompileCache.read (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\less-compile-cache.js:36:25)
        at ThemeManager.module.exports.ThemeManager.loadLessStylesheet (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\theme-manager.js:280:33)
        at ThemeManager.module.exports.ThemeManager.loadStylesheet (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\theme-manager.js:256:21)
        at ThemeManager.module.exports.ThemeManager.requireStylesheet (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\theme-manager.js:174:24)
        at ThemeManager.module.exports.ThemeManager.reloadBaseStylesheets (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\theme-manager.js:236:12)
        at ThemeManager.module.exports.ThemeManager.loadBaseStylesheets (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\theme-manager.js:231:19)
        at new AtomEnvironment (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\atom-environment.js:272:19)
        at module.exports (C:\Users\Matt\AppData\Local\atom\app-1.12.9\resources\app.asar\src\initialize-application-window.js:26:19)
        at setupWindow (file:///C:/Users/Matt/AppData/Local/atom/app-1.12.9/resources/app.asar/static/index.js:81:12)
        at window.onload (file:///C:/Users/Matt/AppData/Local/atom/app-1.12.9/resources/app.asar/static/index.js:41:9)
",bug
Atom can't save over hidden files,"### Info
**OS:** Windows 10 64-bit
**Atom Version:** 1.12.8

### Description
Atom can't save over hidden files

I have some hidden files (.js .css etc..) I'm able to open and edit them but once I try to save changes I get a message saying: **""Unable to save file <path to my file> - EPERM: operation not permitted, open  <path to my file>""**

the files are just hidden and NOT set to ""Read-only"", once I unhide the file I can save it just fine.

### Steps to Reproduce
Under Windows OS
1. create or open a file with whatever file extension
2. right click the file and choose **Properties** from the context menu
3. check the option **Hidden** and apply/OK
4. open the file in atom and make some changes
5. try saving the file through **File > Save** or **ctrl + s** and an error message will appear and changes will not be saved 
",bug
Paste indentation issue with auto-indent off,"<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Paste apparently takes the current indentation into account, even when Auto Indent and Auto Indent On Paste are off. This happens in any grammar, including plain text.

### Steps to Reproduce

1. Type the following:
```
a
  b
    c
```
2. Copy from (and including) the new-line at the end of the first line, upto the end of the second line. Go to the end of the third line, and paste.

**Expected behavior:** The result should be:
```
a
  b
    c
  b
```

**Actual behavior:** The result is:
```
a
  b
    c
      b
```

**Reproduces how often:** 100%

### Versions

Atom : 1.12.7
Electron: 1.3.13
Chrome : 52.0.2743.82
Node : 6.5.0

apm 1.12.9
npm 3.10.5
node 4.4.5
python
git
visual studio 2013

Windows 8.1

### Additional Information

![gif](https://cloud.githubusercontent.com/assets/24660923/21487661/17adbdc2-cbcf-11e6-95b4-5e271dd68e8e.gif)

",bug
Replacing project folder from CLI in open atom editor window,"### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

open a project folder within an already open atom editor window while automatically removing the existing project folder it had open with CLI

`atom -a .` only adds the current project folder

I want to replace it, something like:

`atom -r .`

### Steps to Reproduce

1. Open atom editor with a project folder from CLI
2. Go to different directory
3. Open atom editor with that specific directory as the project folder, replacing the project folder that was already existing in the active atom editor window.

**Expected behavior:** [What you expect to happen]

replace the project folder that was already existing in the active atom editor window.

**Actual behavior:** [What actually happens]

- 

**Reproduces how often:** [What percentage of the time does it reproduce?]

-

### Versions

Atom    : 1.12.7
Electron: 1.3.13
Chrome  : 52.0.2743.82
Node    : 6.5.0

apm  1.12.9
npm  3.10.5
node 4.4.5
python 2.7.13
git 2.11.0

### Additional Information

is feature request
",enhancement
Some editor DOM operations stop working correctly after a certain number of lines,"#### Scrollbar

We render a scrollbar by creating a div with a height that reflects the editor's screen line count. Unfortunately DOM nodes' heights seem to be bounded:

![max-height](https://cloud.githubusercontent.com/assets/326587/21280897/adccf898-c39d-11e6-8e62-fb6b682ed2c2.png)

Reported by @ungb and @Ben3eeE 

#### Decoration rendering

Absolutely-positioned elements like cursors stop rendering correctly after a certain number of lines. It seems that DOM nodes' `top` property has a hard upper bound.

/cc @nathansobo @as-cii Any ideas on how to solve this?",bug
Overriding nonWordCharacters is unwieldy,"### Prerequisites

* [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
* [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
* [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
* [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

(Some pre-reqs have been omitted because they don't apply)

### Description

Paraphrasing from my comment over at https://github.com/atom/bracket-matcher/pull/249#issuecomment-264072613...

There's no way to respect the user's setting when overriding `nonWordCharacters` in a scope-specific setting since `nonWordCharacters` is a single string.  That means it's an all-or-nothing change, rather than being able to add or remove characters as necessary.

For example, $ is a valid identifier for many languages. However the default `nonWordCharacters` includes `$`, which means attempting to double-click to select a variable with `$` in it will only select part of it. The best way to fix this currently is to override `nonWordCharacters` in the language settings by copying/pasting the default value and removing the `$`. However, this totally disregards any customizations the user may have made.

**Possible solutions**:
* The best one I could think of is adding some type of new setting that takes scenarios like these into account.

### Steps to Reproduce

N/A - this is an API limitation.

### Versions

```
Atom    : 1.14.0-dev-d3d06fb
Electron: 1.4.7
Chrome  : 53.0.2785.143
Node    : 6.5.0
```
on Windows 10 x64.

/cc @nathansobo",enhancement
Grapheme clusters are not properly supported,"**EDIT: The emoji is now rendered properly but does not behave properly.  See https://github.com/atom/atom/issues/13360#issuecomment-272671671.**

I'm running Atom 1.12.6 on macOS Sierra 10.12.1. While many single-codepoint emoji like 👻 are properly supported, emojis consisting of multiple codepoints (connected via [zero-width joiners](http://emojipedia.org/zero-width-joiner/)) like 👩‍👩‍👦‍👦 are not.

Pasting the first into Atom:

![screen shot 2016-11-30 at 8 08 31 am](https://cloud.githubusercontent.com/assets/1620098/20753399/3f48f3fc-b6d4-11e6-82c2-af4b637237c3.png)

Pasting the second:

![screen shot 2016-11-30 at 8 08 43 am](https://cloud.githubusercontent.com/assets/1620098/20753407/451c35dc-b6d4-11e6-9503-e29e7f79bd68.png)

It seems the joiners are removed, and the individual codepoints are inserted as separate characters. You can reproduce this by simply copy-pasting the emojis from this issue, or using the emoji selector (Ctrl + Command + Space) on a Mac.
",bug
Problems editing mixed German/Syriac text,"### Prerequisites

* [YES ] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
* [ YES] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
* [NO ] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
* [ NO] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
* [ YES] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
* [ YES] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

### Description

When editing a mixed-language document (German and Syriac, which is an RTL language), the behaviour at the junctions of these languages as well as inside of Syriac text is erratic at best. I noticed four distinct problematic behaviours:

- it takes around three dozen presses of the left or right arrow keys to step into a half-dozen-letter Syriac word, through it, and back out of it again
- it is almost impossible to place the cursor at the intended Syriac letter using the mouse
- once you click into a Syriac word, the cursor disappears
- (this one is minor) Syriac letters don't obey the letter width of fixed-width fonts such as Courier New

Taken together, these issues are unfortunately a deal-breaker for me. I also have to edit documents combining other RTL and LTR languages and it is day-to-day work for me. This is unfortunate, because I really like that Atom always keeps the document left-aligned instead of deciding alignment line-by-line as e.g. gedit does.

I suspect a connection of what I'm experiencing here to what is described in #4682.

### Steps to Reproduce

1. open atom
2. paste below text into the editing area
3. position cursor before the first letter
4. keep right arrow key pressed; notice time it takes the cursor to move through non-Latin parts of the document
5. try other things described above

```
Olafbeṯ I - *Alphabet I* - ܐܳܠܰܦܒܶܬܼ ܐ. In dieser Lektion lernen wir das Alphabet. Haus, *b*ayto, *ܒ݁ܰ*ܝܬܐ.
```

### Versions

```
$ atom --version
Atom    : 1.12.5
Electron: 1.3.9
Chrome  : 52.0.2743.82
Node    : 6.5.0
$ apm --version
apm  1.12.9
npm  3.10.5
node 4.4.5
python 2.7.12+
git 2.10.2
$ cat /etc/debian_version 
stretch/sid
$ uname -a
Linux t430 4.8.0-1-amd64 #1 SMP Debian 4.8.5-1 (2016-10-28) x86_64 GNU/Linux
```
I also tested the same atom version under Windows 7 Professional.",bug
change the atom.sh script to launch the local build,"The `atom.sh` script (which gets copied to the `out`directory during the build process) [seems to be looking](https://github.com/atom/atom/blob/0122b7726a1e4eace2a9650b94d9e03c2926c944/atom.sh#L66-L82) in common system-wide locations for an installed Atom version before looking for a local binary, which makes it impossible to use the script to run the locally built atom from the `out` directory.

[According to](https://atomio.slack.com/archives/atom/p1479831997006512) @50Wliu, the batch file on Windows is set up differently and always runs the relative Atom binary. It would be nice if the atom.sh script did the same.",enhancement
Unsaved buffer state isn't silently preserved when the Window has no project folder,"Unsaved buffer state is preserved as part of the project system. When there is no project, it doesn't get saved. Prior to [this fix](https://github.com/stereobooster/atom/commit/c6a89a4abe560c22758ea3c755dacc0fc4368039) this behavior could result in data loss. That's now fixed, but seamlessly preserving state as Atom does for projects would be more convenient and is the more elegant fix.

We would readily accept a well-tested PR providing this functionality.

See also #10474.",enhancement
File > Reopen Project. Option to reopen in current window.,"Currently, choosing `File > Reopen Project > [MyProject]` reopens the chosen project in a new window.

I request an option to have it open in the same window (unloading the currently loaded project then loading the chosen project).

I'm on:

Atom 1.13.0-beta4.
Windows 10 Pro.
",enhancement
Package settings Keybindings disappear after unchecking Enable box,"### Description

When the **Enable** box in a package's **Keybindings** section is un-checked and Atom is re-started, the **Keybindings** section disappears, making it impossible to re-enable the package's default keybindings by checking the **Enable** box.

### Steps to Reproduce:

1. Uncheck the **Enable** box in a package's **Keybindings** settings (e.g. the bracket-matcher package).
2. Re-start Atom.
3. Notice that the **Keybindings** settings section has completely disappeared from the package's settings; therefore, there is no way to re-enable the package's **Keybindings** by re-checking the **Enable** box, because there is no **Enable** box to check.

**Expected behavior:**

After unchecking the **Enable** box in the packages **Keybindings** section and re-starting Atom, it should still be possible to see the **Keybindings** section with an un-checked **Enable** box.

**Actual behavior:**

On the package's settings page there is no longer a **Keybindings** section between the **Settings** section and the **README** section.

**Workaround:**

Edit the Atom config file and remove the entry for the package from the `packagesWithKeymapsDisabled` section.

### Versions

On Ubuntu:

```
$ atom --version
Atom    : 1.11.2
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
```

```
$ apm --version
apm  1.12.5
npm  3.10.5
node 4.4.5
python 2.7.12
git 2.7.4

```
On Windows:

```
atom --version
Atom    : 1.12.2
Electron: 1.3.6
Chrome  : 52.0.2743.82
Node    : 6.3.0
```

```
apm --version
INFO: Could not find files for the given pattern(s).
The system cannot find the file specified.
apm  1.12.9
npm  3.10.5
node 4.4.5
python
git
visual studio
```",bug
Double click English surrounded by Chinese selects whole line,"
### Description

Now when I want to select English from surrounded by Chinese with double click, it would select whole line including those Chinese characters.


### Steps to Reproduce

1. input some text ""基于MapReduce的分布式""
2. double click on ""MapReduce""
3. the whole line is selected instead of only ""MapReduce"".

**Expected behavior:** only ""MapReduce"" should be selected

**Actual behavior:** ""基于MapReduce的分布式"" is selected

### Versions

Atom    : 1.12.2
Electron: 1.4.5
Chrome  : 53.0.2785.113
Node    : 6.5.0

on archlinux.
",enhancement
Failed to remove '/usr/local/bin/atom',"### Description

I'm seeing a misleading error message when cancelling installation of the shell commands.

![image](https://cloud.githubusercontent.com/assets/5474861/20025751/ecfaa84a-a2ae-11e6-9754-d0db1cb2962d.png)

This is misleading because `usr/local/bin/atom` doesn't exist.

### Steps to Reproduce

1. If you already have the shell commands installed, execute the following from the terminal before launching Atom:
    1. `rm /usr/local/bin/atom`
    1. `rm /usr/local/bin/apm`
1. Launch Atom
1. Install the shell commands using the menu (Atom > Install Shell Commands)
2. When prompted by OSX for your username and password, click ""Cancel""

**Expected behavior:** For Atom to do nothing after I click ""Cancel""

**Actual behavior:** Atom prompted me with this error message

### Versions

MacOS 10.12
Atom v1.11.2",bug
subword selection behaves differently for UPPER_CASE and lower_case,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

I stumbled upon this subword selection feature (really nice :smile:). However I do have some painpoints related to how the selection stops.
### Steps to Reproduce
1. Write this on an empty editor.

```
this is   an example
this_is_an_example
THIS_IS_AN_EXAMPLE
THIS_is_anExample
this_is   an_example
thisIsAnExample
this__is___an__example
```
1. Position your cursor on the beginning of the file and execute `editor:select-to-end-of-word` 4 times, take note of the behavior.
2. Position your cursor back to the beginning of the file.
3. Execute `editor:select-to-next-subword-boundary` 4 times.
4. If there are more lines, go to the beginning of the next line and go to step 4 until all lines are processed.

**Expected behavior:**
Every line had the same behavior on step 4 compared to what happened on step 2.

**Actual behavior:** [What actually happened]
On step 4...
- :x:  Line 1 stopped at spaces which is ok, but the next execution should select the spaces plus the next word.
- :white_check_mark: Line 2 behaved just as expected. 
- :x: Line 3 behaved like line 1 but with underscores instead of spaces.
- :x: Line 4 just like line 1 did the same on the first underscore, but not on the second one.
     It did stop at the ""camel case"".
- :x: Line 5 worked as expected selecting the underscores worked, but not the space.
- :white_check_mark: Line 6 as expected.
- :white_check_mark: Line 7 same.
### Versions

Atom    : 1.11.2
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
apm  1.12.5
npm  3.10.5
node 4.4.5
python 2.7.6
git 1.9.1
Linux 4.4.0-38-generic #57~14.04.1-Ubuntu SMP x86_64 GNU/Linux
",bug
Case where TextEditor::getLastVisibleScreenRow() is off by one,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description

This function:

```
atom.commands.add 'atom-text-editor:not([mini])', 'editor:scroll-down': ->
  ed = atom.workspace.getActiveTextEditor()
  ed.scrollToScreenPosition([ed.getLastVisibleScreenRow()-1,0])
```

on many/most files behaves as expected, visibly scrolling the cursor down one line.

But performing it on [atom-keymap's keymap-manager.coffee](https://github.com/atom/atom-keymap/blob/master/src/keymap-manager.coffee), it consistently scrolls down 2 lines.
### Steps to Reproduce
1. Open [atom-keymap's keymap-manager.coffee](https://github.com/atom/atom-keymap/blob/master/src/keymap-manager.coffee)
2. Execute both lines in the function above via the dev tools console.

It might be necessary to change text size to reproduce, but I've seen it at the default size, too. A couple cmd-+'s then cmd-0 usually does the trick.

**Expected behavior:**

Scroll the editor down one line.

**Actual behavior:**

The editor scrolls down two lines
### Versions

Atom 1.11.1, 1.12-beta3, or master as of 18609f8
macOS 10.12 (Sierra)
",bug
CLI flag to load only particular packages,"I think it would be really useful for debugging purposes if we could basically launch Atom in safe mode, but with the ability to pass specific packages to activate, enabling you to easily completely isolate a package that might be conflicting with others. Maybe something like `atom --safe -a package-name -a another-package`?
",enhancement
Slow response of script/build when --help toggles,"### Prerequisites
- [X] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [X] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [X] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [X] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [X] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [X] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

```
$ script/build --help
```

lags since we need toggle `--help` to see available options for manually building different packages (_windows-installer_, _*.deb_, _*.rpm_).

Plus, some may try `script/build -h` for help but it is not available.
### Steps to Reproduce
1. clone atom then checkout to release branches
2. `$ script/build --help`

**Expected behavior:**

It prints out available options immediately then return.

**Actual behavior:**

It's lagging on terminal result: `Installing script dependencies` and finally prints out available options.
It looks like processing on this line of code (`script/build`, line 7): 

``` javascript
require('./bootstrap')
```
### Versions

``` bash
$ atom --version
Atom    : 1.11.1
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0

$ atom-beta --version
Atom    : 1.12.0-beta1
Electron: 1.3.6
Chrome  : 52.0.2743.82
Node    : 6.3.0
```
",enhancement
Executing pane:close will ask to save changes of TextEditors twice,"### Prerequisites
- [X] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [X] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [X] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [X] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [X] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [X] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

If you execute `pane:close` the dialog asking you to save appears twice when you press the `Dont Save` button. This does not happen with `core:close` command in combination with the `Close Empty Panes` configuration option.
### Steps to Reproduce
1. Open Atom in safe mode.
1. Ensure you only have one pane, this bug does not reproduce when closing a split pane.
1. Open a new untitled tab (Or any tab it is not limited to untitled tabs).
1. Make any modifications to the tab.
1. Run `pane:close` from the `command-palette`, this doesn't reproduce when the pane is closed using the `Remove Empty Panes` option.
1. In the dialog that appears press `Don't Save`.

![pane close dialog](https://cloud.githubusercontent.com/assets/1058982/19284692/4c058c8a-8ff7-11e6-936f-60b2b748e0c4.gif)

**Expected behavior:** Pane to close.

**Actual behavior:** Dialog asking to save appears once again.
### Versions
###### atom --version

```
Atom    : 1.12.0-beta0
Electron: 1.3.6
Chrome  : 52.0.2743.82
Node    : 6.3.0
```
###### apm --version

```
apm  1.12.5
npm  3.10.5
node 4.4.5
python 2.7.11
git 2.10.1.windows.1
visual studio 2015
```
",bug
"Can not dismiss ""No update available"" window if opening menu again before the update check finishes","### Description

So I just discovered a weird little issue. If I use ""check for updates"" from the menu, and before the window pops up I open the Atom-menu again I can not dismiss the ""No updates available"" window neither press something in the menu. The only way to exit Atom is to kill the process using Activity Monitor.
- It happens in safe mode as well.
- I am running version 1.10.2
- No error pops up
- Trying to close in any other way that using Activity Monitor fails.

I am using a Macbook Pro Retina 13"" (late 2013) with MacOS 10.12 (sierra) installed.
### Steps to Reproduce
1. Open Atom.
2. Go to Atom menu and select ""Check for Update""
3. Before the window appears (telling you there are no updates) open the Atom menu again.
4. Wait a bit.
5. When the update-check window appears try to click whatever. It is no longer possible to close the menu, ok the update-check window.
### Versions

Atom    : 1.10.2
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
",bug
editor.bufferRangeForScopeAtCursor return undefined as special condition,"### Steps to Reproduce

Given a markdown file with **a list** with link:

```
- _https://github.com/atom/atom/issues/new
```

Where `_` represents the cursor position (at the start of the link, and after the list head `-`)

And I try to get the buffer range for scope link:

```
editor = atom.workspace.getActiveTextEditor()

cursor = editor.getLastCursor()
cursor.getScopeDescriptor().getScopesArray()
// => [""source.gfm"", ""markup.underline.link.http.hyperlink""]

// since markup.underline.link.http.hyperlink scope is there, when i try to get the buffer range
editor.bufferRangeForScopeAtCursor('markup.underline.link.http.hyperlink')
// => undefined
```

**Expected behavior:**

It should return the correct buffer range. 

The undefined buffer range only happens in list links. E.g. `- link` or `- [ ] link`.
### Versions

```
Atom    : 1.10.2
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
```
",bug
Indents based on previous lines are incorrectly tested using current/next line scope,"https://github.com/atom/atom/blob/b97f317cd1cdc42a95c37274ed2818f665fd921f/src/language-mode.coffee#L272-L273

The method `suggestedIndentForTokenizedLineAtBufferRow` is called with `bufferRow`, `line`, `tokenizedLine` containing information about the line that is to be indented. The indentation is based on the indentation of the previous line (duh), but at the highlighted lines `increaseIndentRegex` may not belong to the scope of that previous line.

For instance in Blade it's possible to embed a block of PHP in a following manner

``` blade
@php
echo ""hello world"";
@endphp
```

For sake of simplicity let's say Blade has defined `increaseIndentPattern` is `@php` and `decreaseIndentPattern` is `@endphp` for its scope.

When `suggestedIndentForTokenizedLineAtBufferRow` is calculating the indentation for the line containing `echo` statement, then at the highlighted section it looks for the previous line: `@php` and tries to match `increaseIndentPattern` of the current line, which is of different scope (`.source.php`) and is different from Blade's scope, meaning the `increaseIndentPattern` of `@php` is never hit. 
",bug
missing first letter on file operations (cut/copy/rename exc.),"Hi there. This is not an Atom bug but one of its dependencies. I open this issue here because I couldn't find the responsible package. 

I also encounter this bug in gulp (3 & 4), glob and a couple of other packages.
### Description

When you use capital 'i'  ( İ ) in directory names on Turkish environments,  first letter of directory vanishes at the end of the operation. 

Ex: When I rename a file like this in Atom (`\project-dir` is the root path of the project folder) `C:\Dev\İpler\project-dir\subdir\file.js` the renaming window opens file as `ubdir\file.js` 
### Steps to Reproduce
1. Create a directory that contains/starts a capital `i` (İ) letter on its path names.
2. Create a sub directory in that directory that going to be a project folder.
3. Open Atom with that path
4. Create a file under sub directory.
### Versions

Atom    : 1.10.0
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0

apm  1.12.5
npm  3.10.5
node 4.4.5
python
git 2.9.0.windows.1
visual studio 2015
",bug
Open project folder dialog defaults to current filename,"### Prerequisites
- [X] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [X] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [X] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [X] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [X] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [X] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

When you press <kbd>ctrl+shift+o</kbd> to open a project folder the dialog defaults to the current file name, which is not a valid folder.

Screenshot where I had a file in the spec folder open and wanted to open that folder in a separate Atom window using <kbd>ctrl+shift+o</kbd> and then <kbd>enter</kbd>.
In addition I also noticed that the entire file name is not shown in the dialog. Compare error dialog text with open folder dialog text.
![not a folder](https://cloud.githubusercontent.com/assets/1058982/17764625/bd71fb3a-6520-11e6-9347-936b3f1fa73d.png)
### Steps to Reproduce
1. Open Atom in safe mode, add a project folder and open a file.
2. With the file focused press <kbd>ctrl+shift+o</kbd>
3. Try to open that folder by just pressing <kbd>enter</kbd> on the dialog, error because the folder is set incorrectly to a filename.

**Expected behavior:** The current open files folder opens as a project folder in a new Atom window. 

**Actual behavior:** Error because file name is set to a file instead of a folder, if you clear the file name from the dialog before opening it opens the folder as expected.
### Versions

Windows 7.
#### atom --version

```
Atom    : 1.9.8
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
```
#### apm --version

```
apm  1.10.0
npm  2.13.3
node 0.10.40
python 2.7.11
git 1.9.2.msysgit.0
visual studio
```
",bug
Negated patterns from .gitignore_global are still included in VCS ignored paths,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description
### Steps to Reproduce

```
$ mkdir gittest
$ cd gittest 
$ git init
Initialized empty Git repository in /Users/swrobel/Code/gittest/.git/
$ touch this-should-be-tracked
$ echo 'this-should-be-tracked' >> ~/.gitignore_global  
$ git status --ignored
On branch master

Initial commit

Ignored files:
  (use ""git add -f <file>..."" to include in what will be committed)

    this-should-be-tracked

nothing to commit (create/copy files and use ""git add"" to track)
$ echo '!this-should-be-tracked' >> .gitignore           
$ git status --ignored                        
On branch master

Initial commit

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

    .gitignore
    this-should-be-tracked

nothing added to commit but untracked files present (use ""git add"" to track)
$ atom .
```

**Expected behavior:**
According to the [gitignore docs](https://git-scm.com/docs/gitignore), `.gitignore` files local to a  project take precedence over `.gitignore_global`. In this case a simple single-file rule has been added to `.gitignore_global` and then negated in the project's `.gitignore` file, which means that it should be tracked in git, and thus, in my mind, is not a ""VCS Ignored Path.""

Note: I have avoided using `git check-ignore` because of the [rather confusing behavior](https://public-inbox.org/git/1418323355-23935-1-git-send-email-florian.hassanen@gmail.com/) where it returns files that match any gitignore rule, including negated rules, rather than only returning files that will actually be ignored.

**Actual behavior:**
File is not available in Fuzzy Finder, Tree View, or other areas that respect the VCS Ignored Paths setting.

<img width=""637"" alt=""screenshot 2016-08-17 19 03 58"" src=""https://cloud.githubusercontent.com/assets/157270/17759600/5f1602c0-64ad-11e6-8819-431c8e02a30a.png"">
<img width=""505"" alt=""screenshot 2016-08-17 19 01 14"" src=""https://cloud.githubusercontent.com/assets/157270/17759592/3b50e31e-64ad-11e6-8594-6b67e506e37d.png"">
<img width=""636"" alt=""screenshot 2016-08-17 19 05 46"" src=""https://cloud.githubusercontent.com/assets/157270/17759620/9fb1b360-64ad-11e6-94a9-ba6b8bf9463b.png"">
<img width=""505"" alt=""screenshot 2016-08-17 19 05 39"" src=""https://cloud.githubusercontent.com/assets/157270/17759621/a218a712-64ad-11e6-9451-b0e0ce4b8469.png"">

I don't know any way to get the array of VCS ignored files from the developer console, otherwise I would've done that instead of using this crude screenshot-based method.
### Versions

Tested on Atom stable & beta on two separate Macs, one running 10.11.6 and one running 10.12 PB5

```
$ atom --version
Atom    : 1.9.8
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0

$ atom-beta --version 
Atom    : 1.10.0-beta5
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
```
",bug
The '/tmp/Atom Crashes' directory vs multiple userids,"Hello...  Just last week I started trying to use Atom on MacOS 10 (Yosemite), and my main interest right now is in the languages ruby and crystal.

When Atom.app starts up, it creates a directory ""Atom Crashes"":

``` cr
# ls -l /tmp/Atom\ Crashes/
total 8
drwxr-xr-x  2 gad  wheel  68 Aug 14 21:42 completed/
drwxr-xr-x  2 gad  wheel  68 Aug 14 21:42 new/
drwxr-xr-x  2 gad  wheel  68 Aug 14 21:42 pending/
-rw-r--r--  1 gad  wheel  40 Aug 14 21:46 settings.dat
```

The problem is that this is created with a generic name, but it is owned by the active user and no other users can modify it (which **is** how it should be -- in fact, it could be argued that no other users should be allowed to read it).

The problem comes when I try to switch users in MacOS 10, using fast-user switching.  If I try to start up Atom on a second userid, and if I have the console.app running, I'll see an endless stream of error messages:

``` cr
<timestamp> PM crashpad_handler[<pid>]: [0814/212739:ERROR:file_io_posix.cc(153)] open /tmp/Atom Crashes/settings.dat: Permission denied
```

I have to switch back to the first userid, bring up Terminal, and `rm -rf /tmp/Atom*`.  And of course this means that Atom.app cannot be left running on two different sessions at the same time, which is disappointing.

If Atom is going to create a directory in /tmp, then it should include the userid (or the user's UID) in the name of the directory.  I think the directory should also be created with permissions 700, not 755.

I notice that in MacOS 10, the directory has the attribute:

``` cr
# ls -ld@ /tmp/Atom\ Crashes
drwxr-xr-x@ 6 gad  wheel  204 Aug 14 21:42 /tmp/Atom Crashes/
    org.chromium.crashpad.database.initialized    1 
```

if that helps to track this down.

FWIW:

``` cr
# atom --version
Atom    : 1.9.8
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0

# apm --version
apm  1.10.0
npm  2.13.3
node 0.10.40
python 2.7.10
git 2.9.1
```
",bug
Scrollbar not refreshing when pasting code,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

When pasting a long one-line text that forces the view to scroll horizontally or vertically, the scrollbar stays at its initial position. The problem seems to only occur if there is no scrollbar present. When trying to achieve the same result when there is already a scrollbar visible, it will work fine.
### Steps to Reproduce
1. Open Atom in safe mode
1. Open a new untitled tab
1. Paste the contents of  [this file](https://gist.githubusercontent.com/Ben3eeE/6b9a8d5c3fbdd38bda3b70b63617b280/raw/77e0fc174f27160e82bd3c27f2d8182771770fb8/gistfile1.txt) in to the new untitled tab.
1. **Expected:** Scrollbar to be at the bottom since the TextEditor is scrolled to the  bottom. **Acutal:** Scrollbar stays at the top of the file. This bug applies to both vertical and horizontal scrollbars.

**Expected behavior:** 

The scrollbar should appear and then indicate that the view has been scrolled.

**Actual behavior:** 

The scrollbar didn't indicate that the site was scrolled. It stayed at its initial position on the left.
### Versions

Atom    : 1.9.5
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
macOS/OSX El Capitan
",bug
Cursor keeps switching back to pointer instead of i beam,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description

The cursor keeps switching back to a pointer instead of an i beam.

[![https://gyazo.com/86f19cdd229d3db894a327cfeb6eee80](https://i.gyazo.com/86f19cdd229d3db894a327cfeb6eee80.gif)](https://gyazo.com/86f19cdd229d3db894a327cfeb6eee80)
### Steps to Reproduce
1. Focus away from atom window
2. Bring atom window into focus
3. Click on a few lines of text
4. Watch the cursor revert to a pointer

**Expected behavior:** The cursor should remain an i beam

**Actual behavior:** The cursor reverted to a pointer
### Versions

1.9.2 | 1.9.3 | 1.9.4
### Additional Info

OS: OS X El Capitan: 10.11.6
Syntax and UI Theme: Atom One Dark

Moving the cursor to the sidebar and back to the editor temporarily fixes the problem.
",bug
DeserializerManager should throw an error if a registered deserializer returns undefined,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description

This drove me up the wall while trying to figure out why deserialization wasn't working in the rewritten about package (damn you CoffeeScript implicit returns!) – deserializer functions must return an object, but we currently don't provide any feedback to package authors that this is the case. We should either throw an error or log a warning to make this clearer, and also update the docs [here](https://atom.io/docs/api/v1.8.0/DeserializerManager#instance-add) to specify the expected return value of a deserializer.
### Versions

Atom    : 1.10.0-dev-e8f1591
Electron: 0.37.8
Chrome  : 49.0.2623.75
Node    : 5.10.0
",enhancement
Invisibles enhancements and fixes,"In order to clean things up, I'm unifying a number of invisibles-related enhancements and fixes under this one Issue and closing the others.
- [ ] When `showInvisibles` is off, non-visible characters should be non-visible
- [ ] When `showInvisibles` is on, all normally non-visible characters (control characters, zero-width spaces, other Unicode weirdness, etc) should be rendered in some way #1839
- [ ] There should be some way of customizing which non-visible characters are displayed when `showInvisibles` is on (Perhaps by class? i.e. whitespace, control characters, Unicode groups)
- [ ] All displayed invisibles should be visible anywhere on the line when `showInvisibles` is enabled #2572
- [ ] Make it possible for invisibles tab characters to span multiple spaces #3051 (see [implementation suggestion](https://github.com/atom/atom/issues/3051#issuecomment-183003834) by @natbraun)

Related: #6669
",enhancement
Vertical Scroll When Horizontal Scroll Bar Is Visible,"### Description

If horizontal scroll bar is visible you can scroll vertically (using mouse wheel) even if the content does not run off the bottom of the screen. In my case I only have 1 line of text.
### Steps to Reproduce
1. Open new tab
2. Type really long string that runs off edge of screen causing horizontal scroll bar to be displayed
3. Use mouse wheel to scroll vertically

**Expected behavior:** Since there is only 1 line of text there should be no need for vertical scroll

**Actual behavior:** Vertical scroll happens when not needed
### Versions

Atom: 1.8.0
OS: Linux Fedora 23
",bug
word boundary not working with Unicode punctuations,"### Prerequisites

  none
### Description

Unicode punctuations used as word boundary is not working in Atom, 
     when specified  in Settings/Non Word Characters field
### Steps to Reproduce
1. open settings tab in Atom using `⌘ + ,`
2. navigate to `Non Word Characters` field
3. add `«` and `»`
4. new tab and input `what do you mean by«你太胖了»？`
5. double on `你太胖了` to select these chars enclosed by `«` and `»`,(what I expect) 
   but `by«你太胖了»？` selected instead

**Expected behavior:** [What you expected to happen]

 only `你太胖了` selected

**Actual behavior:** [What actually happened]

 `by«你太胖了»？` selected
### Versions

Atom    : 1.8.0
Electron: 0.36.8
Chrome  : 47.0.2526.110
## Node    : 5.1.1

apm  1.9.2
npm  2.13.3
node 0.10.40
python 2.7.10
## git 2.7.4

OS X El Capitan 10.11.5
",bug
MouseWheel Scrolling Ignores Operating System Settings,"### Prerequisites
- [X] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode)?
- [X] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [ ] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [X] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [ ] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [X] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

The number of lines the mouse wheel scrolls does not correspond to the setting in the operating system.
### Steps to Reproduce
1. Open file in Atom
2. Scroll up and down with the mouse wheel

**Expected behavior:** [What you expected to happen]

The number of lines scrolled should be equal to the setting in the operating system.

**Actual behavior:** [What actually happened]

The number of lines scrolled gnores the operating system's setting.
### Versions

1.8
",bug
Commenting selection comments out entire line instead of selection,"### Description

I only want to comment out a selected part of a line. When a portion of the line is selected and commented out, i would expect only that selection to be wrapped in comment tags, instead the whole line is wrapped.

![animated](https://cloud.githubusercontent.com/assets/2798097/15865992/d227be7e-2c91-11e6-9121-3ead1b5cd228.gif)
### Steps to Reproduce
1. Select text
2. Comment `[cmd + /]`

**Expected behavior:** To only wrap the selected text in a comment.

**Actual behavior:**  Wraps entire line in html comment
### Versions

Mac OS El Capitan 10.11.5

Atom    : 1.8.0
Electron: 0.36.8
Chrome  : 47.0.2526.110
Node    : 5.1.1

apm  1.9.2
npm  2.13.3
node 0.10.40
python 2.7.10
git 2.8.4
",enhancement
"onDidChangeCursorPosition sends ""textChanged"" as false when backspace is pressed","### Prerequisites
- Atom 1.7.3
- Adds a callback to `onDidChangeCursorPosition`
### Description

When pressing backspace or delete, `textChanged` property of event is set to `false`.

Tested on Ubuntu 16.04, with Atom 1.7.3
",bug
Code folding based on grammar instead of indentation,"The actual folding mechanism is simply wrong and unreliable.
I often work with big files and use folding to speed up my work.

But, if the file has a wrong indentation (something not rare if the files are human edited) atom also fold the code in a wrong manner. 
This in some case can be extremely dangerous , because if you don't remember to check every time what is folded you take that as given and work on the other parts of the file in a wrong manner.

The actual code folding is based firstly on indentation then on grammar.

I think that the code folding should be based ONLY on grammar.
Because, actually, even when you have a correct grammar (with correct folding rules) you can't be sure that the editor fold the code in the right manner.

Here is some examples to show , editing an XML file (**i want to fold at line number 10**):

**Unfolded text (with wrong indentation at line 18 and 19)**:
![image](https://cloud.githubusercontent.com/assets/4760358/15536250/ce8dff60-2270-11e6-9307-8247d72f057e.png)

**Folded text (WRONG because of wrong indentation)**:

![image](https://cloud.githubusercontent.com/assets/4760358/15536276/ef14bfd0-2270-11e6-99be-cec427338a9d.png)

What the correct folding should be:

![image](https://cloud.githubusercontent.com/assets/4760358/15536312/19aa2244-2271-11e6-8548-e1a5aa3345bc.png)

But for achieve this we must fix the indentation (on line 18 and 19):

![image](https://cloud.githubusercontent.com/assets/4760358/15536453/8e0a602c-2271-11e6-91a7-0076bec79f33.png)

I think that correct indentation CAN'T be a requirement to correct code folding.
",enhancement
Flatpak release support,"### Prerequisites
- [x ] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode)?
- [x ] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [ x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [ x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [ x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x ] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

Need release of linux sandboxed apps [Flatpack](http://flatpak.org/).
### Steps to Reproduce
1. Goto atom release page https://github.com/atom/atom/releases/

**Expected behavior:** [What you expected to happen]
Find flatpak atom package.

**Actual behavior:** [What actually happened]
Can't find flatpak atom package.
### Versions

You can get this information from executing `atom --version` and `apm --version` at the command line. Also, please include the OS and what version of the OS you're running.
",enhancement
Unfold tree (unfold everything under definition) feature,"When I open a file, I first use the `Editor: Fold All` command to get a high-level view of the file, and then locate the function I want to look into. Now, to actually look at the code of that function I unfold the line where the function begins by clicking the little `>` arrow to it's left.

The problem is when functions contain other functions, then all the sub-functions are by default folded too. So to see the full code of the sub-function, I need to manually click and unfold each of them, and possibly the sub-sub-functions too. In a language like OCaml, where it's common coding practice to have many nested `let ... in` structures, this makes it a huge pain to use the folding feature.

**Suggested enhancement**

Instead of toggling between fold and unfold when clicking the arrow, instead cycle through ""fold"", ""unfold"", and ""unfold entire tree"".

**Current and suggested behavior**

Currently, after a fold-all, my code looks like this:

```
> def foo(n): ...
```

If I click the arrow once, I get:

```
 def foo(n):
>    def bar():...
>    def boo():...
```

And to see everything I need to click and unfold `bar` and `boo` manually. Clicking the arrow next to `foo` once more just returns it to the folded state in the first code block above.

Instead, I suggest that clicking the `foo` the second time produces this instead:

```
 def foo(n):
     def bar():
         pass
     def boo():
         pass
```

**Why would the enhancement be useful to most users**

It would save users of languages like Ocaml many clicks, and they'd be able to easily see the entire code of a function.

This feature exists in Emacs, for example, the default behaviour of <Tab> folding in org-mode does exactly this.

**Atom Version:** 1.7.3
**OS and Version:** OS X 10.10.5
",enhancement
Opening a file should open a new window if no window present on current Ubuntu workspace,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](http://flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description

On Ubuntu, when opening a file from the file manager in Atom, it will first open a new window on the current workspace (A). Opening a second file opens in the same window in a new tab. This is expected.

After changing to a different workspace (B) in Ubuntu where no Atom window is present and then opening another file, the file will open in the Atom window present on the first workspace (A). However, the expected behavior is that the file is opened in a new window of Atom.

My notion of expected behavior is derived from what is done by Gedit, the default text editor on Ubuntu. It also seems more intuitive to me that the file is opened on the workspace I'm currently viewing, even if Atom is already present on a different workspace. This follows an idea of using different workspaces for different tasks.

Some might disagree with this suggestion, but I would still like to see this as an optional behavior because this issue is one of the most often mentioned by those I know who use Atom.
### Steps to Reproduce
1. Open a file in Atom from the file manager in Ubuntu on workspace (A).
2. Change workspace to workspace (B).
3. Open a second file in Atom from the file manager.

**Expected behavior:** Two Atom windows open, one on workspace (A) with the first file and one on workspace (B) with the second file.

**Actual behavior:** One Atom window opened on workspace (A) with both files.
### Versions

Ubuntu 15.10 and Ubuntu 16.04 running Unity 7.

``` bash
$ atom --version
Atom    : 1.7.2
Electron: 0.36.8
Chrome  : 47.0.2526.110
Node    : 5.1.1

$ apm --version
apm  1.9.2
npm  2.13.3
node 0.10.40
python 2.7.11+
git 2.7.4
```
",enhancement
"Error moving files across mounts or drives, ""Failed to move entry EXDEV: cross-device link not permitted""","*Edit by @rsese to add issue template details*

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

You can't drag and drop a file across mounts or drives and will get an error.  From @50Wliu /cc https://github.com/atom/atom/issues/11456#issuecomment-373248850:

> You can't I looked into this error code and this happens when attempting to move files across mounts (Unix) or drives (Windows). Seems like the correct thing to do in this case is a copy + delete.

### Steps to Reproduce

Reproduced on macOS 10.12.6:

1. Plug in a flash drive
2. Create a text file on the flash drive
3. `atom --safe`
4. Open some project
5. From Finder, try to drag the file from step 2 to the project in step 4

**Expected behavior:** [What you expect to happen]

The file to be moved from the flash drive to the project directory (this is what happens if you drag a file from some other directory on the same drive).

**Actual behavior:** [What actually happens]

You get a ""Failed to move entry EXDEV: cross-device link not permitted"" error and the file isn't moved.

**Reproduces how often:** [What percentage of the time does it reproduce?]

100%

### Versions

```
$ atom -v
Atom    : 1.32.2
Electron: 2.0.9
Chrome  : 61.0.3163.100
Node    : 8.9.3

$ apm -v
apm  2.1.2
npm  6.2.0
node 8.9.3 x64
atom 1.32.2
python 2.7.10
git 2.14.3
```
---

win 10 x64
atom v1.6.2

I got an error when I tried to move a directory from my desk to my project in atom tree. I cannot find any help from issues list. I googled it and found it may a npm problem. I am a layman for nodejs. I am not sure if here is a right place I can get help.
![untitled](https://cloud.githubusercontent.com/assets/2533629/14516152/c1ec84b0-0232-11e6-96e3-09fba04a6252.png)
",bug
Windows install/update does not always create/modify bin folder in appdata,"When the windows installer runs or the auto-updater executes the following files should be created/overwritten in c:\users<username>\appdata\local\atom
- atom
- atom.cmd
- apm
- apm.cmd

Each one acts as a simple shortcut to it's associated script in c:\users<username>\appdata\local\atom\app-1.x.y\resources\cli  (suffixless ones link to the .sh ones)

Various reports of this, using this bug to correlate them into a single issue. Doesn't always happen, need to find out why. Success/fail for these is not part of the squirrel log right now.
",bug
Scroll to center is ignored if already visible,"### Description

When scrolling to a position that is already visible with the `center` option set to `true` (as described [here](https://atom.io/docs/api/v1.6.2/TextEditor#instance-scrollToBufferPosition)), no scrolling is performed.
### Steps to Reproduce

``` javascript
editor = atom.workspace.getActiveTextEditor() /* open a file with 100 lines */
editor.scrollToBufferPosition([50, 0]) /* scroll to line 50, line 52 is visible now */
editor.scrollToBufferPosition([52, 0], {center: true})
```

**Expected behavior:** According to the API docs, line 52 should be scrolled to the center of the editor.

**Actual behavior:** Nothing happens.
### Further information

Before e3dabd5200afea5074fb63003951ef677539413e, the behavior was as expected. Maybe the change was intentional, but then I don't understand why.

The problem can be fixed by removing

``` coffeescript
unless @getScrollTop() < desiredScrollCenter < @getScrollBottom()
```

in [text-editor-presenter.coffee](https://github.com/atom/atom/blob/master/src/text-editor-presenter.coffee). I can open a PR with this change if necessary.
",bug
Data loss after power outage,"### Description

How to restore corrupted file after power outage.

This has happened three times in the past half year and now really disappointed (to say the least, sorry). But this is not the behaviour I expect from a quality editor. Cannot find via Google or issues in GitHub how to resolve this.
### Steps to Reproduce
1. Edit a file
2. Laptop runs out of battery power
3. Power laptop and restart system
4. Open file which is now corrupted and looking like �6G�-���L����T�T�8L��s#]�Ϩ���8L��s#]�Ϩ��� etc

**Expected behavior:** [What you expected to happen]

That the file is never corrupted after a power cycle or the corrupted file is restorable. An editort should **never** be alowed to have this behaviour. At the moment of the power cycle I was not saving, only typing.

Is there any tool to run and get my original file back?

**Actual behavior:** [What actually happened]

I ended up with a corrupted file as described above.
### Versions

Up to date Ubuntu 15.10 with
$ atom --version
1.6.2
$ apm --version
apm  1.6.0
npm  2.13.3
node 0.10.40
python 2.7.10
git 2.5.0
",bug
Mix of Arabic and Latin rendered incorrectly,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode)?
- [x] Are you running the [latest version of Atom](http://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](flight-manual.atom.io/hacking-atom/sections/debugging/)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?
### Description

I don't understand Arabic myself, and it's the first time working with a RTL language, but I'm experiencing some rendering issues with a specific text. I have the following SQL insert statement:

``` sql
INSERT INTO `dwp_terms` VALUES
  (19,'عين المدينة','3ayn-almadina',0);
```

Which renders incorrectly. It seems it might be a Webkit bug, but I'm not sure. It might also be that the text is ill formatted, but it seems to render correctly in Firefox and Apple Notes, albeit with the words in reverse. I've included a screenshot from Sublime Text 3 which seems to render as I expected.
### Steps to Reproduce
1. Use the following piece of text as a template `(19,'','3ayn-almadina',0),`
2. Paste `عين المدينة` into the empty quotes
3. Incorrect rendering

I do not know if this applies to more RTL scripts, but I've been working with about 40 terms that were ""converted"" to `INSERT` statements, and this was the only one causing trouble.

**Expected behavior:** here rendered with Sublime Text 3 (however, seems to not render arabic correctly)

<img width=""406"" alt=""Sublime Text 3 Rendering"" src=""https://cloud.githubusercontent.com/assets/416524/14080299/6a4500c4-f504-11e5-95a2-db7c83200a0a.png"">

**Actual behavior:** rendered with Atom 1.6.0

<img width=""332"" alt=""Atom Rendering"" src=""https://cloud.githubusercontent.com/assets/416524/14080298/6a2dc788-f504-11e5-8067-d7f7badda11b.png"">

The generated HTML, which looks correct:

``` html
<span class=""source pgsql"">
  <span class=""meta statement pgsql"">
    <span class=""leading-whitespace indent-guide"">  </span>
    (
    <span class=""constant numeric pgsql"">19</span>
    ,
    <span class=""string quoted single pgsql"">
      <span class=""punctuation definition string begin pgsql"">'</span>
      عين المدينة'
    </span>
    ,
    <span class=""string quoted single pgsql"">
      <span class=""punctuation definition string begin pgsql"">'</span>
      3ayn-almadina'
    </span>
    ,
    <span class=""constant numeric pgsql"">0</span>
    ),
  </span>
</span>
```
### Versions

``` sh
$ atom --version
1.6.0
$ apm --version
apm  1.6.0
npm  2.13.3
node 0.10.40
python 2.7.11
git 2.7.2
```
",bug
Identical folders are opened as separate projects on case-insensitive filesystems,"### Description

On case-insensitive (but case-preserving) filesystems, opening a project by passing its folder to the `atom` command will not restore the project, if the path given has the wrong case.
### Steps to Reproduce
1. Create a project in Atom with 1 folder (e.g. `~/Foo`).
2. Open some tabs in that project.
3. Close the window.
4. Reopen the project using the `atom` command with a name differing only in case (e.g. `atom ~/FOo`).

**Expected behavior:** Atom restores the previously open tabs for that project.

**Actual behavior:** Atom creates a brand-new project with the wrongly-cased root folder `CApe`, and does not restore the tabs from the original project.
### Versions

OS X.11 x86_64, Atom 1.5.4.
",bug
"Multiple instances of Atom, multiple versions in Finder right-click menu","### Description

Atom has multiple instances open. And there's two versions of atom in the Open File With... Finder context menu.
### Steps to Reproduce

Open files in Atom. I use the Dock drawer, Finder context menu and `atom` command line tool to open things in Atom.

**Expected behavior:** One instance of Atom, multiple windows.

**Actual behavior:** 2+ instances of Atom, each with own Dock icon.
### Versions

1.5.3 and 1.5.4 (apparently, according to right-click menu)
",bug
atom.packages.resolvePackagePath(name) works incorrectly when directory with given name exists in current working directory,"### Prerequisites
- [x] Can you reproduce the problem in [safe mode](https://atom.io/docs/latest/hacking-atom-debugging#check-if-the-problem-shows-up-in-safe-mode)?
- [x] Are you running the [latest version of Atom](https://atom.io/docs/latest/hacking-atom-debugging#update-to-the-latest-version)?
- [x] Did you check the [debugging guide](https://atom.io/docs/latest/hacking-atom-debugging)?
- [x] Did you check the [FAQs on Discuss](https://discuss.atom.io/c/faq)?
- [x] Are you reporting to the [correct repository](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages)?
- [x] Did you [perform a cursory search](https://github.com/issues?q=is%3Aissue+user%3Aatom+-repo%3Aatom%2Felectron) to see if your bug or enhancement is already reported?

For more information on how to write a good [bug report](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-bug-report) or [enhancement request](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#how-do-i-submit-a-good-enhancement-suggestion), see the `CONTRIBUTING` guide.
### Description

atom.packages.resolvePackagePath(name) works incorrectly when directory with given name exists in current working directory. 
### Steps to Reproduce

Run the following commands in Developer Tools Console.

``` js
> packageName = atom.packages.getAvailablePackageNames()[42]
< ""autocomplete-html""
> atom.packages.resolvePackagePath(packageName)
< ""/usr/share/atom/resources/app.asar/node_modules/autocomplete-html""
> require('fs').mkdir(packageName)
> atom.packages.resolvePackagePath(packageName)
< ""autocomplete-html""
```

**Expected behavior:** Resolved path must be an actual package path.

**Actual behavior:** Resolved path may be a relative path to existing directory.
### Versions

```
$ atom --version
1.5.3
```

```
$ apm --version
apm  1.6.0
npm  2.13.3
node 0.10.40
python 2.7.6
git 1.9.1
```
### Proposal

[This line](https://github.com/atom/atom/blob/3b309792a531fb809d29c6742de956f50b3acec5/src/package-manager.coffee#L173) may be changed to the following:

``` coffee
return name if name !== path.basename(name) and fs.isDirectorySync(name)
```
",bug
Spawn/ENOENT thrown if the app is moved while it is open,"https://github.com/atom/atom/issues/9594 is a good example of this.
",bug
Restored window size set to maximized after exiting maximized,"When I exit Atom and window state is restored, its size is remembered; so when I start Atom again, the window starts restored and remembers its size. However, when I exit Atom maximized, the restored window size is set to maximized size; so when I start Atom again, it start maximized and when I click restore, the window size remains just the same (maximized size).

Simply said, nonmaximized window is too often set to maximized size and is just too big to normaly drag around and I have to manually resize window to smaller size each time.

**Reproduction Steps:**
1. Exit Atom maximized
2. Start Atom again and click ""restore window""
3. The window size is same as maximized

**Expected behavior:**

Restored window size should be remembered correctly, so you can actually restore window to its last size, not restore it to maximized size.

**Observed behavior:**

I am unable to test this on different OS than Windows 10. I think it's not Electron bug, since VS Code behaves correctly. The reason why this bothers me is that I can't just grab maximized window and drag it, because it's size is same as maximized (= just too big for dragging around screen).

**Screenshots and GIFs**

![output_qijguj](https://cloud.githubusercontent.com/assets/6060970/12868449/857bc078-cd07-11e5-9b7b-768d7669e253.gif)

**Atom version:** 1.4.3
**OS and version:** Windows 10

**Installed packages:**

minimap

**Additional information:**
- Problem can be reproduced in safe mode: Yes
- Problem started happening recently, didn't happen in an older version of Atom: No
- Problem can be reliably reproduced, doesn't happen randomly: Yes
- Problem happens with all files and projects, not only some files or projects: Yes
",bug
Graphical glitches that occur under Arch Linux,"Hi,

I have noticed that Atom 1.4.3 (have not noticed this issue with earlier releases of Atom) keeps experiencing graphical glitches, wherein tab titles, the toolbar and file windows become invisible or otherwise visually obstructed. Now to be clear by ""file windows"" I mean the windows (under the tab handles) wherein the contents of the file being edited is shown and can be edited, if my terminology is incorrect please correct me so that in future I can use the correct terminology when reporting Atom issues. In case my explanation is unclear I have taken screenshots of these bugs. These bugs seem to be plugin-independent as running Atom in safe mode makes no difference to these bugs. 

In this first example, you can see the second tab is partially obstructed in its view from the glitch.

![](http://imgur.com/a9IO6Sn.png)

In this second example, you can see parts of the file window and the left and centre tabs obstructed in their view:

![](http://imgur.com/a31M6oZ.png)

I know that some things seem to trigger its appearance, like scrolling down on larger files, switching between presently-opened windows, _etc._ If you want to know how I installed Atom well I installed it from my own PKGBUILD (which builds the Atom package from source code not from a Debian or RPM binary) which you can find [here](https://github.com/fusion809/PKGBUILDs/blob/master/atom-editor/PKGBUILD). I have observed this bug under two different desktop environments: Cinnamon and KDE Plasma 5 and with several different GTK themes. 

Oh and yes these bugs seem to be limited to just Atom. All other programs seem to be devoid of this bug. 

Thanks for your time,
Brenton
",bug
atom is ignoring files that shouldn't be ignored,"atom is ignoring files that begin with a `test_` for me on Mac. eg. `test_function.js`. These files are greyed out in the tree-view sidebar, and my linter isn't linting these files.

If i go to atom -> packages -> tree-view -> settings, and check ""hide VCS ignored files"", `test_function.js` disappears from tree-view side bar.

Neither the `.gitignore` in the repo nor my `~/.gitignore_global` has have anything that matches `test_*`. I ran git check-ignore in the working directory to see what rules git was applying from where.

```
$ git check-ignore -v *
<user>/.gitignore_global:7:**/_*    _tmp
.gitignore:1:node_modules/  node_modules

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

    test_function.js
```

Curiously, git status _is_ tracking the same file.

It seems that there isn't anything that would cause `test_*` to be ignored by atom, yet it is. The effect seems to be global. I've tried adding similar files to other repos and viewing the directory structure in atom, and atom ignores them everywhere.

Is there anything else I can do to find a cause ?
",bug
Standard mac hotkeys not working  on File Open choose directory  dialog,"Command-a, Command-c, Command-x etc all do not work when doing Command-o (file|open) and then Command-G (""Go to the folder"".

What am I supposed to do - retype a long long path character by character (since cut and paste do not work here..) ?

This is hopefully easy to fix but is otherwise a showstopper.
",bug
Double-click drag selections have unusual and bad behavior on non-word characters,"Note: This may not be a bug in the sense that the behavior may be intended, but many text editors (apple text input boxes, emacs) have better behavior.

To reproduce, enter the following text:

```
multiple words;)
```

Double-click and hold on the word `multiple` - this will select the word `multiple` and as expected enter a ""per-word"" selection drag.  Move the mouse to the right and the word `words` will be correctly selected all at once.  However, it is impossible to add the `;` to the selection without the `)`.  This is different behavior than you would see in some other text editors, including emacs and Mac OS default input fields.

The reason this is bad is it is harder than other editors to select `multiple words;`, without the close parenthesis.  This seems to come up a lot when programming and is my biggest pet peeve with atom.
",bug
RTL text selection,"When trying to select a RTL substring, the highlighted text seems to be current but if you just press delete button, It will delete another part of the text instead of highlighted.

also double clicking on the text will highlight another word/part of text. 

It behaves like the position of the mouse is horizontally invert on the RTL text.

Simulate it:
First Test:
این یک متن فارسی است
Select این With mouse down and mouse up and Press Delete button, and it will delete است instead of این:
این یک متن فارسی 

Second Test:
این یک متن فارسی است
Double click on رسی
رسی will be Highlighted but if you press delete, این will be deleted.
",bug
Atom QuickLook plugin on OS X,"Some apps bundle a QuickLook plugin (`.qlgenerator`) inside a `.app/Contents/Library/QuickLook` folder which OS X will load automatically.

It would be _really_ cool if Atom came with a QL plugin to render previews/thumbnails using the same syntax highlighting/theme as the editor.

I'd be happy to help out with this, but not quite sure how to go about it…
",enhancement
Default font size reset / deleted after command window:reset-font-size,"Hello everyone im not really sure if this is a bug or not.

In my config.cson i have fontSize setup to 11 and on the settings section as well on 11.

The problem now is when im zooming in in the editor, and press cmd-0 to call the reset-font-size command i would suggest to have my font size reseted to 11 again (my default font size) but instead it is reseted to 14 i think and on the config.cson my fontSize 11 is gone as well on the settings section.

T think this was working before (don't know when it broke).
",bug
Ligatures: put cursor inside of glyph,"when the cursor is inside of ligatures, it appears as if it was behind the last character.

firefox solves the problem by simply dividing the ligature width into parts equal to the number of ligated (ligatured?) characters and putting the cursor accordingly.

we should do the same.
",enhancement
Switching UI/Syntax theme does not display all elements in the new correct color,"Repro steps from @damieng https://github.com/atom/atom/issues/9550#issuecomment-322591908 

1. Install atom-ide-ui package
2. Open the diagnostics pane
3. Switch from One Light to One Dark or vice-versa
4. Observe wrong color for table column header

Actual part of the css is

```css
.nuclide-ui-table-header {
  font-weight: bold;
  background-color: @pane-item-background-color;
  border-bottom: 1px solid @base-border-color;
}
```

Where `@pane-item-background-color` is still resolving to the old value.

---

### UI theme

This can especially be seen when switching from white to black themes or reverse:
![themeswitching](https://cloud.githubusercontent.com/assets/11966684/11130908/f63e6bf8-8987-11e5-9162-00a59b8124d8.PNG)
![themeswitching2](https://cloud.githubusercontent.com/assets/11966684/11131319/70b2a4ec-898a-11e5-94ce-19dd86b7d37b.PNG)

When restarting Atom the theme is correctly applied. However at least one package also often ignores a restart and show the wrong colour. This is:
- editor-stats as reported [here](https://github.com/atom/editor-stats/issues/28) already previously where this issue only was about this single addon

And FYI when switching back to the theme you switched from everything is displayed normally (or as before you switched - `editor-stats` still looks like it looked always)

This is similar to the issue https://github.com/atom/atom/issues/8860 which was fixed before, but Atom does not show any warnings in the developer console.
### Syntax theme

I can also see this happening with the sytax theme. However here it only applies to `markdown-preview` (same issues as above; works when restarting Atom) and the editor seems to be changed correctly.
However when looking more carefully even here sometimes it does also not correctly change the font colour of a file (reproduced with a markdown file). When switching to a dark syntax theme the text stays grew. In this case also the global font setting is not applied correctly and does not change the font (note that it was correctly applied to a file opened after changing the theme).

One time it also did not changed the colour of the line numbers:
![linenumbers](https://cloud.githubusercontent.com/assets/11966684/11131689/2eeb2c6c-898c-11e5-9bf6-56956492bb67.PNG)

Atom 1.1.0
Windows 7
",bug
Horizontal Scolling From Trackpad Treated Like Arrow Keys,"When I use Horizontal Scrolling from my touchpad, Atom treats it like I am just pushing my left/right arrow keys, moving the cursor one character at a time left or right. Vertical Scrolling works great for me from my touchpad.

Behavior does not change with toggling the following settings:
- Scroll Past End
- Soft Wrap
- Soft Wrap At Preferred Line Length

OS: Windows 10 (this was happening on Windows 8.1 as well)
Atom Version: 1.1.0
Computer: Samsung ATIV Book 8
Touchpad: Elan Touchpad (ETDWare X64 15.7.0.1_WHQL)
",bug
Positioning Caret in CTL Text,"Use this sample Hebrew (rtl)

```
כָּתֵף
```

Starting from the extreme left, I would expect a right arrow either to move the cursor to the next visual position (that is, between the ת and the ף) or jump to what is the next logical position (between the כ and the ת). Instead Atom doesn't move the cursor at all. Functionally however, it has moved between the כ and the dagesh (middle dot), similarly if I hit the right arrow again, the cursor stays at point 0 but logically it is now between the qamets (the vowel point beneath the כ) and the dagesh.

This gets interesting when you hit the right arrow a third time. The cursor now moves between the ת and the ף but logically it is actually between the כ and the ת and if you hit backspace, it will remove the qamets).

This issue reported from https://github.com/atom/atom/issues/4007
",bug
GitHub Markdown syntax highlighting bug for bash codeblocks,"It seems like the syntax highlighting for bash code blocks ""leaks out"" when using the `GitHub Markdown` syntax highlighting.

Seems to be triggered by the keyword `if`.

![https://dl.dropboxusercontent.com/s/u3nhh3tiffs6spc/2015-10-29%20at%2014.33.png?dl=0](https://dl.dropboxusercontent.com/s/u3nhh3tiffs6spc/2015-10-29%20at%2014.33.png?dl=0)
",bug
File auto reloading with untracked git files during branch change,"Firstly:
Atom 1.0.19
Ubuntu 14.04.2 LTS

The file buffer autoloading fails to load changes from `git stash pop`s on files that didn't exist in the previous branch you were on.  That's kind of a confusing sentence so I'll elaborate.  In this repo https://github.com/acb/Atom-Test there is a branch `master` with the file `master.txt` in it.  There is also a branch `dev` that has a file `dev.txt` in it that does not exist in `master`.

Now perform the following steps (leaving `dev.txt` open in Atom the entire time):
1. `git checkout dev`
2. Alter `dev.txt` in some way
3. `git stash` -- changes in `dev.txt` are stashed and the buffer in Atom changes appropriately
4. `git checkout master`
5. `git checkout dev`
6. `git stash pop` -- changes in `dev.txt` are `pop`ped to disk, but the buffer in Atom **does not** update

No errors are shown in the console.

If this goes undected by the user they could accidentally save `dev.txt` and blow away their stashed changes without any warning.  The solution as of now is to close the file (and DON'T SAVE CHANGES when prompted) and reopen.  In Sublime Text in this situation you get a prompt stating that the file changed on disk and asking you if you would like to reload.

Attached is a gif of the behavior.  Please let me know if I can provide any more information, and feel free to use the repo linked above for any testing you may need.

![atom-bug](https://cloud.githubusercontent.com/assets/4690898/10678022/bcda2682-78dd-11e5-830e-c29b223c1763.gif)
",bug
Multiple applications running simultaneously,"Every now an again when I use the `atom` command line tool to open a directory in Atom it starts a new process instead of opening it in the already running process.

I don't see any pattern to it, more than that the first time it happens Atom has been running for hours, maybe days. If I just do `atom .` in two different directories after each other it opens in the same process, just as expected. Maybe it's just that I notice it more often when I get back to the computer in the morning or after I haven't used it for a long time, but it seems to happen more frequently in those cases.

Here's two Atom processes in my Dock just now, one of them contains the projects I was working in yesterday, and one of them contains a project that I just opened through `atom .`.

<img width=""178"" alt=""screen shot 2015-10-12 at 08 23 03"" src=""https://cloud.githubusercontent.com/assets/73330/10422429/88e58bbc-70ba-11e5-9fd9-939ef3a768b4.png"">
",bug
Problem installing Packages/ Themes and Updates (Corporate SSL Proxies),"Hello. This is related to #4974, #4975, and #4122.
## The Issue:

Trying to use Atom at work (to hopefully replace Notepad++), and was able to install Atom fine without a problem. However, when I went to install some packages, I received the following error:
![image](https://cloud.githubusercontent.com/assets/7026750/9408312/9fad910e-47df-11e5-8bb3-ff1230a1939f.png)

Same thing for themes:
![image](https://cloud.githubusercontent.com/assets/7026750/9408324/bcc3a9ae-47df-11e5-8f5b-16b14509cc4c.png)

And same thing for the featured packages:
![image](https://cloud.githubusercontent.com/assets/7026750/9408333/d64225cc-47df-11e5-93d7-2526ee7d3339.png)

And featured themes:
![image](https://cloud.githubusercontent.com/assets/7026750/9408336/e8349b98-47df-11e5-84d9-e235e9b05ccb.png)
## Background:

We use [Palo Alto Security Appliances](https://www.paloaltonetworks.com/products/platforms/firewalls/pa-5000/overview.html) to protect our ingress and egress network traffic from malware and other threats to our network and data. Palo Alto does this by using a wildcard certificate that has been generated from our Enterprise PKI and which is trusted on all Company-owned workstations and servers.

> Not looking to get into a debate about SSL decryption or man-in-the-middle attacks for SSL. This is at my work, and we have legal and regulatory requirements to break SSL, inspect the traffic, and then re-encrypt it before it leaves our network.

I know _why_ Atom is failing here. It's seeing what it thinks is a bad certificate in the mix, and that the traffic is being attacked (MiTM). I understand _why_ Atom is failing here. But in this case, the traffic is _legitimately_ being broken, for _legitimate_ reasons.
## Feature Request:

I would like to request the addition of a hidden configuration option that, when enabled, would cause Atom to **ignore SSL certificate errors**.

> Yes I know this is risky for end-users. Yes, I know this reduces the overall security, which is why I don't think the configuration setting should be easily ""discoverable"" or that there shouldn't be a UI element for it. Hopefully that wouldn't allow a non-technical user to accidentally enable it and potentially reduce their security.
### Alternately:

If Atom would show the actual URL that's being blocked, or that raised the error, we could then add the URL to a white-list to bypass SSL decryption on our side, allowing packages and themes  to be installed.

Of course, it would be helpful if packages and themes were distributed from a central repository with a common organizational structure and naming convention. :smile: 

---

Thanks so much for considering this feature request.

Running Atom 1.0.7 on Windows 7 Enterprise SP1.
",bug
There is no naming convention of scope selectors,"I assume Atom follows TextMate [naming conventions](http://manual.macromates.com/en/language_grammars#naming_conventions), but there is no mention about it. It causes misunderstandings([1](https://github.com/atom/language-javascript/issues/47), [2](https://github.com/atom/solarized-dark-syntax/issues/21), [3](https://github.com/atom/language-coffee-script/issues/33) etc.) Also many language packages don't follow it. Syntax theme looks awful for these languages. Syntax-theme developers must create a syntax rule for each language. It's a real headache.
##### I suggest:
- Add docs for grammar naming conventions
- Mention about naming conventions
  - ... in generated `syntax.less`
  - ... in grammar files
- Make sure general languages follow naming conventions:
  - [Javascript](https://github.com/atom/language-javascript/issues/201) atom/language-javascript#206
  - [C#](https://github.com/atom/language-csharp/issues/33) atom/language-csharp#34
  - [Go](https://github.com/atom/language-go/issues/62)
  - ...

Mention in files might be something like this:

``` less
// See list of scopes in ""Naming Conventions"" section of the
// TextMate Language Grammar Guide:
// http://manual.macromates.com/en/language_grammars#naming_conventions
```
",enhancement
Copy-paste doesn't work properly with Unix-style line endings under Windows,"Copying (Ctrl+C-Ctrl+V) from a file with Unix-style line ending (LF) doesn't work as expected, since line endings are _preserved_ on the clipboard.

This causes a wide range of issues:
- you can't paste text in an application that doesn't handle LF (notepad for example, but if you're using vim over PuTTY that also doesn't work)
- even if the other app handles LF, you have to be consistent, so you can't paste text from an CRLF file into a LF one or vice versa

This issue is briefly discussed in #2822, and it is the reason of #5808.

**All other editors convert line endings in text placed on the clipboard** (Sublime Text, jEdit, etc.), so in this regard Atom behaves rather strangely compared to other editors.

The proposed solution in #2822 (configurable line endings) is insufficient since it's based on the assumption that _all_ files edited by the user are using the same line ending.
For example, if I've got a file with LF line endings and I'd like to use copy-paste, then I **have to convert it to CRLF** and then **copy the text** I want, and **then convert it back to LF** to preserve the original format. I wouldn't call editing LF files on Windows a rare use case, especially among Atom's users.

Atom should convert any text's line ending to the platform's native line ending _before_ it is placed on the clipboard. This conversion should only be done on the content that is placed on the clipboard—the text in the buffer should not be changed.
",bug
Atom does not recognize git worktree repositories,"When `git-repository-provider.coffee` searches for the git repository it looks for the `.git` directory, however `git worktree` creates repositories that have `.git` file that has `gitdir: path/to/gitdir` as contents. As a result atom cannot currently work with repositories created with `git worktree`. Unfortunately even making `.git` a symlink doesn't work, since worktree gitdir doesn't have `objects` or `refs` subdirectories.

Atom should recognize `.git` files that start with `gitdir:` as valid git repositories.
",enhancement
Context-menu triggered by menu key is positioned at the mouse cursor,"Using Atom 1.0.1 on Windows.

When summoning a context menu with the keyboard menu key, expected behavior (from visual studio, sublime, google docs, etc) is for the menu to be rooted at the input cursor. Instead, the Atom context menu is rooted at the position of the mouse cursor.

![atom-cm](https://cloud.githubusercontent.com/assets/10780590/8635149/f51dd40a-27f0-11e5-988d-7057a6106984.png)

In the picture, the context menu should be positioned with the input cursor on the misspelled word. 
",bug
Sign Linux releases,"Could you please provide a signed checksums file or sign the files themselves for releases so we can cryptographically verify them.  Thanks
",enhancement
Deactivate multiple cursors feature (on Ctrl+mouse click),"I searched already several times but I cannot find out how to deactivate multiple cursors or how to change/deactivate the key binding. Finally, I open the issue here.

If there is an option for this, how could I possibly find it; or rather, how can I find and search available configuration options in my version of the editor?
The compiled coffeescript may make it hard to find options by using `grep`.
",enhancement
Cannot install shell commands if no window is open,"Atom 1.0.0
Mac OS X 10.10.3

_Description_

If there are no windows open, the menu command **Atom > Install Shell Commands** is not available. This command should always be available.

_Step to Reproduce_
1. Launch Atom
2. Close all windows
3. From menu bar, choose **Atom > Install Shell Commands**

_Expected Behavior_

The command should be available (black text).

_Observed Behavior_

The command is not available (gray text).
",bug
Frequent recurring freezing on Windows,"I am getting random freezes and crashes on Windows 7. I am using Atom version 0.209.0.

Freezing occurs randomly (i.e. not all the time) when:
- changing values in the settings window.
- opening files (infrequent, big files seem to cause crashes more often).
- installing packages
- uninstalling packages
- closing tabs

I can't find any log files to get more information. The program is completely unresponsive and devtools console is not updated.
",bug
editor:select-to-end-of-line should work similarly to editor:move-to-end-of-line,"I'd normally use the `Shift + End` buttons to select the text from the current cursor position to the end of the line, but this doesn't seem to be working with Atom.

Let's say I have this long line:

```
This is a very long line of text that is used to test a bug report in Atom.
```

Now let's say I resize Atom's window so the line can't fit in a single row, specifically, the text `port in Atom.` is forced on a new row.

Now,  I'd expect that if I place the cursor at the beginning of the line and hit `Shift + End`, the entire text is selected. I'd even accept as a reasonable behavior if Atom selects everything up to the `test a bug re` part, but that is not the case. Atom is actually selecting everything on the first row of the line, except the last character. That is, in my example, after placing the cursor at the beginning of the line and hitting `Shift + End`, Atom is selecting this:

```
This is a very long line of text that is used to test a bug r
```
",bug
"""Add Project Folder…"" menu item does nothing if no window is open ","I am using Atom Version 0.204.0 (0.204.0) on OS X 10.10.3.

If there isn't a window open but you select ""Add Project Folder…"" from the ""File"" menu nothing happens.

The expected behavior would be for a file selection dialog box to appear and then to have a new window open with the selected folder added as a project.

(Alternatively, the menu item could be greyed out I suppose but having it operational would match the behavior of the ""Open…"" menu item.
",enhancement
Atom may open windows off-screen if resolution/monitors have changed,"### Reproducible Steps
- Use a laptop with docking station connected with dual monitor setup.
- Move atom editor to second screen.
- Quit atom editor.
- Remove laptop from docking station (or use single screen setup).
- Try open atom editor again.
- Atom editor displayed on second screen, regardless whether second screen exist.
- No easy way to force atom to display on first screen.
### Tested Environment

Atom 0.201.0
Windows 7
",bug
Show invisibles only when selecting text,"I tried searching for a similar issue here and I didn't find anything that directly addresses what I want, though #3249 (which I have subscribed to) is what I want, just asked for in a very roundabout way.

In short: we should have an option to only display invisibles within a selection. Showing them all the time is too noisy, not showing them at all loses their power, and turning them off and on when I want to see them is annoying. I'm aware that with CSS we cannot achieve what is required (hence unresolved #3249, and accompanying [forum post](https://discuss.atom.io/t/atom-is-so-powerful-that-it-blows-my-mind/294/17?)) due to the underlayer controlling the background highlight. So this will presumably be something that atom must provide from within the core.

If this request appeals more as something that's more generic (and allow us to achieve what we want with CSS) you could actually just attach a `.selected` class to all elements (scopes) that are within the selection (obviously a selection part-way through an element will require an inner span injected with just the `.selected` class). This way, we can do what we want in regards to the invisibles, but package developers may find interesting ways to use this selection class/scope for other purposes.
",enhancement
Autoindent not working properly,"Version: 0.192.0
## Problem

1) `autoindent` fails to indent parameter lists. Note: If I hit enter after `fake_function(`, `param=` would be indented 3x -- class > def > foo.

``` python
class Bar(unittest.TestCase):
    def test_indentation(self):
        foo = fake_function(param='hello',
        second_param='world', # should have indented this line
        ) # and this one, too
```

After saving, `atom-beautify` correctly indents the parameters

``` python
class Bar(unittest.TestCase):

    def test_indentation(self):
        foo = fake_function(param='hello',
                            second_param='world', # fixed!
                            ) # me, too!
```

2) But now, `autoindent` fails to reset indentation back to the beginning of the line

``` python
        [...]
        foo = fake_function(param='hello',
                            second_param='world',
                            )

                            bar = 'after_continuing typing' # ach!!
```

Unfortunately `atom-beautify` doesn't quite fix this ever time.

``` python
        foo = fake_function(param='hello',
                            second_param='world',
                            )
            bar = 'after_continuing typing'
```
## Note

I recently updated atom-beautify as an attempt to help resolve the issue, but I am now getting errors there. The problems mentioned above still exist, but I will update if anything changes.
## Update

Here's some testing in 
#### Sublime3:

``` python

def testing_indentation_in_sublime(some_var):
    first_line = ""works""
    second_test = func_indentation(multiple_param,
        auto_indents,
        still_here,
        ) # parenthesis auto matched when typed!

    third_test = alt_indentation(
        looks_just_like above,
        which_was_wrong,
        but_this_works,
        )

        fourth_line = existing_indentation('retry last pasting',
                                       'broken') 
        and_indent_is_kept

    fifth_line = backspace_only_does_one_space('testing existing indent',
                                               'testing')
    indentation = ""working!!""

    if check_nested_indent is not None:
        basic_indent = True
    elif check_indent:
        also_works = True
        if nested:
            so_far = so_good
        else:
            also_good = True
        else:
            uh_oh = 'is this really that hard?'

    return end_of_function

    def still_indented():
        '''sigh.'''
        indentation = 'not perfect here, either (but way better)'
```
#### Eclipse

``` python
def indent_test_eclipse(some_var):
    first_line = 'smoke test'
    second_test = func_with_param(style_one,
                                  hey_it_works,
                                  )
    back_to_the_beginning = 'holy crap.'
    third_test = func_with_alt_style(
                                     hrmmm,
                                     )

    if nested_indent is not None:
        basic_indent = True
    elif reindents_on_space_not_colon:
        still_okay = True
        if nested:
            so_far = so_good
        else:
            also_good = True
        else:
            must_be_difficult = True

    return end_of_function

def correctly_indents_after_return():
    '''Woo hoo'''

    return True
```
",bug
ShipIt service crashes,"I have Atom 0.138.0 on Mac OS X 10.10.3
When I launch it, it downloads a newer version, prompts me to provide admin password to add a new helper. Then I start seeing the service errors non-stop at Mac Console (please see below). It seems that update does not succeed.

4/15/15 9:21:37.153 PM Atom[66263]: Download completed to: file:///Users/adil/Library/Application%20Support/com.github.atom.ShipIt/update.e0Ofe6m/download
4/15/15 9:21:42.735 PM com.apple.SecurityServer[86]: Killing auth hosts
4/15/15 9:21:42.735 PM com.apple.SecurityServer[86]: Session 100166 destroyed
4/15/15 9:21:53.705 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) The Debug key is no longer respected. Please remove it.
4/15/15 9:21:53.731 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt[66283]) Service exited with abnormal code: 1
4/15/15 9:21:53.731 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds.
4/15/15 9:21:55.750 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt[66284]) Service exited with abnormal code: 1
4/15/15 9:21:55.750 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds.
4/15/15 9:21:57.768 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt[66285]) Service exited with abnormal code: 1
4/15/15 9:21:57.768 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds.
4/15/15 9:21:59.791 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt[66286]) Service exited with abnormal code: 1
4/15/15 9:21:59.791 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds.
4/15/15 9:22:01.811 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt[66287]) Service exited with abnormal code: 1
4/15/15 9:22:01.811 PM com.apple.xpc.launchd[1]: (com.github.atom.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds.
4/15/15 9:22:01.949 PM sudo[66288]:     adil : TTY=ttys000 ; PWD=/Users/adil/Library/Application Support/com.github.atom.ShipIt ; USER=root ; COMMAND=/bin/launchctl stop com.github.atom.ShipIt

*\* Also from ShipIt_stderr.log **:
2015-04-15 21:21:53.729 ShipIt[66283:5623798] Installation error: Error Domain=SQRLShipItRequestErrorDomain Code=2 ""Could not read update request"" UserInfo=0x7fb2aa609110 {NSLocalizedDescription=Could not read update request, NSUnderlyingError=0x7fb2aa606fc0 ""The file “ShipItState.plist” couldn’t be opened because there is no such file.""}
2015-04-15 21:21:53.729 ShipIt[66283:5623798] ShipIt quitting
",bug
Atom Editor Doesn't Come to Foreground,"Hi,

My OS is Ubuntu 14.10. I use Unity as my window manager. Atom version is 0.188.0. 

If I open a file from Nautilus file manager by pressing ""Enter"" or by double-clicking, Atom often doesn't come to foreground. (Its icon wobbles in Unity dashboard.) To see it, I have to switch to Atom manually. Only after that, I can work on the file. 

I made some tests. It happens when Atom is already open and if I use Alt+Tab key combination. If I never use Alt+Tab to switch between windows, then there's no problem. Otherwise, first I've to open file, then manually switch to Atom window. Unfortunately It's inefficinet way to work.

What I want is, Atom should always come to foreground, if I open a file. Is there a workaround or a patch for this problem?

Kind regards,
Cagatay
",bug
Atom should save new files where the last opened/saved file was,"When you create a new buffer and hit save, Atom will present me with a save dialog and the default selected folder is the project root. That's almost never the place I want to put a file.

Sublime Text was a lot smarter with this -- although I do not remember the exact heuristics. For example, it would propose saving the file in the same location where the file you last had opened was. This worked really well for me: Usually I create a new file by splitting an existing file, creating a test for a module (and those two are in directly adjacent directories) or similar.

Even if I want to save to the root directory, which is the current behavior, navigating upwards in the file save dialog is really simple.

PS: I am using Atom 0.187.0
",enhancement
Enable jumping between menus using left-right arrow keys,"If there is no sub-menu to a menu-entry, I would like to switch to the next menu when I press the left/right arrow keys. Also when I'm on the last nesting level in a sub-menu, I'd like to switch to the next main menu entry. If the said feature already exists it does not work for me on Ubuntu 14.04 using Atom version 0.187.0.

To clarify what I'm saying:

![zhhmfqqzcz](https://cloud.githubusercontent.com/assets/5445560/6683412/0d669cf4-ccac-11e4-9181-398ea6be26e8.png)

In the above scenario, I would like to be able to switch to the ""Selection"" menu when I press the right arrow key, other than when I press it on the ""developer"" menu-entry, which will open the sub-menu like it already does. However, inside the developer sub-menu also pressing the right arrow key does not take me to ""Selection"".

~~Another such issue is that once I've opened a menu with ""alt+ "", say ""View"" with alt+V, I'm not able to open selection with ""alt+S"" unless I close the view menu first.~~

Thanks.

**EDIT**:- It's UbuntuMATE 14.04, so I'm in a MATE-desktop environment.
",bug
"The insanity of Unicode's ""RTL override""","This is a bug report mostly based on [this neat article](http://habrahabr.ru/post/252813/). I'll summarize the essence that relates to Atom, right here. Consider this snippet of Python:

``` python
def maps():
    print ""maps maps maps""

def spam():
    print ""Erasing everything...""
    print ""done.""

s = ""spam‮"" ,spam ,""‬spam""
# ^ attention to this line: try selecting it with your mouse
s[1]()
```

That line, properly escaped:

``` python
s = ""spam&#8238;"" ,spam ,""&#8236;spam""
```

The symbols of interest, in order of appearance, are `&#8238;` or RLO (right-to-left override) and `&#8236;` or PDF (pop directional formatting). They, respectively, reverse text direction and set it back.

Atom expands this combination just like a browser would, it actually displays that RLO-PDF piece in reverse. However, interaction with it is... awkward. Start with the fact that you can't (at least visually) move your cursor inside that gap in any way.

Look at this. With ""Plain text"" grammar on, I've selected that line:

![Screenshot](http://i.imgur.com/q6KKB0M.png)

Noticed that? 10 units of extra space. Notice also, that between RLO and PDF are exactly 10 characters. That's a hint. However, once I switch on Python grammar (and RLO-PDF interval is now contained in multiple elements), things get even more awkward.

![Screenshot 2](http://i.imgur.com/QpOpCDm.png)

Not 10 units, as before. Now we have only 4. And from that moment, I don't have a slightest clue about what's going on, but something needs to be done about that.

This needs a discussion. I can immediately come up with these two general directions:
1. Interpret as designed in Unicode. Fix the UI, make the cursor work properly and not introduce gaps like the ones above.
2. Represent Unicode control characters with some sort of ""placeholders"" and don't let them act as designed in Unicode.

Personally, I stand for placeholders, as Atom is mostly a code editor, and code is a raw sequence of characters. It makes sense for Atom to display it as closely as possible to how the parser will see it.

In those cases when plain text is used to author a document that makes use of these sequences to display properly, ""preview"" plugins come into play and let you preview the document as it will look after processing.

Thoughts?
",bug
Three finger tap for definitions doesn't work on OS X ,"In a Mac text view or web view, when you three finger tap a word it becomes yellow and a popover window with definitions (from country specific dictionaries and wikipedia) appears. Not so in atom.
I find this very annoying since I use that feature a lot. I'm not sure if this is a bug or a feature request since it is standard in all (not strictly) other similar apps.
",bug
Auto indent on paste behaves oddly with already indented lines.,"When copying a segment of code that starts with a new-line followed by tabbed-in code while ""Auto Indent On Paste"" is enabled, consecutive pastes will each be an additional tab deeper. I tested this with C++, Java, and JavaScript which makes me believe it is not a problem with the language specs.

Here is an example in the form of an animated gif:
![autoindent-2](https://cloud.githubusercontent.com/assets/466761/6118758/d4ce2e04-b075-11e4-864b-46726fcd809e.gif)

It isn't just comments that this happens with, but it does require the previous line to be selected. Specifically, this happens when the copy-buffer matches a regex like `/^\n\s+[^\s]/`. That is, it starts with a newline, followed by one or more whitespace characters and then a non-whitespace character. And the previous line must be a blank line.
",bug
Man pages for atom and apm,"Besides the `--help` and `-h` command line options/arguments, `atom` and `apm` should also have man pages. Moreover, Emacs and Vim have online documentation for their command line arguments and/or environment variables, too:
- http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html#Emacs-Invocation
- http://vimdoc.sourceforge.net/htmldoc/starting.html#vim-arguments
",enhancement
Javascript comment indentation,"When auto indenting JS comment blocks, 

```js
/**
 *
 */
```

becomes:

```js
/**
*
*/
```

Since the first version is a pretty common comment block pattern (used in JSDoc and YUIDoc and similar projects), it'd be great if the auto indent feature could support this indentation instead of messing with it.
",bug
Smooth scrolling (Linux),"I've seen some work in improving the smoothness of scrolling so far. But I'm wondering if it's actually possible to get real smooth scrolling or at least if it's planned for the near future?
Just reducing the scroll sensitivity to 1 line at a time is not a real solution...
",enhancement
Per-project config settings,,enhancement
File replacement does not work against directories,"When saving a new file, if you decide to save it as the same name of a directory (no extension), it will ask if you would like to replace it. If you choose yes, it will error saying that that file is already a directory 

I am running Atom 0.165.0 for OSX.

There is no log in the debug console to provide.

There are basically three solutions to this:
1. Have it error after the ""replace"" button is clicked but before the dialog box is closed
2. Have it replace the directory
3. Have it handle directories and files separately (I'm not sure about other operating systems, but I'm pretty sure on OSX it considers them <name>.folder)
",bug
Atom doesn't respect/update OSX's find pasteboard / clipboard,"In OS X there's a separate pasteboard, NSFindPboard, used to keep search fields in sync.  The pasteboard gets updated when a search field changes or the user hits ⌘-E with text selected.  It can be pretty handy when you're searching through code for the same keyword, and most apps seem to generally respect it (Safari/XCode/Chrome/etc).  In general it seems like apps check it when they become active and update their search fields.

Chromium definitely supports NSFindPboard ([with some of the impl here](https://chromium.googlesource.com/chromium/src/+/git-svn/ui/base/cocoa/find_pasteboard.mm)), but I'm not sure that stuff is accessible at all from the Javascript layer.  

One option is just to shell out to pbpaste/pbcopy to get/update the pboard's contents, as in:

```
 pbpaste -pboard find
```

will dump the contents of NSFindPboard to stdout.

You could also technically get at it with NodeObjC, but that seems like overkill.
",enhancement
Atom does not start when using x2go,"- I first saw the issue for version v0.152.0 debian package in ubuntu 12.04 VM running on vmware ESXi.

$ [20853:1201/101159:ERROR:browser_main_loop.cc(162)] Running without the SUID sandbox! See https://code.google.com/p/chromium/wiki/LinuxSUIDSandboxDevelopment for more information on developing with the sandbox on.
Xlib:  extension ""XInputExtension"" missing on display "":10.0"".
Xlib:  extension ""XInputExtension"" missing on display "":10.0"".
App load time: 368ms
[20877:1201/101159:ERROR:gl_surface_glx.cc(333)] GLX 1.3 or later is required.
[20877:1201/101159:ERROR:gl_surface_x11.cc(57)] GLSurfaceGLX::InitializeOneOff failed.
[20877:1201/101200:ERROR:gpu_child_thread.cc(143)] Exiting GPU process due to errors during initialization
atom: Fatal IO error 11 (Resource temporarily unavailable) on X server :10.0.
- I then installed it from webupd8 team:

sudo add-apt-repository ppa:webupd8team/atom
sudo apt-get update
sudo apt-get install atom

However I got the same issue. 
- I compiled then from sources following all instructions from README but still got the same issue.

To replicate just right click on a file to get a context menu and once you start moving your mouse it will fail with the error above.
- I updated to latest version debian package (186) won't even start. It will fail right up front with the same error. 
",bug
Undo/Redo doesn't affect file operations,"Any operation that changes the file system isn't being affected by Undo/Redo. For example, adding a file:
1. Right click project tree
2. `Add File`
3. Enter name for new file
4. Press Enter
5. Hit `Ctrl+Z` or go to `Edit` > `Undo`
6. Nothing happens, the new file is still there

Same thing for deleting files.

System is Ubuntu 14.04 x64, Atom 0.152.0.
",enhancement
Implement Chromium task manager,"Users frequently report issues with high CPU or memory usage, and the typical response is that it must be a package that is the root cause, not Atom itself. Presently, the operating system task managers just show a bunch of Atom Helper processes, so it is impossible to determine which package is associated with the offending process.

Since Atom is based on Chromium, it would be beneficial to implement the Chromium task manager so that a user can see resource usage by package. Here is what Chromium's task manager looks like:

![screen shot 2014-10-25 at 8 46 34 am](https://cloud.githubusercontent.com/assets/157270/5021790/eb491578-6a97-11e4-81b5-feb2330f2360.png)
",enhancement
Notify when file has changed outside of atom on unsaved buffer,"today i worked on a project with sublime text and atom. i edited a file on sublime text, saved the changes and opened atom(the same file). both editors were open at the same time. but when i go to atom, there was no change detection to the file and all the changes, made in sublime text, were gone.

what i miss is a popup, mentioning that the file has changed and ask whether reloading.
",enhancement
[Feature Request] Folding for include/import statements,"Android Studio (based on IntelliJ) has the ability to fold Java imports.
This would be nice to have in Atom for Java and possibly other languages.
",enhancement
Ability to log in with GitHub account to sync Atom config,"It would be great if I could login with a GitHub account and have Atom store my settings either in Dropbox, or GitHub as a repository, or in some way that is easy to access and maybe even sync them across all my installations of Atom so that when I download a new package, it is downloaded everywhere. Another suggestion is to be able to manually export a .atomconfig JSON file that I could just import to Atom at any point to configure settings, install packages, change themes, etc.

I think having the first would be more important for most people, but for anyone who is offline and for anyone who likes to keep their own backups in other places, the manual settings export is really useful.

If this sounds like a good idea to Atom contributors and consumers, I'd like to help out with the PR to make this happen.
",enhancement
Don't render byte order mark (BOM),"Currently the `\ufeff` character at the beginning of files is rendered in the editor.

Other editors seems to ignore it so Atom should probably behave the same so it isn't deleted accidentally.

Currently it is an invisible space, notice the status bar in the gif below as move left/right is triggered at the beginning of the file.

![bom](https://cloud.githubusercontent.com/assets/671378/4093771/b1dbce20-2fa0-11e4-91e0-14f7039502ca.gif)

Also perhaps adds a command to strip the BOM
",bug
Atom can lock files or folders under some circumstances,"Instead of vaguely explaining, here are the steps for reproducing the bug:
1. If you have a Yeoman-created project folder i.e. `generator-webapp` created project, run `grunt serve`. It'll create a .tmp file, and I'll assume you haven't had one at first.
2. When everything goes well expand the folder .tmp in Atom so you can see the subfolders inside.
3. Stop the grunt process.
4. Run `grunt serve` again, and it will run `grunt-contrib-clean` to delete .tmp. 

It won't. .tmp will still exist as a ""corrupted file"" and you can't delete it by the Windows Explorer. Command line will show `Warning: Unable to create directory [path to .tmp folder]"" (Error code: EPERM). Use --force to continue.` when trying to create a new .tmp folder.

Go to Atom and try to delete it, and the Dev Tools will show the same error: `Uncaught Error: EPERM, operation not permitted: [path to .tmp folder]`. All you need to do is close the folder again on the sidebar to remove the folder. I also tried the same method to Sublime Text, and it doesn't do the same, so I assume there's a clash between `grunt-contrib-clean` and Atom's way of handling files.

Atom is 0.123.0, and Windows is 8.1. Command line running Grunt is running as Administrator.
",bug
Keybinding to Rename The Current Buffer,"When saving a new file above the root folder of the current project, there is no way of reaching it via the tree view. It would be nice to be able to rename the current buffer by using <kbd>F2</kbd> or whatever maps to `tree-view:move`. As a workaround, one can open another Atom in the containing directory and rename/move the file from there using the tree view.
",enhancement
Possible Translations?,"Hi, how can I translate Atom into Azerbaijani language? Thanks!
",enhancement
Tab Length Detection,"Default setting for tab length is 2 spaces.
- When I open a file that uses 3 spaces for indentation, and press `Tab`, I expect editor to insert 3 spaces (currently 2)
- When I open a file that uses 4 spaces for indentation, and press `Tab`, I expect editor to insert 4 spaces (currently 2)

There already were discussions to allow custom settings [per language](https://github.com/atom/atom/issues/1723) or [per project](http://rosettacode.org/wiki/Knapsack_problem/Bounded#JavaScript), although **this issue is do detect indentation automatically on file open**, because there can be different guidelines for same language files on same project. It is also handy when editing unrelated files.

Default 'tab width' setting is to be still used when creating new files and for `\t` display width.

---

Here is a screenshot from proprietary Sublime Text (some of these features are for [atom/whitespace](https://github.com/atom/whitespace), but I think initial detection should be handled in core.

![tab_size](https://cloud.githubusercontent.com/assets/7157049/3666025/3ab2ba06-11ec-11e4-81c3-d125259a0eef.png)
",enhancement
Overtype mode isn't working,"After pressing `Insert` key, editor should engage overtype mode, in which the cursor, when typing, overwrites any text that is present in the current location.

![out2](https://cloud.githubusercontent.com/assets/7157049/3642782/b7a43272-10c7-11e4-8472-fe555df4f1e5.gif)
",enhancement
[OS X] Atom shell command should not show a (temporary) second dock icon when Atom is already open,"Having _Atom_ running, when you open additional files (or try to open a file that you have already open) from the _Terminal_, _OS X's Dock_ will show a temporary second _Atom_ icon (and then it goes away). This should not be the case.

See how _TextMate_ 1.5.x doesn't do this when you use the _mate_ shell command. Same for opening _Sublime Text_ running _subl_ from the terminal.
",bug
process.cwd() behaviour,"It's not a bug, it's a feature!

If I start multiple instances of atom, process.cwd() is the same for all instances (matches the cwd of the first instance started). Even if that one is closed process.cwd() continues to be the cwd of the first instance.

Produces lots of funny bugs if I don't use absolute paths with `fs` for example. 
",bug
"Support configurable, non-uniform, visually aligned tab stops","I would like to raise the issue of configurable tab stops.

A proposal has been floating around the web for a few years, called [Elastic tabstops](http://nickgravgaard.com/elastictabstops/), that promises to usher in the ""next generation"" of source code alignment.

It aims to make it easy to align code blocks and side comments, both for traditional coders using monospaced fonts, and for those of us who prefer proportional fonts.

It would also make it easy to edit tabular data, be it TSV (tab-separated values) or a table in Markdown or other markup languages.

I would gladly write an extension myself to realize elastic tabstops, but unfortunately it's one of those things that require a very specific feature in the editor component: **the ability to specify non-uniform tab stops, as a list of visual positions (eg. pixel or em, _not_ characters) that may be different for each line.**

Right now the tab support in Atom is just a trick (a span with a certain number of blank characters), it's not even a true tab stop, as is painfully evident when using a proportional font:

![screen shot 2014-06-06 at 15 38 14](https://cloud.githubusercontent.com/assets/48756/3200906/0830fd42-ed82-11e3-9b00-b39a15ac2fd9.png)

Seeing as work is currently underway to write the newer React-based editor component, I just wanted to throw this feature request out there to the clever people writing such code.

I'm fully aware that it is not a simple task, because it transcends the character-counting nature of the current code. Doing it without triggering a reflow for each tab stop (to query the current width of the line being composed) is even harder. It would require pre-caching the em-width of every character for the current font, or something along those lines.

But it's one of those features that would set Atom apart from any other editor.

Again, the tricky part is just the configurable tab stops. That would allow extension writers to align code, tables, and other data with various algorithms, including Elastic tabstops.
",enhancement
Create an `atom bisect` command for determining which package is causing a problem,"Similar to the `git bisect` command, this command would load Atom with a subset of the packages available to it. It would launch Atom, then when Atom exits it could ask for ""good"", ""bad"", ""reset"" or ""quit"". It would perform a binary search of the packages until only one package is left and is marked bad (the most likely scenario) telling the user which package it is.
",enhancement
Add support for block / column selection,"In plenty editors, doing `left-alt` (left option) and selecting text will take a slice of that text:

![sublime](https://cloud.githubusercontent.com/assets/1189716/3020145/21a1ced6-df9b-11e3-9cf2-70371ca5fee1.gif)

Notice that only characters are selected, empty lines are ignored. Also, after selecting with `left-alt`, there should be multi-cursors at the end of each selection:

![reslice](https://cloud.githubusercontent.com/assets/1189716/3020149/2d06c1c8-df9b-11e3-9a39-226039d0f777.gif)

The GIF are from Sublime, the same behavior is observed in TextMate, IntelliJ, vim (visual selection).

The current behavior in Atom is to perform a normal text selection:

![atom](https://cloud.githubusercontent.com/assets/1189716/3020155/3bbc4512-df9b-11e3-97a8-1acab2dd686f.gif)
",enhancement
Add a way to handle mouse with keymaps,"_Suggested tags: `enhancement`_
_(Suggested in [PR #2246](https://github.com/atom/atom/pull/2246))_

Mouse behaviour should be handled with `keymaps/*.cson`.
Normal mouse behaviour isn't helpful there, but it would be handy for mouse+keyboard combo.
Of course, cutom keymaps and extension would also benefit from this feature.

_Next: Joypad support! :smile:_
",enhancement
Tree view and status bar show files with accented characters as new,"Halp ticket:
- support/6c407d52c9f711e38a0cc47a4027f259

> Git support does not handle files with accented characters correctly, declaring them as new. See e.g spec/fixtures/subdir/áccéntéd.svg in atom/markdown-preview or lloeki/svg-preview plugins.

Steps to reproduce:

```
$ git clone  https://github.com/lloeki/svg-preview
$ cd svg-preview
$ atom .
```

Notice that there's a file marked as new in the tree view -- `spec/fixtures/subdir/áccéntéd.svg`.

![dbb695e0-ca24-11e3-9ef4-e37cbd560a08](https://cloud.githubusercontent.com/assets/38924/2766300/8021b38c-ca2d-11e3-95fc-973f0db52106.png)

However, I can't reproduce this issue with the markdown-preview repository which has a file with the same name.
",bug
Accessibility,"Was using Atom today during a presentation.

While Atom's not necessarily part of that evaluation, I noticed that VoiceOver thought the focus was on the close button the entire time. 

Since we're in a web browser, theoretically accessibility should be a given, but may be something to keep in mind going forward if it's an easy fix.

//cc @muan, @nuclearsandwich, @eanakashima
",enhancement
ctrl-cmd-down combo for switching lines produces a sound,"Reported by a few users:
- http://discuss.atom.io/t/audible-bell-sounds-when-moving-text-down/2089
- support/fc6c2ac6a04d11e38e5adef6c2d169fb
- support/25cfbdeca0ad11e389626d489492fcbc
- support/b537abfea0b011e3946f5df3635c9d01

> If you highlight text in Atom and then press CTRL+CMD+DOWN ARROW, the text will move, but you'll get an audible warning bell. This doesn't happen when moving text upwards.

Did a bit of digging, and it seems that [Brackets has the same problem](https://github.com/adobe/brackets/issues/2419).
",bug
Add some security precautions to package installation,"- [ ] When installing a package, display a warning dialog that describes how packages have the capability of being malicious.
- [x] Link GitHub identities closely with packages (will be easy because everything in the package store will be hosted on GitHub.)
- [x] Ability to flag package as malicious and convey this message to users who have installed package.
- [ ] **Possibly** Log I/O, shelling, keychain access, etc... so people can see what is going on without their knowledge.
",enhancement
"""Non-native"" Fullscreen on OSX?","This is not a huge priority and may even be a ""wontfix"" (which is completely ok)

Currently when using Fullscreen in Atom it does what nearly every Mac app does post 10.7, creates a new space, and goes full screen over there. 

This is a bummer since it kills your second screen, and any cmd-tabs will cause screens to flip back and forth. Also can't have a browser, Chat, or what have you up side by side with it, etc.

MacVim has this as an option (which I keep off): 
![advanced 2013-10-14 16-13-08](https://f.cloud.github.com/assets/47749/1328928/0a8f68ea-350d-11e3-93ba-64df6da09eeb.jpg)

Is it possible to have this in Atom or even just something like it in my ~/.atom/user.coffee?

Totally recognize that this is a little finicky. :grin: 
",enhancement
Elastic scrolling not working on editors,"Can the rubber band scroll effect at the top and bottom of the editor when reaching the end of the scrollable area be enabled?  I'm not sure if this works yet on scrollable divs, but it would be nice.
",enhancement
